"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –≤ T-Bank sandbox
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç: –±–∞–ª–∞–Ω—Å, –ø–æ–∑–∏—Ü–∏–∏, –æ–ø–µ—Ä–∞—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from decimal import Decimal

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

try:
    from tinkoff.invest import AsyncClient
    from tinkoff.invest.constants import INVEST_GRPC_API_SANDBOX
    TINKOFF_AVAILABLE = True
except ImportError:
    TINKOFF_AVAILABLE = False
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ tinkoff-investments –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def format_money(value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if hasattr(value, 'units') and hasattr(value, 'nano'):
        amount = value.units + value.nano / 1_000_000_000
    else:
        amount = float(value)
    return f"{amount:,.2f}"


def format_quotation(value) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Quotation"""
    if hasattr(value, 'units') and hasattr(value, 'nano'):
        amount = value.units + value.nano / 1_000_000_000
    else:
        amount = float(value)
    return f"{amount:,.4f}"


async def get_portfolio_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
    
    if not TINKOFF_AVAILABLE:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install tinkoff-investments")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = os.environ.get('TINKOFF_TOKEN')
    if not token:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env
        env_file = '.env'
        if os.path.exists(env_file):
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip() and not line.startswith('#'):
                            if '=' in line:
                                key, value = line.strip().split('=', 1)
                                if key.strip() == 'TINKOFF_TOKEN':
                                    token = value.strip().strip('"').strip("'")
                                    break
            except Exception:
                pass
    
    if not token:
        print("‚ùå TINKOFF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: TINKOFF_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ account_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    account_id = None
    config_file = 'config/test_config.yaml'
    if os.path.exists(config_file):
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if 'account_id:' in line and '"' in line:
                        account_id = line.split('"')[1]
                        break
        except Exception:
            pass
    
    print("=" * 80)
    print("üìä –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–†–¢–§–ï–õ–ï T-BANK SANDBOX")
    print("=" * 80)
    print()
    
    try:
        async with AsyncClient(token, target=INVEST_GRPC_API_SANDBOX) as client:
            
            # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
            print("1Ô∏è‚É£  –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ß–ï–¢–ï")
            print("-" * 80)
            
            if account_id:
                print(f"Account ID: {account_id}")
            else:
                accounts = await client.users.get_accounts()
                if accounts.accounts:
                    account_id = accounts.accounts[0].id
                    print(f"Account ID: {account_id}")
                else:
                    print("‚ùå –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
            
            print()
            
            # 2. –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
            print("2Ô∏è‚É£  –î–ï–ù–ï–ñ–ù–´–ï –°–†–ï–î–°–¢–í–ê")
            print("-" * 80)
            
            positions_response = await client.sandbox.get_sandbox_positions(
                account_id=account_id
            )
            
            if positions_response.money:
                total_rub = 0
                for money in positions_response.money:
                    amount = format_money(money)
                    currency = money.currency.upper()
                    print(f"  {currency:6s}: {amount:>20s}")
                    if money.currency.lower() == 'rub':
                        total_rub = float(amount.replace(',', ''))
                print()
                print(f"  üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (RUB): {total_rub:,.2f} ‚ÇΩ")
            else:
                print("  –ù–µ—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
            
            print()
            
            # 3. –ü–æ—Ä—Ç—Ñ–µ–ª—å (–ø–æ–∑–∏—Ü–∏–∏)
            print("3Ô∏è‚É£  –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò")
            print("-" * 80)
            
            portfolio_response = await client.sandbox.get_sandbox_portfolio(
                account_id=account_id
            )
            
            if portfolio_response.positions:
                print(f"{'–¢–∏–∫–µ—Ä':<8} {'–ö–æ–ª-–≤–æ':<10} {'–°—Ä.—Ü–µ–Ω–∞':<15} {'–¢–µ–∫.—Ü–µ–Ω–∞':<15} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<15} {'P&L %':<10}")
                print("-" * 80)
                
                total_value = 0
                total_pnl = 0
                
                # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ FIGI -> —Ç–∏–∫–µ—Ä
                shares_response = await client.instruments.shares()
                figi_to_ticker = {share.figi: share.ticker for share in shares_response.instruments}
                
                for position in portfolio_response.positions:
                    ticker = figi_to_ticker.get(position.figi, position.figi[:8])
                    quantity = format_quotation(position.quantity)
                    
                    avg_price = 0
                    if hasattr(position, 'average_position_price'):
                        avg_price_val = format_money(position.average_position_price)
                        avg_price = float(avg_price_val.replace(',', ''))
                    
                    current_price = 0
                    if hasattr(position, 'current_price'):
                        current_price_val = format_money(position.current_price)
                        current_price = float(current_price_val.replace(',', ''))
                    
                    value = float(quantity.replace(',', '')) * current_price
                    total_value += value
                    
                    # –†–∞—Å—á–µ—Ç P&L
                    if avg_price > 0:
                        cost = float(quantity.replace(',', '')) * avg_price
                        pnl = ((value - cost) / cost) * 100
                        total_pnl += (value - cost)
                        pnl_str = f"{pnl:+.2f}%"
                    else:
                        pnl_str = "‚Äî"
                    
                    print(f"{ticker:<8} {quantity:<10} {avg_price:>14,.2f} {current_price:>14,.2f} {value:>14,.2f} {pnl_str:>10}")
                
                print("-" * 80)
                print(f"{'–ò–¢–û–ì–û:':<8} {'':10} {'':15} {'':15} {total_value:>14,.2f} {total_pnl:>+14,.2f}")
                print()
                print(f"  üìà –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {total_value:,.2f} ‚ÇΩ")
                print(f"  {'üìä –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ' + f'{total_pnl:+,.2f}'} ‚ÇΩ")
                
            else:
                print("  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            
            print()
            
            # 4. –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
            print("4Ô∏è‚É£  –û–ë–©–ê–Ø –°–í–û–î–ö–ê")
            print("-" * 80)
            
            if hasattr(portfolio_response, 'total_amount_shares'):
                total_shares = format_money(portfolio_response.total_amount_shares)
                print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ü–∏–π:     {total_shares:>20s} ‚ÇΩ")
            
            if hasattr(portfolio_response, 'total_amount_bonds'):
                total_bonds = format_money(portfolio_response.total_amount_bonds)
                print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–π: {total_bonds:>20s} ‚ÇΩ")
            
            if hasattr(portfolio_response, 'total_amount_etf'):
                total_etf = format_money(portfolio_response.total_amount_etf)
                print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å ETF:       {total_etf:>20s} ‚ÇΩ")
            
            if hasattr(portfolio_response, 'expected_yield'):
                expected = format_quotation(portfolio_response.expected_yield)
                print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {expected:>19s} ‚ÇΩ")
            
            print()
            
            # 5. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            print("5Ô∏è‚É£  –ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)")
            print("-" * 80)
            
            from_date = datetime.now() - timedelta(days=7)
            to_date = datetime.now()
            
            operations_response = await client.sandbox.get_sandbox_operations(
                account_id=account_id,
                from_=from_date,
                to=to_date
            )
            
            if operations_response.operations:
                operations = sorted(operations_response.operations, 
                                  key=lambda x: x.date if x.date else datetime.min, 
                                  reverse=True)
                
                print(f"{'–î–∞—Ç–∞':<20} {'–¢–∏–ø':<25} {'–¢–∏–∫–µ—Ä':<8} {'–ö–æ–ª-–≤–æ':<10} {'–¶–µ–Ω–∞':<15} {'–°—É–º–º–∞':<15}")
                print("-" * 80)
                
                shown = 0
                for op in operations[:20]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ–ø–µ—Ä–∞—Ü–∏–π
                    if op.state.name != 'OPERATION_STATE_EXECUTED':
                        continue
                    
                    date_str = op.date.strftime('%Y-%m-%d %H:%M:%S') if op.date else '‚Äî'
                    op_type = op.operation_type.name.replace('OPERATION_TYPE_', '').replace('_', ' ')
                    
                    ticker = '‚Äî'
                    if hasattr(op, 'figi') and op.figi:
                        ticker = figi_to_ticker.get(op.figi, op.figi[:8])
                    
                    quantity = str(op.quantity) if hasattr(op, 'quantity') and op.quantity else '‚Äî'
                    
                    price_str = '‚Äî'
                    if hasattr(op, 'price') and op.price:
                        price_str = format_money(op.price)
                    
                    payment_str = '‚Äî'
                    if hasattr(op, 'payment') and op.payment:
                        payment_str = format_money(op.payment)
                    
                    print(f"{date_str:<20} {op_type:<25} {ticker:<8} {quantity:<10} {price_str:<15} {payment_str:<15}")
                    shown += 1
                
                if shown == 0:
                    print("  –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
                else:
                    print()
                    print(f"  –ü–æ–∫–∞–∑–∞–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {shown}")
            else:
                print("  –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
            
            print()
            print("=" * 80)
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞")
            print("=" * 80)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    asyncio.run(get_portfolio_info())

