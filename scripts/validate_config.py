#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ main.yaml
"""

import sys
import os
import yaml
from pathlib import Path
from typing import Dict, List, Any


def validate_config(config_path: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Args:
        config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
    """
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_path}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_path, 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        
        if not config:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Å—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
        required_sections = ['data', 'neural_networks', 'trading', 'portfolio']
        for section in required_sections:
            if section not in config:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è: {section}")
                return False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ data
        if not validate_data_section(config['data']):
            return False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ neural_networks
        if not validate_neural_networks_section(config['neural_networks']):
            return False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ trading
        if not validate_trading_section(config['trading']):
            return False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ portfolio
        if not validate_portfolio_section(config['portfolio']):
            return False
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if 'logging' in config:
            validate_logging_section(config['logging'])
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if 'notifications' in config:
            validate_notifications_section(config['notifications'])
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞!")
        return True
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return False
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ YAML: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def validate_data_section(data_config: Dict[str, Any]) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ data"""
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    required_params = ['provider', 'symbols', 'update_interval', 'history_days']
    for param in required_params:
        if param not in data_config:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä data.{param}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    symbols = data_config['symbols']
    if not isinstance(symbols, list) or len(symbols) == 0:
        print("‚ùå data.symbols –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        return False
    
    valid_symbols = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'NLMK', 'MAGN', 'YNDX', 'MOEX', 'VTBR', 'ALRS', 'AFLT', 'SNGSP', 'MGNT', 'CHMF', 'RUAL', 'FIVE', 'OZON']
    invalid_symbols = [s for s in symbols if s not in valid_symbols]
    if invalid_symbols:
        print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {invalid_symbols}")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {valid_symbols}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    update_interval = data_config['update_interval']
    if not isinstance(update_interval, int) or update_interval < 60:
        print("‚ö†Ô∏è  data.update_interval –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 60 —Å–µ–∫—É–Ω–¥")
    
    history_days = data_config['history_days']
    if not isinstance(history_days, int) or history_days < 90:
        print("‚ö†Ô∏è  data.history_days –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 90 –¥–Ω–µ–π")
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True


def validate_neural_networks_section(nn_config: Dict[str, Any]) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ neural_networks"""
    print("üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    if 'models' not in nn_config:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç neural_networks.models")
        return False
    
    models = nn_config['models']
    if not isinstance(models, list) or len(models) == 0:
        print("‚ùå neural_networks.models –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º")
        return False
    
    total_weight = 0
    enabled_models = 0
    
    for i, model in enumerate(models):
        print(f"  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ {i+1}: {model.get('name', 'unnamed')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
        required_model_params = ['name', 'type', 'weight', 'enabled']
        for param in required_model_params:
            if param not in model:
                print(f"‚ùå –ú–æ–¥–µ–ª—å {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {param}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        model_type = model['type']
        if model_type not in ['xgboost', 'deepseek', 'transformer']:
            print(f"‚ùå –ú–æ–¥–µ–ª—å {i+1}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø {model_type}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–æ–≤
        weight = model['weight']
        if not isinstance(weight, (int, float)) or weight < 0 or weight > 1:
            print(f"‚ùå –ú–æ–¥–µ–ª—å {i+1}: –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
            return False
        
        total_weight += weight
        
        if model['enabled']:
            enabled_models += 1
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è XGBoost
        if model_type == 'xgboost':
            validate_xgboost_model(model, i+1)
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è DeepSeek
        elif model_type == 'deepseek':
            validate_deepseek_model(model, i+1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–æ–≤
    if abs(total_weight - 1.0) > 0.01:
        print(f"‚ö†Ô∏è  –°—É–º–º–∞ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–∞ –∫ 1.0, —Ç–µ–∫—É—â–∞—è: {total_weight:.3f}")
    
    if enabled_models == 0:
        print("‚ùå –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        return False
    
    print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ({enabled_models} –º–æ–¥–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–æ)")
    return True


def validate_xgboost_model(model: Dict[str, Any], model_num: int):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è XGBoost –º–æ–¥–µ–ª–∏"""
    xgb_params = ['n_estimators', 'max_depth', 'learning_rate', 'subsample', 'colsample_bytree', 'buy_threshold', 'sell_threshold']
    
    for param in xgb_params:
        if param not in model:
            print(f"‚ö†Ô∏è  XGBoost –º–æ–¥–µ–ª—å {model_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {param}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤
    if 'buy_threshold' in model and 'sell_threshold' in model:
        buy_thresh = model['buy_threshold']
        sell_thresh = model['sell_threshold']
        
        if not isinstance(buy_thresh, (int, float)) or buy_thresh <= 0:
            print(f"‚ö†Ô∏è  XGBoost –º–æ–¥–µ–ª—å {model_num}: buy_threshold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        if not isinstance(sell_thresh, (int, float)) or sell_thresh >= 0:
            print(f"‚ö†Ô∏è  XGBoost –º–æ–¥–µ–ª—å {model_num}: sell_threshold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")


def validate_deepseek_model(model: Dict[str, Any], model_num: int):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è DeepSeek –º–æ–¥–µ–ª–∏"""
    deepseek_params = ['api_key', 'base_url', 'model_name', 'max_tokens', 'temperature', 'analysis_window']
    
    for param in deepseek_params:
        if param not in model:
            print(f"‚ö†Ô∏è  DeepSeek –º–æ–¥–µ–ª—å {model_num}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {param}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if 'api_key' in model:
        api_key = model['api_key']
        if not api_key or api_key == "your_deepseek_api_key":
            print(f"‚ö†Ô∏è  DeepSeek –º–æ–¥–µ–ª—å {model_num}: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ max_tokens
    if 'max_tokens' in model:
        max_tokens = model['max_tokens']
        if not isinstance(max_tokens, int) or max_tokens < 1000 or max_tokens > 8000:
            print(f"‚ö†Ô∏è  DeepSeek –º–æ–¥–µ–ª—å {model_num}: max_tokens –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1000 –¥–æ 8000")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ temperature
    if 'temperature' in model:
        temperature = model['temperature']
        if not isinstance(temperature, (int, float)) or temperature < 0 or temperature > 1:
            print(f"‚ö†Ô∏è  DeepSeek –º–æ–¥–µ–ª—å {model_num}: temperature –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ analysis_window
    if 'analysis_window' in model:
        window = model['analysis_window']
        if not isinstance(window, int) or window < 10 or window > 90:
            print(f"‚ö†Ô∏è  DeepSeek –º–æ–¥–µ–ª—å {model_num}: analysis_window –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 90 –¥–Ω–µ–π")


def validate_trading_section(trading_config: Dict[str, Any]) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ trading"""
    print("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    required_params = ['broker', 'signal_threshold', 'max_positions', 'position_size']
    for param in required_params:
        if param not in trading_config:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä trading.{param}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–æ–∫–µ—Ä–∞
    broker = trading_config['broker']
    valid_brokers = ['paper', 'tinkoff', 'sber']
    if broker not in valid_brokers:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–æ–∫–µ—Ä: {broker}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {valid_brokers}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_threshold = trading_config['signal_threshold']
    if not isinstance(signal_threshold, (int, float)) or signal_threshold < 0 or signal_threshold > 1:
        print("‚ùå trading.signal_threshold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
    max_positions = trading_config['max_positions']
    if not isinstance(max_positions, int) or max_positions < 1 or max_positions > 50:
        print("‚ö†Ô∏è  trading.max_positions —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 1 –¥–æ 50")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    position_size = trading_config['position_size']
    if not isinstance(position_size, (int, float)) or position_size <= 0 or position_size > 0.5:
        print("‚ö†Ô∏è  trading.position_size —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 0 –¥–æ 0.5")
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True


def validate_portfolio_section(portfolio_config: Dict[str, Any]) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ portfolio"""
    print("üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    required_params = ['initial_capital', 'max_risk_per_trade', 'max_portfolio_risk']
    for param in required_params:
        if param not in portfolio_config:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä portfolio.{param}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
    initial_capital = portfolio_config['initial_capital']
    if not isinstance(initial_capital, (int, float)) or initial_capital < 10000:
        print("‚ö†Ô∏è  portfolio.initial_capital —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >= 10000")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
    max_risk_per_trade = portfolio_config['max_risk_per_trade']
    if not isinstance(max_risk_per_trade, (int, float)) or max_risk_per_trade <= 0 or max_risk_per_trade > 0.1:
        print("‚ö†Ô∏è  portfolio.max_risk_per_trade —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 0 –¥–æ 0.1")
    
    max_portfolio_risk = portfolio_config['max_portfolio_risk']
    if not isinstance(max_portfolio_risk, (int, float)) or max_portfolio_risk <= 0 or max_portfolio_risk > 0.5:
        print("‚ö†Ô∏è  portfolio.max_portfolio_risk —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç 0 –¥–æ 0.5")
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    return True


def validate_logging_section(logging_config: Dict[str, Any]):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ logging"""
    print("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    valid_levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
    level = logging_config.get('level', 'INFO')
    if level not in valid_levels:
        print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {level}")
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


def validate_notifications_section(notifications_config: Dict[str, Any]):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ notifications"""
    print("üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    if notifications_config.get('enabled', False):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if 'email' in notifications_config:
            email_config = notifications_config['email']
            required_email_params = ['smtp_server', 'smtp_port', 'username', 'password', 'to_email']
            for param in required_email_params:
                if param not in email_config:
                    print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä notifications.email.{param}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if 'telegram' in notifications_config:
            telegram_config = notifications_config['telegram']
            required_telegram_params = ['bot_token', 'chat_id']
            for param in required_telegram_params:
                if param not in telegram_config:
                    print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä notifications.telegram.{param}")
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python validate_config.py <–ø—É—Ç—å_–∫_config.yaml>")
        print("–ü—Ä–∏–º–µ—Ä: python validate_config.py config/main.yaml")
        sys.exit(1)
    
    config_path = sys.argv[1]
    
    if not Path(config_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        sys.exit(1)
    
    is_valid = validate_config(config_path)
    
    if is_valid:
        print("\nüéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        sys.exit(0)
    else:
        print("\n‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main()
