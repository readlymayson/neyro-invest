# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∞–Ω–∞–ª–∏–∑—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
"""

import sys
import json
import asyncio
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List
import pickle

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
sys.path.append(str(root_dir))

from src.neural_networks.network_manager import NetworkManager
from src.utils.config_manager import ConfigManager
from src.data.data_provider import DataProvider
from loguru import logger
import pandas as pd
import numpy as np


class NeuralAnalysisReporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    
    def __init__(self, config_path: str = "config/main.yaml"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
        
        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.config_manager = ConfigManager(config_path)
        self.config = self.config_manager.get_config()
        self.network_manager = NetworkManager(self.config['neural_networks'])
        self.data_provider = DataProvider(self.config['data'])
        self.models_dir = Path("models")
        self.data_dir = Path("data")
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self.data_provider.initialize()
            await self.network_manager.initialize()
            logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
    def print_header(self, title: str, width: int = 80):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\n" + "=" * width)
        print(f"  {title}")
        print("=" * width)
    
    def print_section(self, title: str, width: int = 80):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
        print("\n" + "-" * width)
        print(f"  {title}")
        print("-" * width)
    
    def format_dict(self, data: Dict[str, Any], indent: int = 2) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        lines = []
        for key, value in data.items():
            if isinstance(value, dict):
                lines.append(f"{' ' * indent}{key}:")
                lines.append(self.format_dict(value, indent + 2))
            elif isinstance(value, float):
                lines.append(f"{' ' * indent}{key}: {value:.4f}")
            elif isinstance(value, list):
                lines.append(f"{' ' * indent}{key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if len(value) <= 5:
                    for item in value:
                        lines.append(f"{' ' * (indent + 2)}- {item}")
            else:
                lines.append(f"{' ' * indent}{key}: {value}")
        return "\n".join(lines)
    
    def show_configuration(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
        self.print_header("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ï–ô")
        
        nn_config = self.config.get('neural_networks', {})
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
        print("\nüìä –ú–æ–¥–µ–ª–∏:")
        models = nn_config.get('models', [])
        for i, model_config in enumerate(models, 1):
            print(f"\n  {i}. {model_config.get('name', 'Unknown')}")
            print(f"     –¢–∏–ø: {model_config.get('type', 'Unknown')}")
            print(f"     –í–∫–ª—é—á–µ–Ω–∞: {model_config.get('enabled', True)}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            config_params = model_config.get('config', {})
            if config_params:
                print(f"     –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                for param, value in config_params.items():
                    if param != 'api_key':  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º API –∫–ª—é—á–∏
                        if isinstance(value, float):
                            print(f"       - {param}: {value:.4f}")
                        else:
                            print(f"       - {param}: {value}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω—Å–∞–º–±–ª–µ
        self.print_section("–ê–Ω—Å–∞–º–±–ª—å –º–æ–¥–µ–ª–µ–π")
        ensemble = nn_config.get('ensemble', {})
        print(f"  –ú–µ—Ç–æ–¥: {ensemble.get('method', 'weighted_average')}")
        print(f"  –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {ensemble.get('confidence_threshold', 0.7)}")
        
        weights = ensemble.get('weights', {})
        if weights:
            print("  –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π:")
            for model_name, weight in weights.items():
                print(f"    - {model_name}: {weight}")
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–Ω–∞–ª–∏–∑–∞
        self.print_section("–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∞–Ω–∞–ª–∏–∑–∞")
        print(f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞: {nn_config.get('analysis_interval', 180)} —Å–µ–∫")
        print(f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {nn_config.get('signal_check_interval', 180)} —Å–µ–∫")
    
    def show_models_status(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π"""
        self.print_header("–°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô")
        
        status = self.network_manager.get_status()
        
        print(f"\n–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {status.get('total_models', 0)}")
        print(f"–û–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {status.get('trained_models', 0)}")
        print(f"–ú–µ—Ç–æ–¥ –∞–Ω—Å–∞–º–±–ª—è: {status.get('ensemble_method', 'N/A')}")
        
        last_analysis = status.get('last_analysis_time')
        if last_analysis:
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {last_analysis}")
        else:
            print("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        models_status = status.get('models_status', {})
        for model_name, model_status in models_status.items():
            self.print_section(f"–ú–æ–¥–µ–ª—å: {model_name}")
            print(f"  –û–±—É—á–µ–Ω–∞: {'‚úÖ –î–∞' if model_status.get('is_trained') else '‚ùå –ù–µ—Ç'}")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            metrics = model_status.get('performance_metrics', {})
            if metrics:
                print("  –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
                for metric, value in metrics.items():
                    if isinstance(value, float):
                        print(f"    - {metric}: {value:.4f}")
                    else:
                        print(f"    - {metric}: {value}")
            else:
                print("  –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            last_pred_time = model_status.get('last_prediction_time')
            if last_pred_time:
                print(f"  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {last_pred_time}")
            else:
                print("  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å")
    
    def show_last_analysis(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        self.print_header("–ü–û–°–õ–ï–î–ù–ò–ô –ê–ù–ê–õ–ò–ó")
        
        last_analysis = self.network_manager.last_analysis
        
        if not last_analysis:
            print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è")
            return
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\n–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {last_analysis.get('analysis_time', 'N/A')}")
        print(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(last_analysis.get('symbols_analyzed', []))}")
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(last_analysis.get('models_used', []))}")
        news_included = '‚úÖ –î–∞' if last_analysis.get('news_data_included') else '‚ùå –ù–µ—Ç'
        print(f"–ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã: {news_included}")
        
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –º–æ–¥–µ–ª—è–º
        self.print_section("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –º–æ–¥–µ–ª—è–º")
        individual = last_analysis.get('individual_predictions', {})
        
        for model_name, predictions in individual.items():
            print(f"\n  –ú–æ–¥–µ–ª—å: {model_name}")
            print(f"    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(predictions)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            for symbol, prediction in list(predictions.items())[:5]:
                signal = prediction.get('signal', 'N/A')
                confidence = prediction.get('confidence', 0.0)
                print(f"    {symbol}: {signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f})")
            
            if len(predictions) > 5:
                print(f"    ... –∏ –µ—â–µ {len(predictions) - 5} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.print_section("–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        ensemble_preds = last_analysis.get('ensemble_predictions', {})
        
        if ensemble_preds:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
            signals_count = {'BUY': 0, 'SELL': 0, 'HOLD': 0}
            for symbol, pred in ensemble_preds.items():
                signal = pred.get('signal', 'HOLD')
                if signal in signals_count:
                    signals_count[signal] += 1
            
            print(f"\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
            print(f"    BUY: {signals_count['BUY']}")
            print(f"    SELL: {signals_count['SELL']}")
            print(f"    HOLD: {signals_count['HOLD']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –ø–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–∞–º
            print(f"\n  –î–µ—Ç–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (–ø–µ—Ä–≤—ã–µ 10):")
            for i, (symbol, pred) in enumerate(list(ensemble_preds.items())[:10], 1):
                signal = pred.get('signal', 'N/A')
                confidence = pred.get('confidence', 0.0)
                trend = pred.get('trend', 'N/A')
                method = pred.get('method', 'N/A')
                
                print(f"\n    {i}. {symbol}")
                print(f"       –°–∏–≥–Ω–∞–ª: {signal}")
                print(f"       –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f}")
                print(f"       –¢—Ä–µ–Ω–¥: {trend}")
                print(f"       –ú–µ—Ç–æ–¥: {method}")
                
                # –ù–æ–≤–æ—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                news_summary = pred.get('news_summary')
                if news_summary:
                    print(f"       –ù–æ–≤–æ—Å—Ç–∏: –≤–∫–ª—é—á–µ–Ω—ã")
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
                signal_dist = pred.get('signal_distribution', {})
                if signal_dist:
                    print(f"       –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {signal_dist}")
            
            if len(ensemble_preds) > 10:
                print(f"\n    ... –∏ –µ—â–µ {len(ensemble_preds) - 10} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("\n  –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    async def show_feature_importance(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        self.print_header("–í–ê–ñ–ù–û–°–¢–¨ –ü–†–ò–ó–ù–ê–ö–û–í")
        
        for model_name, model in self.network_manager.models.items():
            self.print_section(f"–ú–æ–¥–µ–ª—å: {model_name}")
            
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                feature_importance = None
                
                # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É (–¥–ª—è XGBoost)
                if hasattr(model, 'feature_importance') and model.feature_importance:
                    feature_importance = model.feature_importance
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                elif hasattr(model, 'get_feature_importance'):
                    try:
                        feature_importance = await model.get_feature_importance()
                    except:
                        pass
                
                if feature_importance:
                    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
                    sorted_features = sorted(
                        feature_importance.items(),
                        key=lambda x: x[1],
                        reverse=True
                    )
                    
                    print(f"\n  –¢–æ–ø-15 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                    for i, (feature, importance) in enumerate(sorted_features[:15], 1):
                        print(f"    {i:2d}. {feature}: {importance:.6f}")
                    
                    if len(sorted_features) > 15:
                        print(f"\n    ... –∏ –µ—â–µ {len(sorted_features) - 15} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                else:
                    print("  –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞)")
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
    
    def show_saved_models(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö"""
        self.print_header("–°–û–•–†–ê–ù–ï–ù–ù–´–ï –ú–û–î–ï–õ–ò")
        
        if not self.models_dir.exists():
            print("\n‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è models –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        model_files = list(self.models_dir.glob("*.pkl"))
        
        if not model_files:
            print("\n‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π: {len(model_files)}")
        
        for model_file in model_files:
            self.print_section(f"–§–∞–π–ª: {model_file.name}")
            
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_size = model_file.stat().st_size
                file_time = datetime.fromtimestamp(model_file.stat().st_mtime)
                
                print(f"  –†–∞–∑–º–µ—Ä: {file_size / 1024:.2f} KB")
                print(f"  –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {file_time.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
                try:
                    with open(model_file, 'rb') as f:
                        model_data = pickle.load(f)
                    
                    if hasattr(model_data, 'is_trained'):
                        print(f"  –û–±—É—á–µ–Ω–∞: {'‚úÖ –î–∞' if model_data.is_trained else '‚ùå –ù–µ—Ç'}")
                    
                    if hasattr(model_data, 'performance_metrics'):
                        metrics = model_data.performance_metrics
                        if metrics:
                            print("  –ú–µ—Ç—Ä–∏–∫–∏:")
                            for metric, value in list(metrics.items())[:3]:
                                if isinstance(value, float):
                                    print(f"    - {metric}: {value:.4f}")
                                else:
                                    print(f"    - {metric}: {value}")
                    
                    if hasattr(model_data, 'name'):
                        print(f"  –ò–º—è –º–æ–¥–µ–ª–∏: {model_data.name}")
                        
                except Exception as e:
                    print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–æ–¥–µ–ª—å: {e}")
                    
            except Exception as e:
                print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
    
    def show_saved_signals(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.print_header("–°–û–•–†–ê–ù–ï–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´")
        
        signals_file = self.data_dir / "signals.json"
        
        if not signals_file.exists():
            print("\n‚ùå –§–∞–π–ª signals.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            with open(signals_file, 'r', encoding='utf-8') as f:
                signals = json.load(f)
            
            if not signals:
                print("\n‚ùå –°–∏–≥–Ω–∞–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return
            
            print(f"\n–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            symbols_count = {}
            signals_by_symbol = {}
            for signal in signals:
                symbol = signal.get('symbol', 'Unknown')
                symbols_count[symbol] = symbols_count.get(symbol, 0) + 1
                if symbol not in signals_by_symbol:
                    signals_by_symbol[symbol] = []
                signals_by_symbol[symbol].append(signal)
            
            print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols_count)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
            signal_types = {'BUY': 0, 'SELL': 0, 'HOLD': 0}
            for signal in signals:
                sig_type = signal.get('signal', 'HOLD')
                if sig_type in signal_types:
                    signal_types[sig_type] += 1
            
            print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
            print(f"  BUY: {signal_types['BUY']}")
            print(f"  SELL: {signal_types['SELL']}")
            print(f"  HOLD: {signal_types['HOLD']}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            sources_count = {}
            for signal in signals:
                source = signal.get('source', 'Unknown')
                sources_count[source] = sources_count.get(source, 0) + 1
            
            print(f"\n–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
            for source, count in sources_count.items():
                print(f"  {source}: {count}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            self.print_section("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–ø–µ—Ä–≤—ã–µ 10)")
            for i, signal in enumerate(signals[:10], 1):
                print(f"\n  {i}. {signal.get('symbol', 'N/A')}")
                print(f"     –°–∏–≥–Ω–∞–ª: {signal.get('signal', 'N/A')}")
                print(f"     –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 0.0):.4f}")
                print(f"     –í—Ä–µ–º—è: {signal.get('time', 'N/A')}")
                print(f"     –ò—Å—Ç–æ—á–Ω–∏–∫: {signal.get('source', 'N/A')}")
                reasoning = signal.get('reasoning', '')
                if reasoning:
                    print(f"     –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reasoning[:100]}...")
            
            if len(signals) > 10:
                print(f"\n  ... –∏ –µ—â–µ {len(signals) - 10} —Å–∏–≥–Ω–∞–ª–æ–≤")
                
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ signals.json: {e}")
    
    async def show_analysis_data(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        self.print_header("–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê (–°–û–ó–î–ê–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í)")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = await self.data_provider.get_latest_data()
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            self.print_section("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("  –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:")
            print("    data = {")
            print("      'historical': {symbol: pd.DataFrame},  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
            print("      'realtime': {symbol: dict},           # –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
            print("      'news': {symbol: dict},               # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("      'last_update': datetime               # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            print("    }")
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            historical = market_data.get('historical', {})
            if isinstance(historical, dict):
                print(f"\n  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                if historical:
                    first_symbol = list(historical.keys())[0]
                    symbol_data = historical[first_symbol]
                    
                    if isinstance(symbol_data, pd.DataFrame) and not symbol_data.empty:
                        self.print_section(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {first_symbol}")
                        print(f"  –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(symbol_data)} —Å—Ç—Ä–æ–∫ √ó {len(symbol_data.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
                        if len(symbol_data) > 0:
                            print(f"  –ü–µ—Ä–∏–æ–¥: {symbol_data.index[0]} - {symbol_data.index[-1]}")
                        
                        print("\n  –°—Ç–æ–ª–±—Ü—ã –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                        base_columns = ['Open', 'High', 'Low', 'Close', 'Volume']
                        for col in base_columns:
                            if col in symbol_data.columns:
                                values = symbol_data[col]
                                print(f"    - {col}:")
                                print(f"      –ú–∏–Ω–∏–º—É–º: {values.min():.2f}")
                                print(f"      –ú–∞–∫—Å–∏–º—É–º: {values.max():.2f}")
                                print(f"      –°—Ä–µ–¥–Ω–µ–µ: {values.mean():.2f}")
                                print(f"      –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {values.iloc[-1]:.2f}")
                        
                        print("\n  –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:")
                        print(symbol_data.tail(5).to_string())
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
                        self.print_section("–ü—Ä–∏–∑–Ω–∞–∫–∏, —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ")
                        print("  –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
                        print("    - SMA_5, SMA_10, SMA_20, SMA_50 (—Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ)")
                        print("    - EMA_5, EMA_10, EMA_20, EMA_50 (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ)")
                        print("    - RSI (–∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)")
                        print("    - MACD, MACD_Signal (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ö–æ–∂–¥–µ–Ω–∏—è-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è)")
                        print("    - BB_Upper, BB_Middle, BB_Lower, BB_Width (–ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)")
                        print("    - Volatility (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)")
                        print("    - Volume_SMA, Volume_Ratio (–æ–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)")
                        print("    - Price_Change, Price_Change_5, Price_Change_10 (–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω)")
                        print("    - Open_norm, High_norm, Low_norm, Close_norm (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã)")
                        print("    - Hour, DayOfWeek, Month, Quarter (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)")
                        
                        print("\n  –í—Å–µ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è: ~30+")
            
            # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            news_data = market_data.get('news', {})
            if news_data:
                self.print_section("–ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                print(f"  –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {len(news_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if news_data:
                    first_symbol = list(news_data.keys())[0]
                    symbol_news = news_data[first_symbol]
                    
                    print(f"\n  –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {first_symbol}:")
                    if isinstance(symbol_news, dict):
                        print(f"    - –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {symbol_news.get('total_news', 0)}")
                        print(f"    - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {symbol_news.get('positive_news', 0)}")
                        print(f"    - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {symbol_news.get('negative_news', 0)}")
                        print(f"    - –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {symbol_news.get('neutral_news', 0)}")
                        print(f"    - –°—Ä–µ–¥–Ω—è—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {symbol_news.get('avg_sentiment', 0.0):.4f}")
                        print(f"    - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {symbol_news.get('sentiment_confidence', 0.0):.4f}")
                        print(f"    - –¢—Ä–µ–Ω–¥: {symbol_news.get('recent_trend', 'neutral')}")
            
            # –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            realtime = market_data.get('realtime', {})
            if realtime:
                self.print_section("–î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                print(f"  –î–∞–Ω–Ω—ã–µ –¥–ª—è {len(realtime)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                if realtime:
                    first_symbol = list(realtime.keys())[0]
                    symbol_realtime = realtime[first_symbol]
                    
                    print(f"\n  –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {first_symbol}:")
                    if isinstance(symbol_realtime, dict):
                        for key, value in symbol_realtime.items():
                            if isinstance(value, float):
                                print(f"    - {key}: {value:.2f}")
                            else:
                                print(f"    - {key}: {value}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥–µ–ª–∏
            self.print_section("–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥–µ–ª–∏")
            print("  –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –æ—Ç–¥–µ–ª—å–Ω–æ:")
            print("    for symbol, symbol_data in data['historical'].items():")
            print("      prediction = await model.predict(")
            print("        symbol_data,                    # DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            print("        portfolio_manager=...,          # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            print("        symbol=symbol,                  # –°–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            print("        news_data=news_data[symbol]    # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞")
            print("      )")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()
    
    async def show_training_data(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        self.print_header("–î–ê–ù–ù–´–ï –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            historical_data = await self.data_provider.get_latest_data()
            
            self.print_section("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            print("  –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:")
            print("    data = pd.DataFrame  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            print("    target = 'Close'      # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è")
            print("    news_data = {symbol: dict}  # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            historical = historical_data.get('historical', {})
            if isinstance(historical, dict) and historical:
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
                combined_data = []
                for symbol, symbol_data in historical.items():
                    if isinstance(symbol_data, pd.DataFrame) and not symbol_data.empty:
                        symbol_data_copy = symbol_data.copy()
                        symbol_data_copy['Symbol'] = symbol  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å–∏–º–≤–æ–ª–∞
                        combined_data.append(symbol_data_copy)
                
                if combined_data:
                    combined_df = pd.concat(combined_data, ignore_index=True)
                    
                    self.print_section("–ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                    print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(combined_df)} —Å—Ç—Ä–æ–∫ √ó {len(combined_df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
                    print(f"  –°–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö: {combined_df['Symbol'].nunique() if 'Symbol' in combined_df.columns else 'N/A'}")
                    
                    if 'Symbol' in combined_df.columns:
                        print("\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
                        symbol_counts = combined_df['Symbol'].value_counts()
                        for symbol, count in symbol_counts.head(10).items():
                            print(f"    - {symbol}: {count} —Å—Ç—Ä–æ–∫")
                        if len(symbol_counts) > 10:
                            print(f"    ... –∏ –µ—â–µ {len(symbol_counts) - 10} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –°—Ç–æ–ª–±—Ü—ã –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    base_columns = ['Open', 'High', 'Low', 'Close', 'Volume']
                    available_columns = [col for col in base_columns if col in combined_df.columns]
                    
                    if available_columns:
                        print("\n  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º:")
                        for col in available_columns:
                            values = combined_df[col]
                            print(f"    {col}:")
                            print(f"      –ú–∏–Ω–∏–º—É–º: {values.min():.2f}")
                            print(f"      –ú–∞–∫—Å–∏–º—É–º: {values.max():.2f}")
                            print(f"      –°—Ä–µ–¥–Ω–µ–µ: {values.mean():.2f}")
                            print(f"      –ú–µ–¥–∏–∞–Ω–∞: {values.median():.2f}")
                            print(f"      –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {values.std():.2f}")
                            print(f"      –ü—Ä–æ–ø—É—Å–∫–æ–≤: {values.isna().sum()}")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    self.print_section("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
                    print("  –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:")
                    print("    1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (~20 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)")
                    print("    2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (4 –ø—Ä–∏–∑–Ω–∞–∫–∞)")
                    print("    3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)")
                    print("    4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)")
                    print("    5. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                    
                    print("\n  –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: ~30-50 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç–æ–∫
                    self.print_section("–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç–æ–∫")
                    print("  –î–ª—è XGBoost –º–æ–¥–µ–ª–∏:")
                    print("    - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –±—É–¥—É—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã:")
                    print("      future_return = price[t+1] / price[t] - 1")
                    print("    - –°–æ–∑–¥–∞—é—Ç—Å—è –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤:")
                    print("      0 = SELL  (future_return <= -0.05, –ø–∞–¥–µ–Ω–∏–µ >5%)")
                    print("      1 = HOLD  (-0.05 < future_return < 0.05)")
                    print("      2 = BUY   (future_return >= 0.05, —Ä–æ—Å—Ç >5%)")
                    
                    print("\n  –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–∫ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤):")
                    print("    SELL: –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ 5% –∏ –±–æ–ª–µ–µ")
                    print("    HOLD: –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –æ—Ç -5% –¥–æ +5%")
                    print("    BUY:  –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã –Ω–∞ 5% –∏ –±–æ–ª–µ–µ")
                    
                    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    if len(combined_df) > 0:
                        self.print_section("–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                        print(combined_df.head(3).to_string())
            
            # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            news_data = historical_data.get('news', {})
            if news_data:
                self.print_section("–ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                print(f"  –ù–æ–≤–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è {len(news_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                news_config = self.config.get('data', {}).get('news', {})
                if news_config.get('include_news_in_training', False):
                    training_days = news_config.get('training_news_days', 180)
                    print(f"  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {training_days} –¥–Ω–µ–π")
                else:
                    print("  –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
            self.print_section("–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è")
            print("  1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω–æ 1 –≥–æ–¥)")
            print("  2. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            print("  3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ç.–¥.)")
            print("  4. –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç–æ–∫")
            print("  5. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é (80%) –∏ —Ç–µ—Å—Ç–æ–≤—É—é (20%) –≤—ã–±–æ—Ä–∫–∏")
            print("  6. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ")
            print("  7. –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ")
            print("  8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
    
    def show_summary(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏"""
        self.print_header("–ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê", width=60)
        
        status = self.network_manager.get_status()
        
        print(f"\n–ú–æ–¥–µ–ª–µ–π –≤—Å–µ–≥–æ: {status.get('total_models', 0)}")
        print(f"–ú–æ–¥–µ–ª–µ–π –æ–±—É—á–µ–Ω–æ: {status.get('trained_models', 0)}")
        
        last_analysis = self.network_manager.last_analysis
        if last_analysis:
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {last_analysis.get('analysis_time', 'N/A')}")
            print(f"–°–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(last_analysis.get('symbols_analyzed', []))}")
        else:
            print("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        model_files = list(self.models_dir.glob("*.pkl")) if self.models_dir.exists() else []
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(model_files)}")
        
        signals_file = self.data_dir / "signals.json"
        if signals_file.exists():
            try:
                with open(signals_file, 'r', encoding='utf-8') as f:
                    signals = json.load(f)
                print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            except:
                print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        else:
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: 0")
    
    async def run_single_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.print_header("–†–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó")
        
        try:
            print("\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = await self.data_provider.get_latest_data()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            news_data = market_data.get('news', {})
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            historical = market_data.get('historical', {})
            if isinstance(historical, dict):
                print(f"   - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   - –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(news_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            print("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            from src.portfolio.portfolio_manager import PortfolioManager
            portfolio_manager = None
            try:
                portfolio_config = self.config.get('portfolio', {})
                portfolio_manager = PortfolioManager(portfolio_config)
                await portfolio_manager.initialize()
            except Exception as e:
                logger.debug(f"–ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            analysis_results = await self.network_manager.analyze(
                market_data,
                portfolio_manager=portfolio_manager,
                news_data=news_data
            )
            
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n")
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.print_header("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.print_section("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            print(f"  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_results.get('analysis_time', 'N/A')}")
            print(f"  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(analysis_results.get('symbols_analyzed', []))}")
            print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(analysis_results.get('models_used', []))}")
            news_included = '‚úÖ –î–∞' if analysis_results.get('news_data_included') else '‚ùå –ù–µ—Ç'
            print(f"  –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã: {news_included}")
            
            # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –º–æ–¥–µ–ª—è–º
            self.print_section("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –º–æ–¥–µ–ª—è–º")
            individual = analysis_results.get('individual_predictions', {})
            
            for model_name, predictions in individual.items():
                print(f"\n  üìä –ú–æ–¥–µ–ª—å: {model_name}")
                print(f"     –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(predictions)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                for symbol, prediction in list(predictions.items())[:5]:
                    signal = prediction.get('signal', 'N/A')
                    confidence = prediction.get('confidence', 0.0)
                    print(f"     {symbol}: {signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f})")
                
                if len(predictions) > 5:
                    print(f"     ... –∏ –µ—â–µ {len(predictions) - 5} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            self.print_section("–ê–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            ensemble_preds = analysis_results.get('ensemble_predictions', {})
            
            if ensemble_preds:
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
                signals_count = {'BUY': 0, 'SELL': 0, 'HOLD': 0}
                for symbol, pred in ensemble_preds.items():
                    signal = pred.get('signal', 'HOLD')
                    if signal in signals_count:
                        signals_count[signal] += 1
                
                print(f"\n  üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
                print(f"     BUY:  {signals_count['BUY']}")
                print(f"     SELL: {signals_count['SELL']}")
                print(f"     HOLD: {signals_count['HOLD']}")
                
                # –î–µ—Ç–∞–ª–∏ –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
                print(f"\n  üìã –î–µ—Ç–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
                for i, (symbol, pred) in enumerate(ensemble_preds.items(), 1):
                    signal = pred.get('signal', 'N/A')
                    confidence = pred.get('confidence', 0.0)
                    trend = pred.get('trend', 'N/A')
                    method = pred.get('method', 'N/A')
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal_emoji = {
                        'BUY': 'üü¢',
                        'SELL': 'üî¥',
                        'HOLD': 'üü°'
                    }.get(signal, '‚ö™')
                    
                    print(f"\n     {i}. {symbol} {signal_emoji}")
                    print(f"        –°–∏–≥–Ω–∞–ª: {signal}")
                    print(f"        –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f}")
                    print(f"        –¢—Ä–µ–Ω–¥: {trend}")
                    print(f"        –ú–µ—Ç–æ–¥: {method}")
                    
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –º–æ–¥–µ–ª–µ–π
                    signal_dist = pred.get('signal_distribution', {})
                    if signal_dist:
                        print(f"        –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: BUY={signal_dist.get('BUY', 0):.2f}, "
                              f"SELL={signal_dist.get('SELL', 0):.2f}, "
                              f"HOLD={signal_dist.get('HOLD', 0):.2f}")
                    
                    # –ù–æ–≤–æ—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    news_summary = pred.get('news_summary')
                    if news_summary:
                        print(f"        üì∞ –ù–æ–≤–æ—Å—Ç–∏: –≤–∫–ª—é—á–µ–Ω—ã")
                        if isinstance(news_summary, dict):
                            sentiment = news_summary.get('avg_sentiment', 0.0)
                            print(f"           –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {sentiment:.4f}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            self.print_section("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            nn_config = self.config.get('neural_networks', {})
            ensemble_config = nn_config.get('ensemble', {})
            confidence_threshold = ensemble_config.get('confidence_threshold', 0.7)
            
            buy_signals = [(s, p) for s, p in ensemble_preds.items() 
                          if p.get('signal') == 'BUY' and p.get('confidence', 0) >= confidence_threshold]
            sell_signals = [(s, p) for s, p in ensemble_preds.items() 
                           if p.get('signal') == 'SELL' and p.get('confidence', 0) >= confidence_threshold]
            
            print(f"\n  –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {confidence_threshold}")
            
            if buy_signals:
                print("\n  üü¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø–æ–∫—É–ø–∫–µ (–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å):")
                for symbol, pred in buy_signals:
                    confidence = pred.get('confidence', 0.0)
                    print(f"     - {symbol}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.4f}")
            
            if sell_signals:
                print("\n  üî¥ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø—Ä–æ–¥–∞–∂–µ (–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å):")
                for symbol, pred in sell_signals:
                    confidence = pred.get('confidence', 0.0)
                    print(f"     - {symbol}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.4f}")
            
            if not buy_signals and not sell_signals:
                print(f"\n  ‚ö†Ô∏è  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (>={confidence_threshold})")
                print("     –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
            
            print("\n" + "=" * 80)
            print("  –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
            print("=" * 80 + "\n")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()
    
    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            await self.initialize()
            
            # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
            self.show_summary()
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            self.show_configuration()
            
            # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
            self.show_models_status()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
            self.show_last_analysis()
            
            # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            await self.show_feature_importance()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            self.show_saved_models()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            self.show_saved_signals()
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            await self.show_analysis_data()
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            await self.show_training_data()
            
            print("\n" + "=" * 80)
            print("  –û–¢–ß–ï–¢ –ó–ê–í–ï–†–®–ï–ù")
            print("=" * 80 + "\n")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π')
    parser.add_argument(
        '--config',
        type=str,
        default='config/main.yaml',
        help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É'
    )
    parser.add_argument(
        '--analyze',
        action='store_true',
        help='–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
    )
    parser.add_argument(
        '--report-only',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞'
    )
    
    args = parser.parse_args()
    
    reporter = NeuralAnalysisReporter(args.config)
    
    if args.analyze:
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        await reporter.initialize()
        await reporter.run_single_analysis()
    elif args.report_only:
        # –¢–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
        await reporter.generate_report()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –æ—Ç—á–µ—Ç + —Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        await reporter.initialize()
        await reporter.run_single_analysis()
        print("\n" + "=" * 80)
        print("  –ü–û–ö–ê–ó–ê–¢–¨ –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢? (–¥–∞/–Ω–µ—Ç)")
        print("=" * 80)
        try:
            response = input("\n–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip().lower()
            if response in ['–¥–∞', 'yes', 'y', '–¥']:
                await reporter.generate_report()
        except (KeyboardInterrupt, EOFError):
            print("\n\n–í—ã—Ö–æ–¥...")


if __name__ == "__main__":
    asyncio.run(main())

