#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ T-Bank –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime, timedelta
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from src.data.enhanced_tbank_provider import EnhancedTBankProvider
from src.data.data_provider import DataProvider
from src.neural_networks.enhanced_features import EnhancedFeatureExtractor
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stdout, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')


async def test_enhanced_tbank_provider():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ T-Bank –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ T-Bank –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    token = os.environ.get('TINKOFF_TOKEN')
    if not token:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: set TINKOFF_TOKEN=your_token_here")
        return
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    test_symbols = ['SBER', 'GAZP', 'LKOH']
    
    try:
        # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ T-Bank –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ T-Bank –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        print("-" * 40)
        
        provider = EnhancedTBankProvider(token, sandbox=True, symbols=test_symbols)
        await provider.initialize()
        
        print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(provider.instruments_cache)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        sample_instruments = list(provider.instruments_cache.keys())[:5]
        print(f"üîç –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {', '.join(sample_instruments)}")
        
        # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("-" * 40)
        
        for symbol in test_symbols:
            print(f"\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = await provider.get_historical_data(symbol, period="1m", interval="1d")
            
            if not historical_data.empty:
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(historical_data)} –∑–∞–ø–∏—Å–µ–π")
                print(f"  üìÖ –ü–µ—Ä–∏–æ–¥: {historical_data.index[0]} - {historical_data.index[-1]}")
                print(f"  üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {historical_data['Close'].iloc[-1]:.2f} ‚ÇΩ")
            else:
                print(f"  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("-" * 40)
        
        realtime_data = await provider.get_realtime_data(test_symbols)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(realtime_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        for symbol, data in realtime_data.items():
            print(f"  {symbol}: {data['price']:.2f} ‚ÇΩ ({data['timestamp']})")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫")
        print("-" * 40)
        
        for symbol in test_symbols[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞
            print(f"\nüìä –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –¥–ª—è {symbol}:")
            
            orderbook = await provider.get_orderbook(symbol, depth=5)
            
            if orderbook:
                print(f"  ‚úÖ –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞–∫–∞–Ω –≥–ª—É–±–∏–Ω–æ–π {orderbook.get('depth', 0)}")
                print(f"  üí∞ –°–ø—Ä–µ–¥: {orderbook.get('spread', 0):.2f} ‚ÇΩ ({orderbook.get('spread_percent', 0):.2f}%)")
                print(f"  üìà –õ—É—á—à–∏–π bid: {orderbook.get('bids', [{}])[0].get('price', 0):.2f} ‚ÇΩ")
                print(f"  üìâ –õ—É—á—à–∏–π ask: {orderbook.get('asks', [{}])[0].get('price', 0):.2f} ‚ÇΩ")
                print(f"  üìä –û–±—ä–µ–º bid: {orderbook.get('total_bid_volume', 0)}")
                print(f"  üìä –û–±—ä–µ–º ask: {orderbook.get('total_ask_volume', 0)}")
                print(f"  ‚öñÔ∏è –î–∏—Å–±–∞–ª–∞–Ω—Å: {orderbook.get('volume_imbalance', 0)}")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –¥–ª—è {symbol}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("-" * 40)
        
        enhanced_data = await provider.get_enhanced_market_data(test_symbols[:2])
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(enhanced_data)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        for symbol, data in enhanced_data.items():
            print(f"\nüìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}:")
            print(f"  üí∞ –¶–µ–Ω–∞: {data['price']:.2f} ‚ÇΩ")
            print(f"  üìà –°–ø—Ä–µ–¥: {data['metrics']['spread']:.2f} ‚ÇΩ")
            print(f"  üìä –î–∏—Å–±–∞–ª–∞–Ω—Å –æ–±—ä–µ–º–∞: {data['metrics']['volume_imbalance']}")
            print(f"  üè¢ –¢–∏–ø: {data['instrument']['type']}")
            print(f"  üí± –í–∞–ª—é—Ç–∞: {data['instrument']['currency']}")
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print("-" * 40)
        
        extractor = EnhancedFeatureExtractor()
        
        for symbol in test_symbols[:1]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
            print(f"\nüß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}:")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            historical_data = await provider.get_historical_data(symbol, period="1m", interval="1d")
            
            if not historical_data.empty:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
                orderbook_data = await provider.get_orderbook(symbol, depth=5)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
                instrument_info = provider.instruments_cache.get(symbol, {})
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                features = extractor.extract_all_features(
                    historical_data, 
                    orderbook_data, 
                    instrument_info
                )
                
                print(f"  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(features.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                categories = extractor.get_feature_importance_categories()
                for category, feature_list in categories.items():
                    available_features = [f for f in feature_list if f in features.columns]
                    if available_features:
                        print(f"  üìä {category}: {len(available_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                print(f"  üîç –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                sample_features = list(features.columns)[:10]
                for feature in sample_features:
                    if feature in features.columns:
                        value = features[feature].iloc[-1] if not features[feature].empty else 0
                        print(f"    {feature}: {value:.4f}")
            else:
                print(f"  ‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ T-Bank –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:")
        print("  ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏")
        print("  ‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("  ‚Ä¢ –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
        print("  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("  ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 50+ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def test_data_provider_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è T-Bank –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    config = {
        'provider': 'tbank',
        'symbols': ['SBER', 'GAZP'],
        'tbank_token': os.environ.get('TINKOFF_TOKEN'),
        'tbank_sandbox': True,
        'update_interval': 60,
        'history_days': 30
    }
    
    if not config['tbank_token']:
        print("‚ùå TINKOFF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        data_provider = DataProvider(config)
        await data_provider.initialize()
        
        print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        provider_info = data_provider.get_provider_info()
        print(f"üìä –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_info['provider_type']}")
        print(f"üìà –°–∏–º–≤–æ–ª–æ–≤: {provider_info['symbols_count']}")
        print(f"üíæ –†—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {provider_info['market_data_count']}")
        print(f"‚ö° –î–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {provider_info['realtime_data_count']}")
        print(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {provider_info['enhanced_data_count']}")
        print(f"üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞: {provider_info['supports_orderbook']}")
        print(f"üöÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {provider_info['supports_enhanced_data']}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        
        for symbol in ['SBER']:
            features = await data_provider.get_enhanced_features(symbol)
            
            if not features.empty:
                print(f"  ‚úÖ {symbol}: {len(features.columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                sample_features = list(features.columns)[:5]
                for feature in sample_features:
                    if feature in features.columns:
                        value = features[feature].iloc[-1] if not features[feature].empty else 0
                        print(f"    {feature}: {value:.4f}")
            else:
                print(f"  ‚ùå –ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û T-BANK –ü–†–û–í–ê–ô–î–ï–†–ê")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("‚Ä¢ –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ (order book)")
    print("‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("‚Ä¢ –ú–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    print("‚Ä¢ 50+ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    print("‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = os.environ.get('TINKOFF_TOKEN')
    if not token:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω: https://www.tbank.ru/invest/settings/api/")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: set TINKOFF_TOKEN=your_token_here")
        print("3. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: TINKOFF_TOKEN=your_token_here")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    await test_enhanced_tbank_provider()
    await test_data_provider_integration()
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ T-Bank API")


if __name__ == "__main__":
    asyncio.run(main())
