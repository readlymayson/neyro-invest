"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –≤ T-Bank sandbox
"""

import asyncio
import os
import sys
import json
from datetime import datetime

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

from loguru import logger

try:
    from tinkoff.invest import AsyncClient
    from tinkoff.invest.constants import INVEST_GRPC_API_SANDBOX
    TINKOFF_AVAILABLE = True
except ImportError:
    TINKOFF_AVAILABLE = False
    logger.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ tinkoff-investments –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def check_available_tickers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤ –≤ sandbox"""
    
    if not TINKOFF_AVAILABLE:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ tinkoff-investments –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tinkoff-investments")
        return
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
    token = os.environ.get('TINKOFF_TOKEN')
    
    if not token:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
        env_file = '.env'
        if os.path.exists(env_file):
            try:
                with open(env_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.strip() and not line.startswith('#'):
                            if '=' in line:
                                key, value = line.strip().split('=', 1)
                                if key.strip() == 'TINKOFF_TOKEN':
                                    token = value.strip().strip('"').strip("'")
                                    break
            except Exception as e:
                pass
    
    if not token:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print()
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   TINKOFF_TOKEN=your_token_here")
        print()
        print("2. –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   set TINKOFF_TOKEN=your_token_here")
        print()
        print("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: https://www.tbank.ru/invest/settings/api/")
        return
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ T-Bank sandbox...")
    print()
    
    try:
        async with AsyncClient(token, target=INVEST_GRPC_API_SANDBOX) as client:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ü–∏–π
            response = await client.instruments.shares()
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            available_tickers = []
            russian_tickers = []
            us_tickers = []
            
            for share in response.instruments:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ sandbox
                if (share.api_trade_available_flag and 
                    share.trading_status.name == 'SECURITY_TRADING_STATUS_NORMAL_TRADING'):
                    
                    ticker_info = {
                        'ticker': share.ticker,
                        'name': share.name,
                        'currency': share.currency,
                        'country': share.country_of_risk_name,
                        'exchange': share.exchange
                    }
                    available_tickers.append(ticker_info)
                    
                    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
                    if share.currency == 'rub':
                        russian_tickers.append(ticker_info)
                    elif share.currency == 'usd':
                        us_tickers.append(ticker_info)
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print(f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(available_tickers)}")
            print(f"   ‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ (RUB): {len(russian_tickers)}")
            print(f"   ‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ (USD): {len(us_tickers)}")
            print()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
            print("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤:")
            popular_russian = ['SBER', 'GAZP', 'LKOH', 'NVTK', 'ROSN', 'GMKN', 'YNDX', 'MGNT', 'TATN', 'SNGS']
            russian_ticker_set = {t['ticker'] for t in russian_tickers}
            
            for ticker in popular_russian:
                status = "‚úÖ" if ticker in russian_ticker_set else "‚ùå"
                print(f"   {status} {ticker}")
            print()
            
            # –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
            if russian_tickers:
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–∏–∫–µ—Ä—ã ({len(russian_tickers)}):")
                for info in russian_tickers[:20]:  # –ü–µ—Ä–≤—ã–µ 20
                    print(f"   ‚Ä¢ {info['ticker']:6s} - {info['name'][:50]}")
                if len(russian_tickers) > 20:
                    print(f"   ... –∏ –µ—â–µ {len(russian_tickers) - 20}")
                print()
            
            # –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤
            if us_tickers:
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ —Ç–∏–∫–µ—Ä—ã ({len(us_tickers)}) - –ø—Ä–∏–º–µ—Ä—ã:")
                for info in us_tickers[:20]:  # –ü–µ—Ä–≤—ã–µ 20
                    print(f"   ‚Ä¢ {info['ticker']:6s} - {info['name'][:50]}")
                if len(us_tickers) > 20:
                    print(f"   ... –∏ –µ—â–µ {len(us_tickers) - 20}")
                print()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            output_file = f"tbank_tickers_{timestamp}.json"
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_data = {
                "timestamp": timestamp,
                "total_count": len(available_tickers),
                "russian_count": len(russian_tickers),
                "us_count": len(us_tickers),
                "russian_tickers": russian_tickers,
                "us_tickers": us_tickers,
                "all_tickers": available_tickers
            }
            
            try:
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(output_data, f, ensure_ascii=False, indent=2)
                
                print(f"üíæ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(available_tickers)}")
                print(f"   ‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ: {len(russian_tickers)}")
                print(f"   ‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ: {len(us_tickers)}")
                print()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
            if russian_tickers:
                print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ")
                print("   –û–±–Ω–æ–≤–∏—Ç–µ config/test_config.yaml —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ")
            elif us_tickers:
                print("   –í sandbox –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∞–∫—Ü–∏–∏ (USD)")
                print("   –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                print("   symbols:")
                for ticker in us_tickers[:5]:
                    print(f"     - {ticker['ticker']}  # {ticker['name'][:40]}")
            else:
                print("   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ sandbox")
                print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å production API")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    asyncio.run(check_available_tickers())

