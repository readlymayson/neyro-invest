"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
–ß–∏—Ç–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ data/portfolio.json –∏ data/signals.json
"""

import json
import sys
from pathlib import Path
from datetime import datetime

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')


def format_time_ago(timestamp_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ 'X –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥'"""
    try:
        timestamp = datetime.fromisoformat(timestamp_str)
        delta = datetime.now() - timestamp
        
        if delta.total_seconds() < 60:
            return f"{int(delta.total_seconds())} —Å–µ–∫ –Ω–∞–∑–∞–¥"
        elif delta.total_seconds() < 3600:
            return f"{int(delta.total_seconds() / 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
        elif delta.total_seconds() < 86400:
            return f"{int(delta.total_seconds() / 3600)} —á –Ω–∞–∑–∞–¥"
        else:
            return f"{int(delta.total_seconds() / 86400)} –¥–Ω –Ω–∞–∑–∞–¥"
    except:
        return timestamp_str


def check_system_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("=" * 80)
    print("üìä –°–¢–ê–¢–£–° –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    portfolio_file = Path("data/portfolio.json")
    if portfolio_file.exists():
        try:
            with open(portfolio_file, 'r', encoding='utf-8') as f:
                portfolio = json.load(f)
            
            print("1Ô∏è‚É£  –ü–û–†–¢–§–ï–õ–¨")
            print("-" * 80)
            
            total_value = portfolio.get('total_value', 0)
            cash = portfolio.get('cash_balance', 0)
            timestamp = portfolio.get('timestamp', 'unknown')
            
            print(f"  üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:  {total_value:>15,.2f} ‚ÇΩ")
            print(f"  üíµ –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {cash:>15,.2f} ‚ÇΩ")
            print(f"  ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ:        {format_time_ago(timestamp)}")
            print()
            
            positions = portfolio.get('positions', {})
            if positions:
                print("  –ü–û–ó–ò–¶–ò–ò:")
                print(f"  {'–¢–∏–∫–µ—Ä':<8} {'–ö–æ–ª-–≤–æ':<10} {'–¶–µ–Ω–∞':<12} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<15} {'P&L %':<10}")
                print("  " + "-" * 70)
                
                total_pnl = 0
                for symbol, pos in positions.items():
                    quantity = pos.get('quantity', 0)
                    price = pos.get('price', 0)
                    value = pos.get('value', 0)
                    pnl_percent = pos.get('pnl_percent', 0)
                    pnl = pos.get('pnl', 0)
                    total_pnl += pnl
                    
                    pnl_str = f"{pnl_percent:+.2f}%"
                    color = "üü¢" if pnl_percent >= 0 else "üî¥"
                    
                    print(f"  {symbol:<8} {quantity:<10.0f} {price:<12.2f} {value:<15,.2f} {color} {pnl_str:<10}")
                
                print("  " + "-" * 70)
                print(f"  {'–ò–¢–û–ì–û P&L:':<45} {total_pnl:>+15,.2f} ‚ÇΩ")
            else:
                print("  –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    else:
        print("‚ùå –§–∞–π–ª –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞?)")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signals_file = Path("data/signals.json")
    if signals_file.exists():
        try:
            with open(signals_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –°–∏–≥–Ω–∞–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º
            if isinstance(data, list):
                signals = data
                timestamp = 'unknown'
            else:
                signals = data.get('signals', [])
                timestamp = data.get('timestamp', 'unknown')
            
            print("2Ô∏è‚É£  –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´")
            print("-" * 80)
            print(f"  –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}")
            print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–æ: {format_time_ago(timestamp)}")
            print()
            
            if signals:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
                buy_signals = [s for s in signals if s.get('signal') == 'BUY']
                sell_signals = [s for s in signals if s.get('signal') == 'SELL']
                hold_signals = [s for s in signals if s.get('signal') == 'HOLD']
                
                print(f"  üü¢ BUY:  {len(buy_signals)}")
                print(f"  üî¥ SELL: {len(sell_signals)}")
                print(f"  ‚ö™ HOLD: {len(hold_signals)}")
                print()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ HOLD)
                active_signals = [s for s in signals if s.get('signal') != 'HOLD']
                if active_signals:
                    print("  –ê–ö–¢–ò–í–ù–´–ï –°–ò–ì–ù–ê–õ–´:")
                    print(f"  {'–¢–∏–∫–µ—Ä':<8} {'–°–∏–≥–Ω–∞–ª':<8} {'–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å':<15} {'–ò—Å—Ç–æ—á–Ω–∏–∫':<20}")
                    print("  " + "-" * 70)
                    
                    for sig in active_signals[:10]:  # –ü–µ—Ä–≤—ã–µ 10
                        symbol = sig.get('symbol', '?')
                        signal = sig.get('signal', '?')
                        confidence = sig.get('confidence', 0) * 100
                        source = sig.get('source', '?')
                        
                        icon = "üü¢" if signal == 'BUY' else "üî¥"
                        print(f"  {symbol:<8} {icon} {signal:<6} {confidence:>12.1f}% {source:<20}")
                    
                    if len(active_signals) > 10:
                        print(f"  ... –∏ –µ—â–µ {len(active_signals) - 10}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    log_file = Path("logs/investment_system.log")
    if log_file.exists():
        print("3Ô∏è‚É£  –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨")
        print("-" * 80)
        
        try:
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                lines = f.readlines()
                last_lines = lines[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫
                
                for line in last_lines:
                    # –£–±–∏—Ä–∞–µ–º ANSI –∫–æ–¥—ã
                    clean_line = line.strip()
                    if clean_line:
                        print(f"  {clean_line[:75]}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏: {e}")
    
    print()
    print("=" * 80)
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    if portfolio_file.exists() and signals_file.exists():
        print("‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢")
        print("   –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è, —Ç–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞")
    elif portfolio_file.exists():
        print("‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("   –ü–æ—Ä—Ç—Ñ–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ó–ê–ü–£–©–ï–ù–ê")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: run_web_gui.bat")
    
    print("=" * 80)


if __name__ == '__main__':
    check_system_status()

