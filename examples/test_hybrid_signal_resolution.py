"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import asyncio
import sys
import os
from pathlib import Path
import pandas as pd
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
sys.path.append(str(root_dir))

from src.trading.trading_engine import TradingEngine, TradingSignal
from src.utils.config_manager import ConfigManager
from loguru import logger

async def test_hybrid_signal_resolution():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")

    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = ConfigManager("config/main.yaml")
        config = config_manager.get_config()

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        trading_engine = TradingEngine(config['trading'])
        
        # 3. –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
        logger.info("üîç –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è SBER
        test_signals = [
            TradingSignal(symbol="SBER", signal="BUY", confidence=0.8, source="model1"),
            TradingSignal(symbol="SBER", signal="BUY", confidence=0.9, source="model2"),  # –î—É–±–ª–∏–∫–∞—Ç
            TradingSignal(symbol="SBER", signal="SELL", confidence=0.7, source="model3"),
            TradingSignal(symbol="SBER", signal="HOLD", confidence=0.6, source="model4"),
            
            TradingSignal(symbol="GAZP", signal="BUY", confidence=0.8, source="model1"),
            TradingSignal(symbol="GAZP", signal="BUY", confidence=0.7, source="model2"),  # –î—É–±–ª–∏–∫–∞—Ç
            TradingSignal(symbol="GAZP", signal="BUY", confidence=0.6, source="model3"),  # –î—É–±–ª–∏–∫–∞—Ç
            
            TradingSignal(symbol="LKOH", signal="SELL", confidence=0.9, source="model1"),
            TradingSignal(symbol="LKOH", signal="BUY", confidence=0.8, source="model2"),
        ]
        
        logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ({len(test_signals)}):")
        for i, signal in enumerate(test_signals, 1):
            logger.info(f"  {i}. {signal.symbol}: {signal.signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.3f}, –∏—Å—Ç–æ—á–Ω–∏–∫: {signal.source})")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...")
        
        resolved_signals = trading_engine.resolve_signals_hybrid(test_signals)
        
        logger.info(f"üìä –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã ({len(resolved_signals)}):")
        for i, signal in enumerate(resolved_signals, 1):
            logger.info(f"  {i}. {signal.symbol}: {signal.signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.3f}, –∏—Å—Ç–æ—á–Ω–∏–∫: {signal.source})")
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        sber_signals = [s for s in test_signals if s.symbol == "SBER"]
        sber_resolved = [s for s in resolved_signals if s.symbol == "SBER"]
        logger.info(f"  SBER: {len(sber_signals)} ‚Üí {len(sber_resolved)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        gazp_signals = [s for s in test_signals if s.symbol == "GAZP"]
        gazp_resolved = [s for s in resolved_signals if s.symbol == "GAZP"]
        logger.info(f"  GAZP: {len(gazp_signals)} ‚Üí {len(gazp_resolved)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        lkoh_signals = [s for s in test_signals if s.symbol == "LKOH"]
        lkoh_resolved = [s for s in resolved_signals if s.symbol == "LKOH"]
        logger.info(f"  LKOH: {len(lkoh_signals)} ‚Üí {len(lkoh_resolved)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # 6. –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å —Ä–∞–≤–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
        weight_test_signals = [
            TradingSignal(symbol="TEST", signal="BUY", confidence=0.8, source="model1"),
            TradingSignal(symbol="TEST", signal="SELL", confidence=0.8, source="model2"),
            TradingSignal(symbol="TEST", signal="HOLD", confidence=0.8, source="model3"),
        ]
        
        logger.info("üìä –¢–µ—Å—Ç –≤–µ—Å–æ–≤ (–≤—Å–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é 0.8):")
        for signal in weight_test_signals:
            weight = trading_engine.signal_weights.get(signal.signal, 1.0)
            weighted_score = weight * signal.confidence
            logger.info(f"  {signal.signal}: –≤–µ—Å {weight} * —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {signal.confidence} = {weighted_score:.3f}")
        
        weight_resolved = trading_engine.resolve_signals_hybrid(weight_test_signals)
        logger.info(f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {weight_resolved[0].signal} (–æ–∂–∏–¥–∞–µ—Ç—Å—è SELL –∏–∑-–∑–∞ –±–æ–ª—å—à–µ–≥–æ –≤–µ—Å–∞)")
        
        # 7. –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info("üîç –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
        
        try:
            await trading_engine.execute_trades(resolved_signals)
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã (–æ–∂–∏–¥–∞–µ–º–æ –±–µ–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è): {e}")
        
        # 8. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        logger.info("üìä –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
        logger.info("  ‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç - —É–±—Ä–∞–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–≥–Ω–∞–ª—ã")
        logger.info("  ‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã - –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å–∏–º–≤–æ–ª")
        logger.info("  ‚úÖ –í–µ—Å–∞ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è - SELL –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ —Ä–∞–≤–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        logger.info("  ‚úÖ –ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        logger.info("üéâ –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(test_hybrid_signal_resolution())
