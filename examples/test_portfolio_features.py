"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
"""

import asyncio
import sys
import os
from pathlib import Path
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
sys.path.append(str(root_dir))

from src.data.data_provider import DataProvider
from src.neural_networks.network_manager import NetworkManager
from src.portfolio.portfolio_manager import PortfolioManager
from src.neural_networks.portfolio_features import PortfolioFeatureExtractor
from src.utils.config_manager import ConfigManager
from loguru import logger


async def test_portfolio_features():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    """
    try:
        logger.info("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = ConfigManager("config/main.yaml")
        config = config_manager.get_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_manager = PortfolioManager(config['portfolio'])
        await portfolio_manager.initialize()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
        await create_test_portfolio_data(portfolio_manager)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        portfolio_extractor = PortfolioFeatureExtractor(config['neural_networks'].get('portfolio_features', {}))
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_features = portfolio_extractor.extract_portfolio_features(portfolio_manager)
        
        logger.info("‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã:")
        logger.info(f"  - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {portfolio_features.total_value:,.2f} ‚ÇΩ")
        logger.info(f"  - P&L: {portfolio_features.total_pnl:,.2f} ‚ÇΩ ({portfolio_features.total_pnl_percent:.2f}%)")
        logger.info(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: {portfolio_features.position_count}")
        logger.info(f"  - –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {portfolio_features.winning_positions}")
        logger.info(f"  - –£–±—ã—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {portfolio_features.losing_positions}")
        logger.info(f"  - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {portfolio_features.sharpe_ratio:.3f}")
        logger.info(f"  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {portfolio_features.max_drawdown:.2f}%")
        logger.info(f"  - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {portfolio_features.volatility:.2f}%")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ DataFrame
        logger.info("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ DataFrame")
        portfolio_df = portfolio_extractor.features_to_dataframe(portfolio_features)
        
        logger.info(f"‚úÖ DataFrame —Å–æ–∑–¥–∞–Ω: {portfolio_df.shape}")
        logger.info(f"  - –ö–æ–ª–æ–Ω–∫–∏: {list(portfolio_df.columns)}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª—É
        logger.info("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª—É")
        symbol_features = portfolio_extractor.extract_portfolio_features(portfolio_manager, "SBER")
        
        if symbol_features.symbol_features:
            logger.info("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –∏–∑–≤–ª–µ—á–µ–Ω—ã:")
            for symbol, features in symbol_features.symbol_features.items():
                logger.info(f"  {symbol}: {features}")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        data_provider = DataProvider(config['data'])
        await data_provider.initialize()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        market_data = await data_provider.get_latest_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        network_manager = NetworkManager(config['neural_networks'])
        await network_manager.initialize()
        
        # –ê–Ω–∞–ª–∏–∑ —Å –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        predictions = await network_manager.analyze(market_data, portfolio_manager)
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        logger.info(f"  - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(predictions.get('symbols_analyzed', []))}")
        logger.info(f"  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(predictions.get('models_used', []))}")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        ensemble_predictions = predictions.get('ensemble_predictions', {})
        for symbol, prediction in ensemble_predictions.items():
            logger.info(f"  {symbol}: {prediction.get('signal', 'N/A')} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.3f})")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise


async def create_test_portfolio_data(portfolio_manager):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
    """
    try:
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        from src.portfolio.portfolio_manager import Transaction, TransactionType
        from datetime import datetime, timedelta
        
        # –ü–æ–∫—É–ø–∫–∞ SBER
        transaction1 = Transaction(
            id="test_1",
            symbol="SBER",
            type=TransactionType.BUY,
            quantity=100,
            price=200.0,
            commission=10.0,
            timestamp=datetime.now() - timedelta(days=30),
            notes="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ SBER"
        )
        await portfolio_manager.add_transaction({
            'id': transaction1.id,
            'symbol': transaction1.symbol,
            'side': transaction1.type.value,
            'quantity': transaction1.quantity,
            'price': transaction1.price,
            'commission': transaction1.commission,
            'timestamp': transaction1.timestamp,
            'notes': transaction1.notes
        })
        
        # –ü–æ–∫—É–ø–∫–∞ GAZP
        transaction2 = Transaction(
            id="test_2",
            symbol="GAZP",
            type=TransactionType.BUY,
            quantity=50,
            price=150.0,
            commission=7.5,
            timestamp=datetime.now() - timedelta(days=20),
            notes="–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ GAZP"
        )
        await portfolio_manager.add_transaction({
            'id': transaction2.id,
            'symbol': transaction2.symbol,
            'side': transaction2.type.value,
            'quantity': transaction2.quantity,
            'price': transaction2.price,
            'commission': transaction2.commission,
            'timestamp': transaction2.timestamp,
            'notes': transaction2.notes
        })
        
        # –ü—Ä–æ–¥–∞–∂–∞ —á–∞—Å—Ç–∏ SBER
        transaction3 = Transaction(
            id="test_3",
            symbol="SBER",
            type=TransactionType.SELL,
            quantity=30,
            price=220.0,
            commission=6.6,
            timestamp=datetime.now() - timedelta(days=10),
            notes="–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ SBER"
        )
        await portfolio_manager.add_transaction({
            'id': transaction3.id,
            'symbol': transaction3.symbol,
            'side': transaction3.type.value,
            'quantity': transaction3.quantity,
            'price': transaction3.price,
            'commission': transaction3.commission,
            'timestamp': transaction3.timestamp,
            'notes': transaction3.notes
        })
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        await portfolio_manager.update_portfolio()
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–æ–∑–¥–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(test_portfolio_features())
