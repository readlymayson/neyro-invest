# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from src.data.news_data_provider import NewsDataProvider
from src.data.data_provider import DataProvider
from src.neural_networks.network_manager import NetworkManager
from src.core.investment_system import InvestmentSystem
from loguru import logger


async def test_news_provider():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    """
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    news_config = {
        'providers': [
            {
                'type': 'mock',
                'enabled': True
            }
        ],
        'cache_ttl': 300,
        'days_back': 14
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    news_provider = NewsDataProvider(news_config)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞
    symbol = 'SBER'
    news_summary = await news_provider.get_news_summary(symbol, days=14)
    
    logger.info(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è {symbol}:")
    logger.info(f"  –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_summary['total_news']}")
    logger.info(f"  –°—Ä–µ–¥–Ω—è—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news_summary['avg_sentiment']:.3f}")
    logger.info(f"  –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ç—Ä–µ–Ω–¥: {news_summary['recent_trend']}")
    logger.info(f"  –°–≤–æ–¥–∫–∞: {news_summary['news_summary']}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    symbols = ['SBER', 'GAZP', 'LKOH']
    all_news = await news_provider.get_all_symbols_news(symbols, days=14)
    
    logger.info(f"üìä –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤:")
    for sym, news in all_news.items():
        logger.info(f"  {sym}: {news['total_news']} –Ω–æ–≤–æ—Å—Ç–µ–π, —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news['avg_sentiment']:.3f}")


async def test_data_provider_with_news():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    """
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    data_config = {
        'provider': 'russian',
        'symbols': ['SBER', 'GAZP', 'LKOH'],
        'update_interval': 60,
        'history_days': 365,
        'news': {
            'enabled': True,
            'providers': [
                {
                    'type': 'mock',
                    'enabled': True
                }
            ],
            'cache_ttl': 300,
            'days_back': 14
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    data_provider = DataProvider(data_config)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await data_provider.initialize()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    latest_data = await data_provider.get_latest_data()
    
    logger.info(f"üìà –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
    logger.info(f"  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(latest_data['historical'])} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"  –î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: {len(latest_data['realtime'])} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"  –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(latest_data['news'])} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    if latest_data['news']:
        first_symbol = list(latest_data['news'].keys())[0]
        news_data = latest_data['news'][first_symbol]
        logger.info(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è {first_symbol}:")
        logger.info(f"  –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {news_data['total_news']}")
        logger.info(f"  –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news_data['avg_sentiment']:.3f}")
        logger.info(f"  –¢—Ä–µ–Ω–¥: {news_data['recent_trend']}")


async def test_neural_networks_with_news():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
    neural_config = {
        'models': [
            {
                'name': 'xgboost_enhanced',
                'type': 'xgboost',
                'enabled': True,
                'config': {
                    'n_estimators': 50,
                    'max_depth': 4,
                    'learning_rate': 0.1,
                    'random_state': 42
                }
            }
        ],
        'ensemble_method': 'weighted_average',
        'analysis_interval': 180
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
    network_manager = NetworkManager(neural_config)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await network_manager.initialize()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    import pandas as pd
    import numpy as np
    from datetime import datetime, timedelta
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    dates = pd.date_range(start=datetime.now() - timedelta(days=30), end=datetime.now(), freq='D')
    test_data = pd.DataFrame({
        'Open': np.random.uniform(100, 200, len(dates)),
        'High': np.random.uniform(100, 200, len(dates)),
        'Low': np.random.uniform(100, 200, len(dates)),
        'Close': np.random.uniform(100, 200, len(dates)),
        'Volume': np.random.uniform(1000, 10000, len(dates))
    }, index=dates)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_news_data = {
        'SBER': {
            'total_news': 5,
            'avg_sentiment': 0.3,
            'sentiment_confidence': 0.7,
            'positive_news': 3,
            'negative_news': 1,
            'neutral_news': 1,
            'recent_trend': 'positive',
            'news_summary': '–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–æ—Å—Ç–µ –ø—Ä–∏–±—ã–ª–∏'
        }
    }
    
    # –û–±—É—á–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    logger.info("üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    training_data = {'historical': {'SBER': test_data}}
    await network_manager.train_models(training_data, news_data=test_news_data)
    
    # –ê–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    analysis_data = {'historical': {'SBER': test_data.tail(10)}}
    results = await network_manager.analyze(analysis_data, news_data=test_news_data)
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
    if 'ensemble_predictions' in results:
        for symbol, prediction in results['ensemble_predictions'].items():
            logger.info(f"  {symbol}: {prediction.get('signal', 'N/A')} "
                       f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.3f})")
            if 'news_summary' in prediction:
                logger.info(f"    –ù–æ–≤–æ—Å—Ç–∏: {prediction['news_summary']['news_summary']}")


async def test_full_system():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    system = InvestmentSystem("config/main.yaml")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await system._initialize_components()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    latest_data = await system.data_provider.get_latest_data()
    
    logger.info(f"üìä –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:")
    logger.info(f"  –°–∏–º–≤–æ–ª–æ–≤: {len(system.data_provider.symbols)}")
    logger.info(f"  –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(latest_data['historical'])}")
    logger.info(f"  –ù–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(latest_data.get('news', {}))}")
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    news_data = latest_data.get('news', {})
    if news_data:
        logger.info("üéì –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        await system.network_manager.train_models(latest_data, news_data=news_data)
        
        # –ê–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        results = await system.network_manager.analyze(latest_data, system.portfolio_manager, news_data)
        
        logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        if 'ensemble_predictions' in results:
            for symbol, prediction in results['ensemble_predictions'].items():
                logger.info(f"  {symbol}: {prediction.get('signal', 'N/A')} "
                           f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.3f})")
                
                # –ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if 'news_summary' in prediction:
                    news_summary = prediction['news_summary']
                    logger.info(f"    üì∞ –ù–æ–≤–æ—Å—Ç–∏: {news_summary['total_news']} –Ω–æ–≤–æ—Å—Ç–µ–π, "
                               f"—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {news_summary['avg_sentiment']:.3f}")
    else:
        logger.warning("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –¢–µ—Å—Ç 1: –ù–æ–≤–æ—Å—Ç–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        await test_news_provider()
        logger.info("‚úÖ –¢–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
        await test_data_provider_with_news()
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –¢–µ—Å—Ç 3: –ù–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await test_neural_networks_with_news()
        logger.info("‚úÖ –¢–µ—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        await test_full_system()
        logger.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(sys.stdout, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())
