"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã T-Bank (Tinkoff Invest API)
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Å–æ—á–Ω–∏—Ü–µ–π
"""

import asyncio
import os
from dotenv import load_dotenv
from loguru import logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.data.tbank_data_provider import TBankDataProvider
from src.trading.tbank_broker import TBankBroker


async def test_data_provider():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ –ü–†–û–í–ê–ô–î–ï–†–ê –î–ê–ù–ù–´–• T-BANK")
    print("="*80)
    
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: TINKOFF_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider = TBankDataProvider(token=token, sandbox=True)
        print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await provider.initialize()
        print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {provider.get_status()}")
        
        # –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        print("\nüìä –ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ 'SBER'...")
        instruments = await provider.search_instrument('SBER')
        if instruments:
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(instruments)}")
            for inst in instruments[:3]:
                print(f"   - {inst['ticker']}: {inst['name']} ({inst['figi']})")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        print("\nüí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã SBER...")
        price = await provider.get_current_price('SBER')
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:.2f} ‚ÇΩ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)...")
        data = await provider.get_historical_data('SBER', period='1mo', interval='day')
        if not data.empty:
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(data)}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞:")
            last = data.iloc[-1]
            print(f"     Open: {last['Open']:.2f} ‚ÇΩ")
            print(f"     High: {last['High']:.2f} ‚ÇΩ")
            print(f"     Low:  {last['Low']:.2f} ‚ÇΩ")
            print(f"     Close: {last['Close']:.2f} ‚ÇΩ")
            print(f"     Volume: {int(last['Volume']):,}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫
        print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫...")
        orderbook = await provider.get_orderbook('SBER', depth=5)
        if orderbook:
            print("   BID (–ø–æ–∫—É–ø–∫–∞):")
            for bid in orderbook['bids'][:5]:
                print(f"     {bid['price']:.2f} ‚ÇΩ x {bid['quantity']}")
            print("   ASK (–ø—Ä–æ–¥–∞–∂–∞):")
            for ask in orderbook['asks'][:5]:
                print(f"     {ask['price']:.2f} ‚ÇΩ x {ask['quantity']}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        logger.exception(e)


async def test_broker():
    """–¢–µ—Å—Ç –±—Ä–æ–∫–µ—Ä–∞"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ –ë–†–û–ö–ï–†–ê T-BANK SANDBOX")
    print("="*80)
    
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–∞
        broker = TBankBroker(token=token, sandbox=True)
        print("‚úÖ –ë—Ä–æ–∫–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await broker.initialize()
        status = broker.get_status()
        print(f"‚úÖ –ë—Ä–æ–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"   –†–µ–∂–∏–º: {status['mode']}")
        print(f"   Account ID: {status['account_id']}")
        print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {status['instruments_loaded']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        print("\nüíº –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        portfolio = await broker.get_portfolio()
        print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {portfolio['total_amount']:.2f} ‚ÇΩ")
        print(f"   –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {portfolio['expected_yield']:.2f} ‚ÇΩ")
        print(f"   –ü–æ–∑–∏—Ü–∏–π: {len(portfolio['positions'])}")
        
        if portfolio['positions']:
            print("\n   –¢–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:")
            for pos in portfolio['positions'][:5]:
                print(f"     {pos['ticker']}: {pos['quantity']} —à—Ç @ {pos['average_price']:.2f} ‚ÇΩ")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
        
        # print("\nüìù –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É 1 –ª–æ—Ç–∞ SBER...")
        # order = await broker.place_order(
        #     ticker='SBER',
        #     quantity=1,
        #     direction='buy',
        #     order_type='market'
        # )
        # if order:
        #     print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω:")
        #     print(f"   Order ID: {order['order_id']}")
        #     print(f"   Ticker: {order['ticker']}")
        #     print(f"   Direction: {order['direction']}")
        #     print(f"   Quantity: {order['quantity']}")
        #     print(f"   Status: {order['status']}")
        #     
        #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞
        #     await asyncio.sleep(2)  # –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        #     state = await broker.get_order_state(order['order_id'])
        #     if state:
        #         print(f"\n   –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞:")
        #         print(f"     Execution status: {state['execution_status']}")
        #         print(f"     Lots executed: {state['lots_executed']}")
        #         print(f"     Executed price: {state['executed_price']:.2f} ‚ÇΩ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
        from datetime import datetime, timedelta
        operations = await broker.get_operations(
            from_date=datetime.now() - timedelta(days=30),
            to_date=datetime.now()
        )
        print(f"   –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {len(operations)}")
        
        if operations:
            print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
            for op in operations[-5:]:
                print(f"     {op['date']}: {op['type']} - {op['payment']:.2f} ‚ÇΩ")
        
        print("\n‚úÖ –¢–µ—Å—Ç –±—Ä–æ–∫–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞ (–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        # print("\nüóëÔ∏è  –ó–∞–∫—Ä—ã—Ç–∏–µ sandbox —Å—á–µ—Ç–∞...")
        # await broker.close_sandbox_account()
        # print("‚úÖ –°—á–µ—Ç –∑–∞–∫—Ä—ã—Ç")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±—Ä–æ–∫–µ—Ä–∞: {e}")
        logger.exception(e)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n")
    print("‚ïî" + "="*78 + "‚ïó")
    print("‚ïë" + " "*20 + "T-BANK SANDBOX TEST" + " "*39 + "‚ïë")
    print("‚ïë" + " "*15 + "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã T-Bank API" + " "*30 + "‚ïë")
    print("‚ïö" + "="*78 + "‚ïù")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = os.getenv('TINKOFF_TOKEN')
    if not token:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.tbank.ru/invest/settings/api/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª .env:")
        print("   TINKOFF_TOKEN=t.–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/TBANK_SANDBOX_SETUP.md")
        return
    
    print(f"\n‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...{token[-5:]}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        await test_data_provider()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç 2: –ë—Ä–æ–∫–µ—Ä
        await test_broker()
        
        print("\n" + "="*80)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*80)
        print("\nüìñ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º. docs/TBANK_SANDBOX_SETUP.md")
        print()
        
    except Exception as e:
        print("\n" + "="*80)
        print("‚ùå –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò")
        print("="*80)
        print(f"\n–û—à–∏–±–∫–∞: {e}")
        logger.exception(e)
        print("\nüìñ –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: docs/TBANK_SANDBOX_SETUP.md")
        print()


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        sys.stderr,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        level="WARNING"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())


