"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.
"""

import asyncio
import sys
import os
from pathlib import Path
import pandas as pd
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
sys.path.append(str(root_dir))

from src.trading.trading_engine import TradingEngine, TradingSignal
from src.portfolio.portfolio_manager import PortfolioManager, Position, Transaction, TransactionType
from src.data.data_provider import DataProvider
from src.utils.config_manager import ConfigManager
from loguru import logger

async def test_trading_logic():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ª–æ–≥–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")

    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = ConfigManager("config/main.yaml")
        config = config_manager.get_config()

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        data_provider = DataProvider(config['data'])
        await data_provider.initialize()
        
        portfolio_manager = PortfolioManager(config['portfolio'])
        await portfolio_manager.initialize()
        
        trading_engine = TradingEngine(config['trading'])
        trading_engine.set_components(data_provider, portfolio_manager)
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é SBER
        sber_transaction = Transaction(
            id="sber_txn", 
            symbol="SBER", 
            type=TransactionType.BUY, 
            quantity=100, 
            price=200.0, 
            commission=0.0, 
            timestamp=datetime.now() - timedelta(days=1)
        )
        portfolio_manager.transactions.append(sber_transaction)
        portfolio_manager.cash_balance = 1_000_000 - (100 * 200.0)
        await portfolio_manager.update_portfolio()
        
        logger.info(f"–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ–∑–¥–∞–Ω:")
        logger.info(f"  - –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {portfolio_manager.cash_balance:.2f} ‚ÇΩ")
        logger.info(f"  - –ü–æ–∑–∏—Ü–∏–π: {len(portfolio_manager.positions)}")
        
        if portfolio_manager.positions:
            for symbol, pos in portfolio_manager.positions.items():
                logger.info(f"  - {symbol}: {pos.quantity} —à—Ç –ø–æ {pos.average_price:.2f} ‚ÇΩ")
        
        # 4. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üîç –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        test_signals = [
            TradingSignal(symbol="SBER", signal="BUY", confidence=0.8, source="test"),
            TradingSignal(symbol="SBER", signal="SELL", confidence=0.7, source="test"),
            TradingSignal(symbol="GAZP", signal="BUY", confidence=0.9, source="test"),
            TradingSignal(symbol="GAZP", signal="SELL", confidence=0.6, source="test"),
            TradingSignal(symbol="LKOH", signal="BUY", confidence=0.8, source="test"),
            TradingSignal(symbol="LKOH", signal="SELL", confidence=0.5, source="test"),
        ]
        
        for i, signal in enumerate(test_signals, 1):
            logger.info(f"\nüìä –¢–µ—Å—Ç {i}: {signal.signal} –¥–ª—è {signal.symbol}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–∂–∏
            if signal.signal == 'SELL':
                can_sell = await trading_engine._can_sell(signal.symbol)
                logger.info(f"  - –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å: {can_sell}")
                
                if not can_sell:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—ã
                    positions = portfolio_manager.positions
                    if signal.symbol not in positions:
                        logger.info(f"  - –ü—Ä–∏—á–∏–Ω–∞: –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {signal.symbol}")
                    else:
                        pos = positions[signal.symbol]
                        logger.info(f"  - –ü—Ä–∏—á–∏–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–∏ {pos.quantity} <= 0")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_size = await trading_engine._calculate_position_size(signal)
            logger.info(f"  - –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size}")
            
            if position_size <= 0:
                logger.info(f"  - –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ = 0")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                if signal.signal == 'BUY':
                    portfolio_value = await portfolio_manager.get_portfolio_value()
                    logger.info(f"  - –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio_value:.2f} ‚ÇΩ")
                    logger.info(f"  - –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {portfolio_manager.cash_balance:.2f} ‚ÇΩ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                    if trading_engine.position_size_check:
                        current_invested = sum(pos.market_value for pos in portfolio_manager.positions.values())
                        max_allowed = portfolio_value * trading_engine.max_total_exposure
                        logger.info(f"  - –¢–µ–∫—É—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {current_invested:.2f} ‚ÇΩ")
                        logger.info(f"  - –ú–∞–∫—Å–∏–º—É–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: {max_allowed:.2f} ‚ÇΩ")
                        logger.info(f"  - –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: {current_invested >= max_allowed}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
            try:
                await trading_engine._execute_signal(signal)
                logger.info(f"  - ‚úÖ –°–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            except Exception as e:
                logger.warning(f"  - ‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}")
        
        # 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\nüìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        logger.info("  - BUY —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è SBER: –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (–µ—Å—Ç—å –¥–µ–Ω—å–≥–∏)")
        logger.info("  - SELL —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è SBER: –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (–µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è)")
        logger.info("  - BUY —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è GAZP/LKOH: –º–æ–≥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (–µ—Å—Ç—å –¥–µ–Ω—å–≥–∏)")
        logger.info("  - SELL —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è GAZP/LKOH: –¥–æ–ª–∂–Ω—ã –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è (–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π)")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        logger.info("\n‚è∞ –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        immediate_signal = TradingSignal(symbol="SBER", signal="BUY", confidence=0.9, source="immediate")
        
        logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {trading_engine.min_trade_interval} —Å–µ–∫—É–Ω–¥")
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ –ø–æ SBER: {trading_engine.last_trade_time.get('SBER', '–ù–µ—Ç')}")
        
        try:
            await trading_engine._execute_signal(immediate_signal)
            logger.info("‚úÖ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        except Exception as e:
            logger.info(f"‚ö†Ô∏è –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e}")
        
        logger.info("üéâ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ª–æ–≥–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(test_trading_logic())
