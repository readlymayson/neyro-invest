#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
"""

import asyncio
import sys
import os
import argparse
from pathlib import Path
from datetime import datetime
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == "win32":
    import codecs
    import io
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent
sys.path.append(str(root_dir))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    env_path = root_dir / '.env'
    if env_path.exists():
        load_dotenv(env_path)
        print(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {env_path}")
    else:
        print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
except ImportError:
    print("python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

from src.core.investment_system import InvestmentSystem
from src.utils.config_selector import ConfigSelector
from src.utils.interactive_console import start_interactive_console


def setup_logging(config_path: str = "config/main.yaml"):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    """
    try:
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        session_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        session_dir = logs_dir / f"session_{session_timestamp}"
        session_dir.mkdir(exist_ok=True)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.remove()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        logger.add(
            sys.stdout,
            level="INFO",
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
            colorize=True
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏
        logger.add(
            session_dir / "investment_system.log",
            level="DEBUG",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
            encoding="utf-8"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        logger.add(
            session_dir / "trading.log",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            filter=lambda record: "trading" in record["name"].lower(),
            encoding="utf-8"
        )
        
        logger.add(
            session_dir / "neural_networks.log",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            filter=lambda record: "neural" in record["name"].lower(),
            encoding="utf-8"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.add(
            session_dir / "gui_application.log",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            filter=lambda record: "gui" in record["name"].lower() or "web" in record["name"].lower(),
            encoding="utf-8"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        logger.add(
            session_dir / "backtesting.log",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            filter=lambda record: "backtest" in record["name"].lower(),
            encoding="utf-8"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ –¥–ª—è –≤–µ–±-–∑–∞–ø—É—Å–∫–∞
        logger.add(
            session_dir / "web_launcher.log",
            level="INFO",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",
            filter=lambda record: "web_launcher" in record["name"].lower(),
            encoding="utf-8"
        )
        
        logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_timestamp}")
        logger.info(f"–§–∞–π–ª—ã –ª–æ–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {session_dir}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def check_environment():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 8):
        logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = ["logs", "models", "data", "config"]
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = Path("config/main.yaml")
    if not config_path.exists():
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        logger.info("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: cp config/examples/beginners.yaml config/main.yaml")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    deepseek_key = os.getenv('DEEPSEEK_API_KEY')
    if not deepseek_key:
        logger.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á: set DEEPSEEK_API_KEY=your_key (Windows) –∏–ª–∏ export DEEPSEEK_API_KEY=your_key (Linux/Mac)")
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return True


async def run_training_mode(config_path: str):
    """
    –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        system = InvestmentSystem(config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await system._initialize_components()
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π...")
        historical_data = await system.data_provider.get_latest_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
        news_config = system.config.get('data', {}).get('news', {})
        include_news_in_training = news_config.get('include_news_in_training', False)
        
        if include_news_in_training:
            # –ü—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (training_news_days)
            news_data = historical_data.get('news_training', {}) or historical_data.get('news', {})
            if news_data:
                logger.info(f"–ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è {len(news_data)} —Å–∏–º–≤–æ–ª–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)")
            else:
                logger.warning("–ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π")
            await system.network_manager.train_models(historical_data, news_data=news_data)
        else:
            # –ü—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è - —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 1 –≥–æ–¥
            logger.info("–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ)")
            await system.network_manager.train_models(historical_data)
        
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        
        # –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–æ–≤
        news_data = historical_data.get('news', {})
        if news_data:
            logger.info(f"–ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑ –¥–ª—è {len(news_data)} —Å–∏–º–≤–æ–ª–æ–≤ (—Å–≤–æ–¥–∫–∏ –∑–∞ 2 –Ω–µ–¥–µ–ª–∏)")
        else:
            logger.info("–ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        test_results = await system.network_manager.analyze(historical_data, system.portfolio_manager, news_data=news_data)
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await system._export_signals_data()
        
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        ensemble_pred = test_results.get('ensemble_prediction', {})
        logger.info(f"–ê–Ω—Å–∞–º–±–ª–µ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {ensemble_pred}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        raise


async def run_interactive_mode(config_path: str):
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    """
    logger.info("üéÆ –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        system = InvestmentSystem(config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        await system.initialize_components()
        
        await start_interactive_console(
            system=system,
            portfolio=system.portfolio_manager
        )
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
        raise

async def run_auto_mode(config_path: str):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å–æ–ª—å—é
    """
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ—Ä–≥–æ–≤–ª–∏")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        system = InvestmentSystem(config_path)
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Ñ–æ–Ω–µ
        trading_task = asyncio.create_task(system.start_trading())
        
        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        console_task = asyncio.create_task(
            start_interactive_console(
                system=system,
                portfolio=system.portfolio_manager
            )
        )
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
        done, pending = await asyncio.wait(
            [trading_task, console_task],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        # –û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
        for task in pending:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await system.stop_trading()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ: {e}")
        await system.stop_trading()
        raise


async def run_backtest_mode(config_path: str, start_date: str, end_date: str):
    """
    –†–µ–∂–∏–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
    """
    logger.info("üìä –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")
    
    try:
        from examples.backtesting import BacktestEngine
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        backtest_engine = BacktestEngine(config_path)
        await backtest_engine.initialize()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
        from datetime import datetime
        start_dt = datetime.strptime(start_date, "%Y-%m-%d")
        end_dt = datetime.strptime(end_date, "%Y-%m-%d")
        
        # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        await backtest_engine.run_backtest(start_dt, end_dt, train_period_days=365)
        
        logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
        raise


def show_status():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    """
    try:
        from src.utils.config_manager import ConfigManager
        
        config_manager = ConfigManager("config/main.yaml")
        config = config_manager.get_config()
        
        print("\n" + "="*60)
        print("üìà –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ù–ï–ô–†–û–°–ï–¢–ï–í–´–• –ò–ù–í–ï–°–¢–ò–¶–ò–ô")
        print("="*60)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"üìä –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {', '.join(config['data']['symbols'])}")
        print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {config['data']['update_interval']} —Å–µ–∫")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {config['portfolio']['initial_capital']:,} —Ä—É–±")
        print(f"üìà –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {config['trading']['max_positions']}")
        print(f"üéØ –ü–æ—Ä–æ–≥ —Å–∏–≥–Ω–∞–ª–æ–≤: {config['trading']['signal_threshold']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
        models = config['neural_networks']['models']
        enabled_models = [m for m in models if m.get('enabled', True)]
        print(f"üß† –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(enabled_models)}")
        
        for model in enabled_models:
            print(f"  ‚Ä¢ {model['name']} ({model['type']}) - –≤–µ—Å {model['weight']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–∫–µ—Ä–µ
        broker = config['trading']['broker']
        print(f"üè¶ –ë—Ä–æ–∫–µ—Ä: {broker}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("\nüîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        deepseek_key = os.getenv('DEEPSEEK_API_KEY')
        print(f"  ‚Ä¢ DEEPSEEK_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if deepseek_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        tinkoff_token = os.getenv('TINKOFF_TOKEN')
        print(f"  ‚Ä¢ TINKOFF_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if tinkoff_token else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
        print("\nüìÅ –§–∞–π–ª—ã:")
        files_to_check = [
            "config/main.yaml",
            "logs/investment_system.log",
            "models/",
            "data/"
        ]
        
        for file_path in files_to_check:
            path = Path(file_path)
            status = "‚úÖ" if path.exists() else "‚ùå"
            print(f"  ‚Ä¢ {file_path}: {status}")
        
        print("="*60)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    parser = argparse.ArgumentParser(
        description="–°–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python run.py                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python run.py --mode auto        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –∫–æ–Ω—Å–æ–ª—å—é
  python run.py --select-config    # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  python run.py --mode train       # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
  python run.py --mode backtest --start 2023-01-01 --end 2023-12-31  # –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
  python run.py --status           # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
  python run.py --config config/aggressive_trading.yaml  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        """
    )
    
    parser.add_argument(
        '--mode',
        choices=['train', 'backtest', 'auto'],
        default=None,
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π)'
    )
    
    parser.add_argument(
        '--config',
        default='config/main.yaml',
        help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config/main.yaml)'
    )
    
    parser.add_argument(
        '--auto-account',
        action='store_true',
        help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è T-Bank)'
    )
    
    parser.add_argument(
        '--start',
        help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ (YYYY-MM-DD)'
    )
    
    parser.add_argument(
        '--end',
        help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ (YYYY-MM-DD)'
    )
    
    parser.add_argument(
        '--status',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã'
    )
    
    parser.add_argument(
        '--validate',
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é'
    )
    
    parser.add_argument(
        '--select-config',
        action='store_true',
        help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    )
    
    
    args = parser.parse_args()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.select_config:
        selector = ConfigSelector()
        selected_config = selector.select_config()
        if selected_config:
            args.config = selected_config
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é config/main.yaml –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            args.config = "config/main.yaml"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.config)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ T-Bank –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if "tbank" in args.config.lower():
        print("üè¶ T-Bank –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
        print("‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞")
        print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω–æ")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ T-Bank
        tbank_token = os.getenv('TINKOFF_TOKEN')
        if not tbank_token:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TINKOFF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: set TINKOFF_TOKEN=your_token_here")
            print("–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: TINKOFF_TOKEN=your_token_here")
            sys.exit(1)
        else:
            print(f"‚úÖ T-Bank —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {tbank_token[:10]}...")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    if args.status:
        show_status()
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.validate:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            from scripts.validate_config import validate_config
            is_valid = validate_config(args.config)
            if is_valid:
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                logger.error("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
                sys.exit(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    try:
        if args.mode == 'train':
            asyncio.run(run_training_mode(args.config))
        elif args.mode == 'backtest':
            if not args.start or not args.end:
                logger.error("–î–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --start –∏ --end")
                sys.exit(1)
            asyncio.run(run_backtest_mode(args.config, args.start, args.end))
        elif args.mode == 'auto':
            asyncio.run(run_auto_mode(args.config))
        else:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            asyncio.run(run_interactive_mode(args.config))
            
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
