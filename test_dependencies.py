#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–π—Ä–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
"""

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    print("-" * 40)
    
    dependencies = [
        ("numpy", "–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"),
        ("pandas", "–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"),
        ("sklearn", "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (scikit-learn)"),
        ("xgboost", "XGBoost –∞–ª–≥–æ—Ä–∏—Ç–º"),
        ("yfinance", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"),
        ("requests", "HTTP –∑–∞–ø—Ä–æ—Å—ã"),
        ("loguru", "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        ("matplotlib", "–ì—Ä–∞—Ñ–∏–∫–∏"),
        ("seaborn", "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏"),
        ("sqlalchemy", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("yaml", "YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("dotenv", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    ]
    
    results = []
    
    for module_name, description in dependencies:
        try:
            __import__(module_name)
            print(f"‚úì {module_name:<12} - {description}")
            results.append((module_name, True, ""))
        except ImportError as e:
            print(f"‚úó {module_name:<12} - {description}")
            print(f"  –û—à–∏–±–∫–∞: {e}")
            results.append((module_name, False, str(e)))
        except Exception as e:
            print(f"? {module_name:<12} - {description}")
            print(f"  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            results.append((module_name, False, str(e)))
    
    print("-" * 40)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(results)
    installed = sum(1 for _, success, _ in results if success)
    
    print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {installed}/{total}")
    
    if installed == total:
        print("üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        print("\n–ù–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        for module_name, success, error in results:
            if not success:
                print(f"  - {module_name}: {error}")
    
    return results

def test_xgboost_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å XGBoost"""
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ XGBoost...")
    print("-" * 40)
    
    try:
        import xgboost as xgb
        import numpy as np
        import pandas as pd
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        X = np.random.rand(100, 5)
        y = np.random.randint(0, 3, 100)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = xgb.XGBClassifier(n_estimators=10, random_state=42)
        model.fit(X, y)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        predictions = model.predict(X[:10])
        probabilities = model.predict_proba(X[:10])
        
        print("‚úì XGBoost –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–±—É—á–µ–Ω–∞")
        print(f"‚úì –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {predictions}")
        print(f"‚úì –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {probabilities[0]}")
        print("‚úì XGBoost —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è XGBoost: {e}")
        return False

def main():
    print("=" * 60)
    print("–¢–ï–°–¢ –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ü–†–û–ï–ö–¢–ê –ù–ï–ô–†–û-–ò–ù–í–ï–°–¢–ò–¶–ò–ô")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
    results = test_imports()
    
    # –¢–µ—Å—Ç XGBoost —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    if any(name == "xgboost" and success for name, success, _ in results):
        test_xgboost_functionality()
    
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 60)

if __name__ == "__main__":
    main()

