"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —Å–∏—Å—Ç–µ–º—ã
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ help –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import asyncio
import sys
from typing import Dict, List, Optional, Any, Callable
from datetime import datetime
from loguru import logger
from dataclasses import dataclass
from enum import Enum

class CommandType(Enum):
    """–¢–∏–ø—ã –∫–æ–º–∞–Ω–¥"""
    INFO = "info"           # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    TRADE = "trade"         # –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    ANALYSIS = "analysis"   # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    SYSTEM = "system"       # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    EMERGENCY = "emergency" # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

@dataclass
class Command:
    """–ö–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥—ã"""
    name: str
    description: str
    command_type: CommandType
    handler: Callable
    requires_system: bool = False
    requires_broker: bool = False
    requires_portfolio: bool = False

class CommandManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.commands: Dict[str, Command] = {}
        self.system = None
        self.portfolio = None
        self._register_commands()
    
    def set_system_components(self, system=None, portfolio=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.system = system
        self.portfolio = portfolio
        logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ CommandManager")
    
    def _register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self._register_command(
            "help", 
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
            CommandType.INFO,
            self._cmd_help
        )
        
        self._register_command(
            "portfolio", 
            "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ",
            CommandType.INFO,
            self._cmd_portfolio,
            requires_portfolio=True
        )
        
        self._register_command(
            "balance", 
            "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞",
            CommandType.INFO,
            self._cmd_balance,
            requires_broker=True
        )
        
        self._register_command(
            "positions", 
            "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏",
            CommandType.INFO,
            self._cmd_positions,
            requires_portfolio=True
        )
        
        self._register_command(
            "cooldowns", 
            "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∫—É–ª–¥–∞—É–Ω–∞–º",
            CommandType.INFO,
            self._cmd_cooldowns,
            requires_system=True
        )
        
        self._register_command(
            "status", 
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
            CommandType.INFO,
            self._cmd_status,
            requires_system=True
        )
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self._register_command(
            "analyze", 
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)",
            CommandType.TRADE,
            self._cmd_analyze,
            requires_system=True
        )
        
        self._register_command(
            "trade", 
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)",
            CommandType.TRADE,
            self._cmd_trade,
            requires_system=True
        )
        
        self._register_command(
            "sell_all", 
            "–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ",
            CommandType.EMERGENCY,
            self._cmd_sell_all,
            requires_system=True,
            requires_portfolio=True
        )
        
        self._register_command(
            "buy", 
            "–ö—É–ø–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (buy SYMBOL QUANTITY)",
            CommandType.TRADE,
            self._cmd_buy,
            requires_system=True,
            requires_portfolio=True
        )
        
        self._register_command(
            "sell", 
            "–ü—Ä–æ–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (sell SYMBOL QUANTITY)",
            CommandType.TRADE,
            self._cmd_sell,
            requires_system=True,
            requires_portfolio=True
        )
        
        # –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self._register_command(
            "signals", 
            "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
            CommandType.ANALYSIS,
            self._cmd_signals,
            requires_system=True
        )
        
        self._register_command(
            "models", 
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
            CommandType.ANALYSIS,
            self._cmd_models,
            requires_system=True
        )
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self._register_command(
            "restart", 
            "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É",
            CommandType.SYSTEM,
            self._cmd_restart,
            requires_system=True
        )
        
        self._register_command(
            "stop", 
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é",
            CommandType.SYSTEM,
            self._cmd_stop,
            requires_system=True
        )
        
        self._register_command(
            "start", 
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é",
            CommandType.SYSTEM,
            self._cmd_start,
            requires_system=True
        )
        
        logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.commands)} –∫–æ–º–∞–Ω–¥")
    
    def _register_command(self, name: str, description: str, command_type: CommandType, 
                         handler: Callable, requires_system: bool = False, 
                         requires_broker: bool = False, requires_portfolio: bool = False):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        self.commands[name] = Command(
            name=name,
            description=description,
            command_type=command_type,
            handler=handler,
            requires_system=requires_system,
            requires_broker=requires_broker,
            requires_portfolio=requires_portfolio
        )
    
    async def execute_command(self, command_line: str) -> bool:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            command_line: –°—Ç—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            parts = command_line.strip().split()
            if not parts:
                return False
            
            command_name = parts[0].lower()
            args = parts[1:] if len(parts) > 1 else []
            
            if command_name not in self.commands:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command_name}")
                await self._cmd_help()
                return False
            
            command = self.commands[command_name]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            if command.requires_system and not self.system:
                logger.error("–ö–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
                return False
            
            if command.requires_portfolio and not self.portfolio:
                logger.error("–ö–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                return False
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command_name}")
            result = await command.handler(args)
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{command_line}': {e}")
            return False
    
    async def _cmd_help(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        print("\n" + "="*60)
        print("üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´ –°–ò–°–¢–ï–ú–´ NEYRO-INVEST")
        print("="*60)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ —Ç–∏–ø–∞–º
        command_groups = {}
        for cmd in self.commands.values():
            if cmd.command_type.value not in command_groups:
                command_groups[cmd.command_type.value] = []
            command_groups[cmd.command_type.value].append(cmd)
        
        # –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group_name, commands in command_groups.items():
            print(f"\nüîπ {group_name.upper()} –ö–û–ú–ê–ù–î–´:")
            for cmd in commands:
                print(f"  {cmd.name:<15} - {cmd.description}")
        
        print("\n" + "="*60)
        print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print("üí° –ü—Ä–∏–º–µ—Ä—ã: help, portfolio, analyze, trade, sell_all")
        print("="*60)
        return True
    
    async def _cmd_portfolio(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        try:
            if not self.portfolio:
                logger.error("–ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            print("\n" + "="*60)
            print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–†–¢–§–ï–õ–ï")
            print("="*60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±—Ä–æ–∫–µ—Ä–∞
            if hasattr(self.system, 'trading_engine') and self.system.trading_engine:
                broker_type = self.system.trading_engine.broker_type
                
                if broker_type in ['tbank', 'tinkoff']:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PortfolioManager –∫–∞–∫ –µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                    print("üè¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ PortfolioManager...")
                    
                    try:
                        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å T-Bank (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
                        if hasattr(self.portfolio, 'tbank_broker') and self.portfolio.tbank_broker:
                            await self.portfolio.sync_with_tbank()
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                        metrics = await self.portfolio.get_portfolio_metrics()
                        if metrics:
                            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {metrics.total_value:,.2f} ‚ÇΩ")
                            print(f"üíµ –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {metrics.cash_balance:,.2f} ‚ÇΩ")
                            print(f"üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {metrics.invested_value:,.2f} ‚ÇΩ")
                            print(f"üìä –û–±—â–∏–π P&L: {metrics.total_pnl:+,.2f} ‚ÇΩ ({metrics.total_pnl_percent:+.2f}%)")
                            print(f"‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: {metrics.realized_pnl:+,.2f} ‚ÇΩ ({metrics.realized_pnl_percent:+.2f}%)")
                            print(f"‚è≥ –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: {metrics.unrealized_pnl:+,.2f} ‚ÇΩ ({metrics.unrealized_pnl_percent:+.2f}%)")
                            print(f"üìà –î–Ω–µ–≤–Ω–æ–π P&L: {metrics.daily_pnl:+,.2f} ‚ÇΩ ({metrics.daily_pnl_percent:+.2f}%)")
                        else:
                            print("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                            return False
                        
                        # –ü–æ–∑–∏—Ü–∏–∏
                        positions = await self.portfolio.get_positions()
                        if positions:
                            print(f"\nüìã –ü–û–ó–ò–¶–ò–ò ({len(positions)}):")
                            print(f"{'–¢–∏–∫–µ—Ä':<8} {'–ê–∫—Ü–∏–∏':<10} {'–õ–æ—Ç—ã':<8} {'–°—Ä.—Ü–µ–Ω–∞':<12} {'–¢–µ–∫.—Ü–µ–Ω–∞':<12} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<12} {'P&L %':>8}")
                            print("-" * 70)
                            for pos in positions:
                                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                                lot_size = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                if hasattr(self.system.trading_engine, 'tbank_broker') and self.system.trading_engine.tbank_broker:
                                    lot_size = self.system.trading_engine.tbank_broker.get_lot_size(pos.symbol)
                                
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
                                shares = abs(pos.quantity)
                                lots = shares / lot_size if lot_size > 0 else shares
                                
                                print(f"{pos.symbol:<8} {shares:<10.0f} {lots:<8.1f} {pos.average_price:<12.2f} "
                                      f"{pos.current_price:<12.2f} {pos.market_value:<12.2f} {pos.unrealized_pnl_percent:>+7.2f}%")
                        else:
                            print("\nüìã –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                        
                        # –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
                        if hasattr(self.portfolio, 'transactions') and self.portfolio.transactions:
                            print(f"\nüìú –ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò ({min(10, len(self.portfolio.transactions))}):")
                            print(f"{'–í—Ä–µ–º—è':<20} {'–¢–∏–ø':<8} {'–°–∏–º–≤–æ–ª':<8} {'–ö–æ–ª-–≤–æ':<10} {'–¶–µ–Ω–∞':<12} {'–°—É–º–º–∞':<15}")
                            print("-" * 80)
                            
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É) –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                            recent_transactions = sorted(self.portfolio.transactions, key=lambda x: x.timestamp, reverse=True)[:10]
                            
                            for txn in recent_transactions:
                                time_str = txn.timestamp.strftime("%Y-%m-%d %H:%M:%S")
                                txn_type = "–ü–û–ö–£–ü–ö–ê" if txn.type.value == "buy" else "–ü–†–û–î–ê–ñ–ê" if txn.type.value == "sell" else txn.type.value.upper()
                                total_amount = txn.quantity * txn.price
                                
                                print(f"{time_str:<20} {txn_type:<8} {txn.symbol:<8} {txn.quantity:<10.2f} "
                                      f"{txn.price:<12.2f} {total_amount:<15.2f}")
                        else:
                            print("\nüìú –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                        return False
                        
                else:
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è paper –±—Ä–æ–∫–µ—Ä–∞
                    print("üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    metrics = await self.portfolio.get_portfolio_metrics()
                    if metrics:
                        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {metrics.total_value:,.2f} ‚ÇΩ")
                        print(f"üíµ –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {metrics.cash_balance:,.2f} ‚ÇΩ")
                        print(f"üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {metrics.invested_value:,.2f} ‚ÇΩ")
                        print(f"üìä P&L: {metrics.total_pnl:+,.2f} ‚ÇΩ ({metrics.total_pnl_percent:+.2f}%)")
                        print(f"üìà –î–Ω–µ–≤–Ω–æ–π P&L: {metrics.daily_pnl:+,.2f} ‚ÇΩ ({metrics.daily_pnl_percent:+.2f}%)")
                    else:
                        print("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                        return False
                    
                    # –ü–æ–∑–∏—Ü–∏–∏
                    positions = await self.portfolio.get_positions()
                    if positions:
                        print(f"\nüìã –ü–û–ó–ò–¶–ò–ò ({len(positions)}):")
                        print(f"{'–¢–∏–∫–µ—Ä':<8} {'–ö–æ–ª-–≤–æ':<10} {'–¶–µ–Ω–∞':<12} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<12} {'P&L %':>8}")
                        print("-" * 60)
                        for pos in positions:
                            print(f"{pos.symbol:<8} {pos.quantity:<10.2f} "
                                  f"{pos.current_price:<12.2f} {pos.market_value:<12.2f} "
                                  f"{pos.unrealized_pnl_percent:>+7.2f}%")
                    else:
                        print("\nüìã –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                    
                    # –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    if hasattr(self.portfolio, 'transactions') and self.portfolio.transactions:
                        print(f"\nüìú –ü–û–°–õ–ï–î–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò ({min(10, len(self.portfolio.transactions))}):")
                        print(f"{'–í—Ä–µ–º—è':<20} {'–¢–∏–ø':<8} {'–°–∏–º–≤–æ–ª':<8} {'–ö–æ–ª-–≤–æ':<10} {'–¶–µ–Ω–∞':<12} {'–°—É–º–º–∞':<15}")
                        print("-" * 80)
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É) –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                        recent_transactions = sorted(self.portfolio.transactions, key=lambda x: x.timestamp, reverse=True)[:10]
                        
                        for txn in recent_transactions:
                            time_str = txn.timestamp.strftime("%Y-%m-%d %H:%M:%S")
                            txn_type = "–ü–û–ö–£–ü–ö–ê" if txn.type.value == "buy" else "–ü–†–û–î–ê–ñ–ê" if txn.type.value == "sell" else txn.type.value.upper()
                            total_amount = txn.quantity * txn.price
                            
                            print(f"{time_str:<20} {txn_type:<8} {txn.symbol:<8} {txn.quantity:<10.2f} "
                                  f"{txn.price:<12.2f} {total_amount:<15.2f}")
                    else:
                        print("\nüìú –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π")
                        
            else:
                print("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            print("="*60)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {e}")
            return False
    
    async def _cmd_balance(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞"""
        try:
            if not self.portfolio:
                logger.error("–ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            print("\n" + "="*50)
            print("üí∞ –ë–ê–õ–ê–ù–° –°–ß–ï–¢–ê")
            print("="*50)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å T-Bank (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
            if hasattr(self.portfolio, 'tbank_broker') and self.portfolio.tbank_broker:
                await self.portfolio.sync_with_tbank()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            metrics = await self.portfolio.get_portfolio_metrics()
            if metrics:
                print(f"RUB: {metrics.cash_balance:,.2f}")
                print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {metrics.total_value:,.2f} ‚ÇΩ")
                print(f"–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {metrics.invested_value:,.2f} ‚ÇΩ")
            else:
                print("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return False
            
            print("="*50)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False
    
    async def _cmd_positions(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.portfolio:
                logger.error("–ü–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            print("\n" + "="*60)
            print("üìã –¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò")
            print("="*60)
            
            positions = await self.portfolio.get_positions()
            if positions:
                print(f"{'–¢–∏–∫–µ—Ä':<8} {'–ê–∫—Ü–∏–∏':<10} {'–õ–æ—Ç—ã':<8} {'–°—Ä.—Ü–µ–Ω–∞':<12} {'–¢–µ–∫.—Ü–µ–Ω–∞':<12} {'–°—Ç–æ–∏–º–æ—Å—Ç—å':<12} {'P&L %':>8}")
                print("-" * 70)
                for pos in positions:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    lot_size = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if hasattr(self.system, 'trading_engine') and self.system.trading_engine:
                        if hasattr(self.system.trading_engine, 'tbank_broker') and self.system.trading_engine.tbank_broker:
                            lot_size = self.system.trading_engine.tbank_broker.get_lot_size(pos.symbol)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤
                    shares = abs(pos.quantity)
                    lots = shares / lot_size if lot_size > 0 else shares
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª–∏–Ω–Ω–∞—è/–∫–æ—Ä–æ—Ç–∫–∞—è)
                    position_type = "LONG" if pos.quantity > 0 else "SHORT" if pos.quantity < 0 else "ZERO"
                    
                    print(f"{pos.symbol:<8} {shares:<10.0f} {lots:<8.1f} {pos.average_price:<12.2f} "
                          f"{pos.current_price:<12.2f} {pos.market_value:<12.2f} {pos.unrealized_pnl_percent:>+7.2f}% ({position_type})")
            else:
                print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            
            print("="*60)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False
    
    async def _cmd_cooldowns(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∫—É–ª–¥–∞—É–Ω–∞–º"""
        try:
            if not self.system or not self.portfolio:
                logger.error("–°–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return False
            
            print("\n" + "="*60)
            print("üìä –û–¢–ß–ï–¢ –ü–û –ö–£–õ–î–ê–£–ù–ê–ú")
            print("="*60)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫—É–ª–¥–∞—É–Ω–∞–º
            cooldown_report = self.portfolio.get_cooldown_report(self.system.trading_engine)
            print(cooldown_report)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫—É–ª–¥–∞—É–Ω–∞–º: {e}")
            return False
    
    async def _cmd_status(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("\n" + "="*50)
            print("üîß –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
            print("="*50)
            
            print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üîÑ –°–∏—Å—Ç–µ–º–∞: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.system else '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}")
            print(f"üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å: {'–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' if self.portfolio else '–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –±—Ä–æ–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
            broker_type = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            if self.system and hasattr(self.system, 'trading_engine') and self.system.trading_engine:
                broker_type = self.system.trading_engine.broker_type
                if broker_type in ['tbank', 'tinkoff']:
                    broker_type = f"T-Bank ({'Sandbox' if hasattr(self.system.trading_engine, 'tbank_broker') and self.system.trading_engine.tbank_broker and self.system.trading_engine.tbank_broker.sandbox else 'Production'})"
                elif broker_type == 'paper':
                    broker_type = "Paper Trading"
            
            print(f"üè¶ –ë—Ä–æ–∫–µ—Ä: {broker_type}")
            
            if self.system:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
                neural_status = "–ù–µ –∞–∫—Ç–∏–≤–Ω—ã"
                if hasattr(self.system, 'network_manager') and self.system.network_manager:
                    models_count = len(self.system.network_manager.models)
                    if models_count > 0:
                        neural_status = f"–ê–∫—Ç–∏–≤–Ω—ã ({models_count} –º–æ–¥–µ–ª–µ–π)"
                
                print(f"ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏: {neural_status}")
                print(f"üìà –¢–æ—Ä–≥–æ–≤–ª—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if hasattr(self.system, 'trading_engine') else '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}")
                
                # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É–ª–¥–∞—É–Ω–∞—Ö
                if self.portfolio and hasattr(self.system, 'trading_engine') and self.system.trading_engine:
                    cooldown_status = self.portfolio.get_cooldown_status(self.system.trading_engine)
                    active_cooldowns = sum(1 for status in cooldown_status.values() if status.is_active)
                    total_symbols = len(cooldown_status)
                    
                    if total_symbols > 0:
                        print(f"‚è∞ –ö—É–ª–¥–∞—É–Ω—ã: {active_cooldowns}/{total_symbols} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                    else:
                        print("‚è∞ –ö—É–ª–¥–∞—É–Ω—ã: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            print("="*50)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    async def _cmd_analyze(self, args: List[str] = None) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        try:
            if not self.system:
                logger.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            print("\nüîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")
            
            # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
            if hasattr(self.system, 'network_manager') and self.system.network_manager:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                market_data = await self.system.data_provider.get_latest_data()
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ —Å —É—Å–ª–æ–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                use_portfolio = False
                try:
                    use_portfolio = self.system.config.get('neural_networks', {}).get('enable_portfolio_features', True)
                except Exception:
                    use_portfolio = True
                predictions = await self.system.network_manager.analyze(
                    market_data,
                    portfolio_manager=self.system.portfolio_manager if use_portfolio else None,
                    news_data=market_data.get('news', {})
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–≤–∏–∂–∫–µ, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å trading_signals
                if hasattr(self.system, 'trading_engine') and self.system.trading_engine:
                    await self.system.trading_engine.update_predictions(predictions)
                
                # –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                await self.system._export_signals_data()
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–æ {len(predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
                
                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
                if predictions and 'ensemble_predictions' in predictions:
                    ensemble_predictions = predictions['ensemble_predictions']
                    if ensemble_predictions:
                        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
                        print("-" * 50)
                        for symbol, prediction in ensemble_predictions.items():
                            if isinstance(prediction, dict):
                                signal = prediction.get('signal', 'HOLD')
                                confidence = prediction.get('confidence', 0)
                                trend = prediction.get('trend', 'unknown')
                                reasoning = prediction.get('reasoning', '')
                            else:
                                signal = 'HOLD'
                                confidence = 0.0
                                trend = 'unknown'
                                reasoning = ''
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å —ç–º–æ–¥–∑–∏
                            signal_emoji = "üü¢" if signal == "BUY" else "üî¥" if signal == "SELL" else "üü°"
                            trend_emoji = "üìà" if trend == "bullish" else "üìâ" if trend == "bearish" else "‚û°Ô∏è"
                            
                            print(f"{signal_emoji} {symbol}: {signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}) {trend_emoji} {trend}")
                            if reasoning:
                                print(f"   üí≠ {reasoning}")
                        print("-" * 50)
                        
                        # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        symbols_analyzed = predictions.get('symbols_analyzed', [])
                        models_used = predictions.get('models_used', [])
                        print(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols_analyzed)}")
                        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models_used)}")
                        print(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {predictions.get('analysis_time', 'N/A')}")
                    else:
                        print("‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                else:
                    print("‚ÑπÔ∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            else:
                print("‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
    
    async def _cmd_trade(self, args: List[str] = None) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            if not self.system:
                logger.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            print("\nüìà –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏...")
            
            # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
            if hasattr(self.system, 'trading_engine'):
                # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
                print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
                market_data = await self.system.data_provider.get_latest_data()
                
                print("ü§ñ –ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏...")
                predictions = await self.system.network_manager.analyze(market_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –¥–≤–∏–∂–∫–µ
                await self.system.trading_engine.update_predictions(predictions)
                
                # –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                await self.system._export_signals_data()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                signals = await self.system.trading_engine.get_trading_signals()
                
                if signals:
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(signals)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
                    
                    # –ü–æ–∫–∞–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
                    for signal in signals:
                        signal_emoji = "üü¢" if signal.signal == "BUY" else "üî¥" if signal.signal == "SELL" else "üü°"
                        print(f"  {signal_emoji} {signal.symbol}: {signal.signal} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    await self.system.trading_engine.execute_trades(signals)
                    print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                else:
                    print("‚ÑπÔ∏è –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                    print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                    print("   - –°–∏–≥–Ω–∞–ª—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
                    print("   - –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π")
                    print("   - –°–∏–≥–Ω–∞–ª—ã —É—Å—Ç–∞—Ä–µ–ª–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)")
                
                print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                print("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            return False
    
    async def _cmd_sell_all(self, args: List[str] = None) -> bool:
        """–ü—Ä–æ–¥–∞—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.system or not self.portfolio:
                logger.error("–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                return False
            
            print("\n‚ö†Ô∏è  –ü–†–û–î–ê–ñ–ê –í–°–ï–• –ü–û–ó–ò–¶–ò–ô")
            print("="*50)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å T-Bank (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
            if hasattr(self.portfolio, 'tbank_broker') and self.portfolio.tbank_broker:
                await self.portfolio.sync_with_tbank()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ PortfolioManager
            positions = await self.portfolio.get_positions()
            if not positions:
                print("üìã –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return True
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
            # –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            cash_balance = self.portfolio.cash_balance
            print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {cash_balance:,.2f} ‚ÇΩ")
            
            # –ü–æ–∫–∞–∑ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            print("\nüìã –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:")
            total_value = 0
            for position in positions:
                if position.quantity > 0:
                    print(f"  {position.symbol}: {position.quantity:.2f} —à—Ç √ó {position.current_price:.2f} ‚ÇΩ = {position.market_value:,.2f} ‚ÇΩ")
                    total_value += position.market_value
            
            print(f"\nüíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π: {total_value:,.2f} ‚ÇΩ")
            print(f"üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: {cash_balance + total_value:,.2f} ‚ÇΩ")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print("\n‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π (yes/no): ", end="")
            try:
                confirm = input().lower()
            except EOFError:
                print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ (–Ω–µ—Ç –≤–≤–æ–¥–∞)")
                return False
            
            if confirm != 'yes':
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return False
            
            # –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ TradingEngine
            sold_count = 0
            for position in positions:
                if position.quantity > 0:
                    try:
                        print(f"\nüîÑ –ü—Ä–æ–¥–∞–∂–∞ {position.symbol}: {position.quantity:.2f} —à—Ç...")
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ TradingEngine
                        if hasattr(self.system, 'trading_engine') and self.system.trading_engine:
                            # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏
                            from src.trading.trading_engine import Order, OrderSide, OrderType
                            
                            order = Order(
                                symbol=position.symbol,
                                side=OrderSide.SELL,
                                quantity=position.quantity,
                                order_type=OrderType.MARKET,
                                price=None
                            )
                            
                            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                            await self.system.trading_engine._submit_order(order)
                            print(f"‚úÖ {position.symbol} –ø—Ä–æ–¥–∞–Ω: {position.quantity:.2f} —à—Ç")
                            sold_count += 1
                        else:
                            print(f"‚ùå TradingEngine –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                            
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {position.symbol}: {e}")
            
            print(f"\nüìä –ü—Ä–æ–¥–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {sold_count}/{len(positions)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂
            if hasattr(self.portfolio, 'tbank_broker') and self.portfolio.tbank_broker:
                await self.portfolio.sync_with_tbank()
                print(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {self.portfolio.cash_balance:,.2f} ‚ÇΩ")
            
            print("="*50)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False
    
    async def _cmd_buy(self, args: List[str] = None) -> bool:
        """–ö—É–ø–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        if len(args) < 2:
            print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: buy SYMBOL QUANTITY")
            return False
        
        if not self.system or not self.portfolio:
            logger.error("–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False
        
        symbol = args[0].upper()
        try:
            quantity = float(args[1])
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return False
        
        print(f"üîÑ –ü–æ–∫—É–ø–∫–∞ {symbol}: {quantity} –ª–æ—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ TradingEngine
        if hasattr(self.system, 'trading_engine') and self.system.trading_engine:
            try:
                # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                from src.trading.trading_engine import Order, OrderSide, OrderType
                
                order = Order(
                    symbol=symbol,
                    side=OrderSide.BUY,
                    quantity=quantity,
                    order_type=OrderType.MARKET,
                    price=None
                )
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                await self.system.trading_engine._submit_order(order)
                print(f"‚úÖ {symbol} –∫—É–ø–ª–µ–Ω: {quantity} —à—Ç")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}: {e}")
                return False
        else:
            print("‚ùå TradingEngine –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    
    async def _cmd_sell(self, args: List[str] = None) -> bool:
        """–ü—Ä–æ–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        if len(args) < 2:
            print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: sell SYMBOL QUANTITY")
            return False
        
        if not self.system or not self.portfolio:
            logger.error("–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return False
        
        symbol = args[0].upper()
        try:
            quantity = float(args[1])
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return False
        
        print(f"üîÑ –ü—Ä–æ–¥–∞–∂–∞ {symbol}: {quantity} —à—Ç...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ TradingEngine
        if hasattr(self.system, 'trading_engine') and self.system.trading_engine:
            try:
                # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                from src.trading.trading_engine import Order, OrderSide, OrderType
                
                order = Order(
                    symbol=symbol,
                    side=OrderSide.SELL,
                    quantity=quantity,
                    order_type=OrderType.MARKET,
                    price=None
                )
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                await self.system.trading_engine._submit_order(order)
                print(f"‚úÖ {symbol} –ø—Ä–æ–¥–∞–Ω: {quantity} —à—Ç")
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {symbol}: {e}")
                return False
        else:
            print("‚ùå TradingEngine –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    
    async def _cmd_signals(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
        print("\nüìä –ü–û–°–õ–ï–î–ù–ò–ï –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´")
        print("="*50)
        print("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        return True
    
    async def _cmd_models(self, args: List[str] = None) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π"""
        print("\nü§ñ –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô –ù–ï–ô–†–û–°–ï–¢–ï–ô")
        print("="*50)
        print("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        return True
    
    async def _cmd_restart(self, args: List[str] = None) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
        print("\nüîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´")
        print("="*50)
        print("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        return True
    
    async def _cmd_stop(self, args: List[str] = None) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        print("\n‚èπÔ∏è  –û–°–¢–ê–ù–û–í–ö–ê –¢–û–†–ì–û–í–õ–ò")
        print("="*50)
        print("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        return True
    
    async def _cmd_start(self, args: List[str] = None) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        print("\n‚ñ∂Ô∏è  –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–õ–ò")
        print("="*50)
        print("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        return True
    
    def get_available_commands(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return list(self.commands.keys())
    
    def get_commands_by_type(self, command_type: CommandType) -> List[Command]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–∏–ø—É"""
        return [cmd for cmd in self.commands.values() if cmd.command_type == command_type]
