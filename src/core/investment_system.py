"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
"""

from typing import Dict, List, Optional
from loguru import logger
import asyncio
from datetime import datetime
import json
from pathlib import Path

from ..data.data_provider import DataProvider
from ..neural_networks.network_manager import NetworkManager
from ..trading.trading_engine import TradingEngine
from ..portfolio.portfolio_manager import PortfolioManager
from ..utils.config_manager import ConfigManager


class InvestmentSystem:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    """
    
    def __init__(self, config_path: str = "config/main.yaml"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        
        Args:
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.config_manager = ConfigManager(config_path)
        self.config = self.config_manager.get_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_provider = DataProvider(self.config['data'])
        self.network_manager = NetworkManager(self.config['neural_networks'])
        self.trading_engine = TradingEngine(self.config['trading'])
        self.portfolio_manager = PortfolioManager(self.config['portfolio'])
        
        self.is_running = False
        self.tasks: List[asyncio.Task] = []
        
        logger.info("–°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def initialize_components(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        """
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        await self._initialize_components()
        logger.info("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
    
    async def start_trading(self):
        """
        –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        """
        if self.is_running:
            logger.warning("–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.is_running = True
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._initialize_components()
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            await self._start_main_tasks()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.gather(*self.tasks)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: {e}")
            await self.stop_trading()
    
    async def stop_trading(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        """
        if not self.is_running:
            return
        
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        self.is_running = False
        
        # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for task in self.tasks:
            task.cancel()
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        await asyncio.gather(*self.tasks, return_exceptions=True)
        
        logger.info("–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _initialize_components(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        """
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        await self.data_provider.initialize()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        await self.network_manager.initialize()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
        await self.trading_engine.initialize()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        symbols = self.config['data'].get('symbols', [])
        self.trading_engine.set_symbols(symbols)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        await self.portfolio_manager.initialize()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        self.trading_engine.set_components(self.data_provider, self.portfolio_manager)
        self.portfolio_manager.set_data_provider(self.data_provider)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ T-Bank –±—Ä–æ–∫–µ—Ä–∞ –≤ PortfolioManager –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if hasattr(self.trading_engine, 'tbank_broker') and self.trading_engine.tbank_broker:
            self.portfolio_manager.set_tbank_broker(self.trading_engine.tbank_broker)
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å T-Bank –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await self.portfolio_manager.sync_with_tbank()
        
        logger.info("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _start_main_tasks(self):
        """
        –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å–∏—Å—Ç–µ–º—ã
        """
        # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.tasks.append(
            asyncio.create_task(self._data_update_loop())
        )
        
        # –ó–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
        self.tasks.append(
            asyncio.create_task(self._analysis_loop())
        )
        
        # –ó–∞–¥–∞—á–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.tasks.append(
            asyncio.create_task(self._trading_loop())
        )
        
        # –ó–∞–¥–∞—á–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        self.tasks.append(
            asyncio.create_task(self._portfolio_loop())
        )
        
        # –ó–∞–¥–∞—á–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è GUI
        self.tasks.append(
            asyncio.create_task(self._export_loop())
        )
        
        logger.info("–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    
    async def _data_update_loop(self):
        """
        –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        while self.is_running:
            try:
                await self.data_provider.update_market_data()
                await asyncio.sleep(self.config['data']['update_interval'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _analysis_loop(self):
        """
        –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
        """
        while self.is_running:
            try:
                logger.info("üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                market_data = await self.data_provider.get_latest_data()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                news_data = market_data.get('news', {})
                logger.info(f"üì∞ –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(news_data)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ê–Ω–∞–ª–∏–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ —Å –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–º–∏ –∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                predictions = await self.network_manager.analyze(market_data, self.portfolio_manager, news_data)
                
                # –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
                await self.trading_engine.update_predictions(predictions)
                
                # –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                await self._export_signals_data()
                
                logger.info(f"‚úÖ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ {self.config['neural_networks']['analysis_interval']} —Å–µ–∫")
                await asyncio.sleep(self.config['neural_networks']['analysis_interval'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                await asyncio.sleep(60)
    
    async def _trading_loop(self):
        """
        –¶–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                signals = await self.trading_engine.get_trading_signals()
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                if signals:
                    await self.trading_engine.execute_trades(signals)
                
                await asyncio.sleep(self.config['trading']['signal_check_interval'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
                await asyncio.sleep(60)
    
    async def _portfolio_loop(self):
        """
        –¶–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        """
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
                await self.portfolio_manager.update_portfolio()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤
                await self.portfolio_manager.check_risks()
                
                await asyncio.sleep(self.config['portfolio']['update_interval'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º: {e}")
                await asyncio.sleep(60)
    
    async def _export_loop(self):
        """
        –¶–∏–∫–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è GUI
        """
        while self.is_running:
            try:
                # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
                await self._export_portfolio_data()
                
                # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                await self._export_signals_data()
                
                # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(10)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(30)
    
    async def _export_portfolio_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ JSON"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            data_dir = Path("data")
            data_dir.mkdir(exist_ok=True)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_data = {
                'total_value': self.portfolio_manager.cash_balance + sum(
                    pos.market_value for pos in self.portfolio_manager.positions.values()
                ),
                'cash_balance': self.portfolio_manager.cash_balance,
                'positions': {},
                'timestamp': datetime.now().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            for symbol, position in self.portfolio_manager.positions.items():
                portfolio_data['positions'][symbol] = {
                    'quantity': position.quantity,
                    'price': position.current_price,
                    'value': position.market_value,
                    'pnl': position.unrealized_pnl,
                    'pnl_percent': position.unrealized_pnl_percent
                }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            portfolio_file = data_dir / "portfolio.json"
            with open(portfolio_file, 'w', encoding='utf-8') as f:
                json.dump(portfolio_data, f, ensure_ascii=False, indent=2)
            
            logger.debug(f"–î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {portfolio_data['total_value']:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    async def _export_signals_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ JSON"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            data_dir = Path("data")
            data_dir.mkdir(exist_ok=True)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
            all_signals = self.trading_engine.trading_signals
            logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(all_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            signals_data = []
            if all_signals:
                for signal in all_signals.values():
                    signals_data.append({
                        'time': signal.timestamp.strftime("%H:%M:%S"),
                        'symbol': signal.symbol,
                        'signal': signal.signal,
                        'confidence': float(signal.confidence),  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –æ–±—ã—á–Ω—ã–π float
                        'action': f"–°–∏–≥–Ω–∞–ª: {signal.signal}",
                        'price': float(signal.price) if signal.price else 0.0,
                        'strength': float(signal.strength),
                        'source': signal.source,
                        'reasoning': signal.reasoning
                    })
                    logger.debug(f"üìä –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª–∞: {signal.symbol} {signal.signal} ({signal.timestamp.strftime('%H:%M:%S')})")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            signals_file = data_dir / "signals.json"
            existing_signals = []
            if signals_file.exists():
                try:
                    with open(signals_file, 'r', encoding='utf-8') as f:
                        existing_signals = json.load(f)
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ reasoning –∫ —Å—Ç–∞—Ä—ã–º —Å–∏–≥–Ω–∞–ª–∞–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        for signal in existing_signals:
                            if 'reasoning' not in signal:
                                signal['reasoning'] = ""
                except:
                    existing_signals = []
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            existing_signals.extend(signals_data)
            
            # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–∏–≥–Ω–∞–ª–æ–≤
            existing_signals = existing_signals[-50:]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            with open(signals_file, 'w', encoding='utf-8') as f:
                json.dump(existing_signals, f, ensure_ascii=False, indent=2)
            
            if signals_data:
                logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(signals_data)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ signals.json")
            else:
                logger.debug("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def get_system_status(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        return {
            'is_running': self.is_running,
            'data_provider': self.data_provider.get_status(),
            'network_manager': self.network_manager.get_status(),
            'trading_engine': self.trading_engine.get_status(),
            'portfolio_manager': self.portfolio_manager.get_status(),
            'timestamp': datetime.now().isoformat()
        }

