"""
–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
"""

import tkinter as tk
from tkinter import ttk, messagebox
from typing import Dict, Any, Optional, List
from datetime import datetime
from loguru import logger


class TradingPanel:
    """
    –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        
        # –î–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.active_signals = []
        self.order_history = []
        self.trading_settings = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        
        logger.info("–ü–∞–Ω–µ–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–∞–Ω–µ–ª–∏
        """
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self._create_control_panel(main_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self._create_info_panel(main_frame)
    
    def _create_control_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        control_frame = ttk.Frame(parent)
        control_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self._create_quick_actions(control_frame)
        
        # –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self._create_trading_settings(control_frame)
        
        # –ü–∞–Ω–µ–ª—å —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        self._create_manual_trading(control_frame)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        self._create_risk_management(control_frame)
    
    def _create_quick_actions(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ttk.LabelFrame(parent, text="–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", padding=10)
        actions_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(actions_frame)
        buttons_frame.pack(fill=tk.X)
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        row1 = ttk.Frame(buttons_frame)
        row1.pack(fill=tk.X, pady=(0, 5))
        
        self.start_trading_btn = ttk.Button(
            row1, 
            text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", 
            command=self._start_trading,
            style='Success.TButton'
        )
        self.start_trading_btn.pack(side=tk.LEFT, padx=(0, 5), fill=tk.X, expand=True)
        
        self.stop_trading_btn = ttk.Button(
            row1, 
            text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", 
            command=self._stop_trading,
            style='Danger.TButton',
            state='disabled'
        )
        self.stop_trading_btn.pack(side=tk.LEFT, padx=(5, 0), fill=tk.X, expand=True)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        row2 = ttk.Frame(buttons_frame)
        row2.pack(fill=tk.X, pady=(5, 0))
        
        ttk.Button(
            row2, 
            text="üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", 
            command=self._emergency_stop,
            style='Warning.TButton'
        ).pack(side=tk.LEFT, padx=(0, 5), fill=tk.X, expand=True)
        
        ttk.Button(
            row2, 
            text="üìä –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", 
            command=self._close_all_positions
        ).pack(side=tk.LEFT, padx=(5, 0), fill=tk.X, expand=True)
        
        # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
        status_frame = ttk.Frame(actions_frame)
        status_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏:").pack(side=tk.LEFT)
        
        self.trading_status_label = ttk.Label(
            status_frame, 
            text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            style='Stopped.TLabel'
        )
        self.trading_status_label.pack(side=tk.RIGHT)
    
    def _create_trading_settings(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(parent, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏", padding=10)
        settings_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_frame = ttk.Frame(settings_frame)
        signals_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(signals_frame, text="–ü–æ—Ä–æ–≥ —Å–∏–≥–Ω–∞–ª–∞:").pack(side=tk.LEFT)
        
        self.signal_threshold_var = tk.DoubleVar(value=0.6)
        signal_threshold_scale = ttk.Scale(
            signals_frame,
            from_=0.1,
            to=1.0,
            variable=self.signal_threshold_var,
            orient=tk.HORIZONTAL
        )
        signal_threshold_scale.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(10, 10))
        
        self.signal_threshold_label = ttk.Label(signals_frame, text="0.60")
        self.signal_threshold_label.pack(side=tk.RIGHT)
        
        signal_threshold_scale.configure(command=self._on_signal_threshold_change)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∏—Ü–∏–π
        position_frame = ttk.Frame(settings_frame)
        position_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(position_frame, text="–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%):").pack(side=tk.LEFT)
        
        self.position_size_var = tk.DoubleVar(value=10.0)
        position_size_scale = ttk.Scale(
            position_frame,
            from_=1.0,
            to=50.0,
            variable=self.position_size_var,
            orient=tk.HORIZONTAL
        )
        position_size_scale.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(10, 10))
        
        self.position_size_label = ttk.Label(position_frame, text="10.0%")
        self.position_size_label.pack(side=tk.RIGHT)
        
        position_size_scale.configure(command=self._on_position_size_change)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        max_positions_frame = ttk.Frame(settings_frame)
        max_positions_frame.pack(fill=tk.X)
        
        ttk.Label(max_positions_frame, text="–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π:").pack(side=tk.LEFT)
        
        self.max_positions_var = tk.IntVar(value=10)
        max_positions_spinbox = ttk.Spinbox(
            max_positions_frame,
            from_=1,
            to=50,
            textvariable=self.max_positions_var,
            width=10
        )
        max_positions_spinbox.pack(side=tk.RIGHT)
    
    def _create_manual_trading(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        manual_frame = ttk.LabelFrame(parent, text="–†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", padding=10)
        manual_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –í—ã–±–æ—Ä —Å–∏–º–≤–æ–ª–∞
        symbol_frame = ttk.Frame(manual_frame)
        symbol_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(symbol_frame, text="–°–∏–º–≤–æ–ª:").pack(side=tk.LEFT)
        
        self.manual_symbol_var = tk.StringVar()
        symbol_combo = ttk.Combobox(
            symbol_frame,
            textvariable=self.manual_symbol_var,
            values=["SBER", "GAZP", "LKOH"],
            state="readonly",
            width=15
        )
        symbol_combo.pack(side=tk.RIGHT)
        symbol_combo.set("SBER")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        quantity_frame = ttk.Frame(manual_frame)
        quantity_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(quantity_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:").pack(side=tk.LEFT)
        
        self.manual_quantity_var = tk.IntVar(value=10)
        quantity_spinbox = ttk.Spinbox(
            quantity_frame,
            from_=1,
            to=1000,
            textvariable=self.manual_quantity_var,
            width=15
        )
        quantity_spinbox.pack(side=tk.RIGHT)
        
        # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞
        order_type_frame = ttk.Frame(manual_frame)
        order_type_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(order_type_frame, text="–¢–∏–ø –æ—Ä–¥–µ—Ä–∞:").pack(side=tk.LEFT)
        
        self.order_type_var = tk.StringVar()
        order_type_combo = ttk.Combobox(
            order_type_frame,
            textvariable=self.order_type_var,
            values=["–†—ã–Ω–æ—á–Ω—ã–π", "–õ–∏–º–∏—Ç–Ω—ã–π", "–°—Ç–æ–ø"],
            state="readonly",
            width=15
        )
        order_type_combo.pack(side=tk.RIGHT)
        order_type_combo.set("–†—ã–Ω–æ—á–Ω—ã–π")
        
        # –¶–µ–Ω–∞ (–¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
        price_frame = ttk.Frame(manual_frame)
        price_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(price_frame, text="–¶–µ–Ω–∞:").pack(side=tk.LEFT)
        
        self.manual_price_var = tk.DoubleVar(value=0.0)
        price_entry = ttk.Entry(
            price_frame,
            textvariable=self.manual_price_var,
            width=15
        )
        price_entry.pack(side=tk.RIGHT)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
        buttons_frame = ttk.Frame(manual_frame)
        buttons_frame.pack(fill=tk.X)
        
        ttk.Button(
            buttons_frame,
            text="üìà –ö—É–ø–∏—Ç—å",
            command=self._manual_buy,
            style='Success.TButton'
        ).pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        ttk.Button(
            buttons_frame,
            text="üìâ –ü—Ä–æ–¥–∞—Ç—å",
            command=self._manual_sell,
            style='Danger.TButton'
        ).pack(side=tk.RIGHT, fill=tk.X, expand=True, padx=(5, 0))
    
    def _create_risk_management(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        risk_frame = ttk.LabelFrame(parent, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", padding=10)
        risk_frame.pack(fill=tk.X)
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å
        stop_loss_frame = ttk.Frame(risk_frame)
        stop_loss_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.stop_loss_enabled_var = tk.BooleanVar(value=True)
        stop_loss_check = ttk.Checkbutton(
            stop_loss_frame,
            text="–°—Ç–æ–ø-–ª–æ—Å—Å (%)",
            variable=self.stop_loss_enabled_var
        )
        stop_loss_check.pack(side=tk.LEFT)
        
        self.stop_loss_var = tk.DoubleVar(value=5.0)
        stop_loss_entry = ttk.Entry(
            stop_loss_frame,
            textvariable=self.stop_loss_var,
            width=10
        )
        stop_loss_entry.pack(side=tk.RIGHT)
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        take_profit_frame = ttk.Frame(risk_frame)
        take_profit_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.take_profit_enabled_var = tk.BooleanVar(value=True)
        take_profit_check = ttk.Checkbutton(
            take_profit_frame,
            text="–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)",
            variable=self.take_profit_enabled_var
        )
        take_profit_check.pack(side=tk.LEFT)
        
        self.take_profit_var = tk.DoubleVar(value=10.0)
        take_profit_entry = ttk.Entry(
            take_profit_frame,
            textvariable=self.take_profit_var,
            width=10
        )
        take_profit_entry.pack(side=tk.RIGHT)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        max_risk_frame = ttk.Frame(risk_frame)
        max_risk_frame.pack(fill=tk.X)
        
        ttk.Label(max_risk_frame, text="–ú–∞–∫—Å. —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è (%):").pack(side=tk.LEFT)
        
        self.max_risk_var = tk.DoubleVar(value=10.0)
        max_risk_entry = ttk.Entry(
            max_risk_frame,
            textvariable=self.max_risk_var,
            width=10
        )
        max_risk_entry.pack(side=tk.RIGHT)
    
    def _create_info_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.Frame(parent)
        info_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Notebook –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
        self.info_notebook = ttk.Notebook(info_frame)
        self.info_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self._create_signals_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        self._create_orders_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        self._create_history_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._create_statistics_tab()
    
    def _create_signals_tab(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        # –§—Ä–µ–π–º –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_frame = ttk.Frame(self.info_notebook)
        self.info_notebook.add(signals_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(signals_frame)
        header_frame.pack(fill=tk.X, padx=10, pady=(10, 5))
        
        ttk.Label(
            header_frame, 
            text="–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
            style='Header.TLabel'
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            header_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self._refresh_signals
        ).pack(side=tk.RIGHT)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        columns = ("–í—Ä–µ–º—è", "–°–∏–º–≤–æ–ª", "–°–∏–≥–Ω–∞–ª", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ò—Å—Ç–æ—á–Ω–∏–∫", "–î–µ–π—Å—Ç–≤–∏–µ")
        self.signals_tree = ttk.Treeview(signals_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.signals_tree.heading(col, text=col)
            self.signals_tree.column(col, width=100, anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        signals_v_scrollbar = ttk.Scrollbar(signals_frame, orient='vertical', command=self.signals_tree.yview)
        signals_h_scrollbar = ttk.Scrollbar(signals_frame, orient='horizontal', command=self.signals_tree.xview)
        self.signals_tree.configure(yscrollcommand=signals_v_scrollbar.set, xscrollcommand=signals_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.signals_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0), pady=(0, 10))
        signals_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=(0, 10))
        signals_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, padx=(10, 10))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.signals_context_menu = tk.Menu(self.signals_tree, tearoff=0)
        self.signals_context_menu.add_command(label="–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–≥–Ω–∞–ª", command=self._execute_signal)
        self.signals_context_menu.add_command(label="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª", command=self._ignore_signal)
        self.signals_context_menu.add_separator()
        self.signals_context_menu.add_command(label="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", command=self._show_signal_details)
        
        self.signals_tree.bind("<Button-3>", self._show_signals_context_menu)
    
    def _create_orders_tab(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        """
        # –§—Ä–µ–π–º –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
        orders_frame = ttk.Frame(self.info_notebook)
        self.info_notebook.add(orders_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(orders_frame)
        header_frame.pack(fill=tk.X, padx=10, pady=(10, 5))
        
        ttk.Label(
            header_frame, 
            text="–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞",
            style='Header.TLabel'
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            header_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self._refresh_orders
        ).pack(side=tk.RIGHT)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ä–¥–µ—Ä–æ–≤
        columns = ("ID", "–í—Ä–µ–º—è", "–°–∏–º–≤–æ–ª", "–¢–∏–ø", "–°—Ç–æ—Ä–æ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–°—Ç–∞—Ç—É—Å")
        self.orders_tree = ttk.Treeview(orders_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.orders_tree.heading(col, text=col)
            self.orders_tree.column(col, width=80, anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        orders_v_scrollbar = ttk.Scrollbar(orders_frame, orient='vertical', command=self.orders_tree.yview)
        orders_h_scrollbar = ttk.Scrollbar(orders_frame, orient='horizontal', command=self.orders_tree.xview)
        self.orders_tree.configure(yscrollcommand=orders_v_scrollbar.set, xscrollcommand=orders_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.orders_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0), pady=(0, 10))
        orders_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=(0, 10))
        orders_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, padx=(10, 10))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
        self.orders_context_menu = tk.Menu(self.orders_tree, tearoff=0)
        self.orders_context_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä", command=self._cancel_order)
        self.orders_context_menu.add_command(label="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä", command=self._modify_order)
        self.orders_context_menu.add_separator()
        self.orders_context_menu.add_command(label="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", command=self._show_order_details)
        
        self.orders_tree.bind("<Button-3>", self._show_orders_context_menu)
    
    def _create_history_tab(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        """
        # –§—Ä–µ–π–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        history_frame = ttk.Frame(self.info_notebook)
        self.info_notebook.add(history_frame, text="–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        header_frame = ttk.Frame(history_frame)
        header_frame.pack(fill=tk.X, padx=10, pady=(10, 5))
        
        ttk.Label(
            header_frame, 
            text="–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫",
            style='Header.TLabel'
        ).pack(side=tk.LEFT)
        
        # –§–∏–ª—å—Ç—Ä—ã
        filters_frame = ttk.Frame(header_frame)
        filters_frame.pack(side=tk.RIGHT)
        
        ttk.Label(filters_frame, text="–ü–µ—Ä–∏–æ–¥:").pack(side=tk.LEFT, padx=(0, 5))
        
        self.history_period_var = tk.StringVar()
        period_combo = ttk.Combobox(
            filters_frame,
            textvariable=self.history_period_var,
            values=["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–í—Å–µ"],
            state="readonly",
            width=10
        )
        period_combo.pack(side=tk.LEFT, padx=(0, 10))
        period_combo.set("–°–µ–≥–æ–¥–Ω—è")
        
        ttk.Button(
            filters_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self._refresh_history
        ).pack(side=tk.LEFT)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        columns = ("–í—Ä–µ–º—è", "–°–∏–º–≤–æ–ª", "–°—Ç–æ—Ä–æ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞", "–ö–æ–º–∏—Å—Å–∏—è", "P&L")
        self.history_tree = ttk.Treeview(history_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.history_tree.heading(col, text=col)
            self.history_tree.column(col, width=90, anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        history_v_scrollbar = ttk.Scrollbar(history_frame, orient='vertical', command=self.history_tree.yview)
        history_h_scrollbar = ttk.Scrollbar(history_frame, orient='horizontal', command=self.history_tree.xview)
        self.history_tree.configure(yscrollcommand=history_v_scrollbar.set, xscrollcommand=history_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.history_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0), pady=(0, 10))
        history_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=(0, 10))
        history_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, padx=(10, 10))
    
    def _create_statistics_tab(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        # –§—Ä–µ–π–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.Frame(self.info_notebook)
        self.info_notebook.add(stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_frame = ttk.LabelFrame(stats_frame, text="–¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏", padding=10)
        metrics_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫
        metrics_grid = ttk.Frame(metrics_frame)
        metrics_grid.pack(fill=tk.X)
        
        for i in range(3):
            metrics_grid.columnconfigure(i, weight=1)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self._create_stat_metric(metrics_grid, "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", "0", 0, 0)
        self._create_stat_metric(metrics_grid, "–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", "0 (0%)", 0, 1)
        self._create_stat_metric(metrics_grid, "–£–±—ã—Ç–æ—á–Ω—ã—Ö", "0 (0%)", 0, 2)
        
        self._create_stat_metric(metrics_grid, "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", "0 ‚ÇΩ", 1, 0)
        self._create_stat_metric(metrics_grid, "–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫", "0 ‚ÇΩ", 1, 1)
        self._create_stat_metric(metrics_grid, "–ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä", "0.00", 1, 2)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        details_frame = ttk.LabelFrame(stats_frame, text="–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=10)
        details_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        columns = ("–°–∏–º–≤–æ–ª", "–°–¥–µ–ª–æ–∫", "–ü—Ä–∏–±—ã–ª—å", "–£–±—ã—Ç–æ–∫", "P&L", "Win Rate")
        self.stats_tree = ttk.Treeview(details_frame, columns=columns, show='headings', height=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.stats_tree.heading(col, text=col)
            self.stats_tree.column(col, width=100, anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        stats_scrollbar = ttk.Scrollbar(details_frame, orient='vertical', command=self.stats_tree.yview)
        self.stats_tree.configure(yscrollcommand=stats_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.stats_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        stats_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def _create_stat_metric(self, parent, title: str, value: str, row: int, col: int):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Ç—Ä–∏–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            row: –°—Ç—Ä–æ–∫–∞ –≤ —Å–µ—Ç–∫–µ
            col: –ö–æ–ª–æ–Ω–∫–∞ –≤ —Å–µ—Ç–∫–µ
        """
        # –†–∞–º–∫–∞ –º–µ—Ç—Ä–∏–∫–∏
        metric_frame = ttk.Frame(parent, relief='raised', borderwidth=1)
        metric_frame.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            metric_frame, 
            text=title, 
            font=('Arial', 9, 'bold'),
            foreground='gray'
        )
        title_label.pack(pady=(5, 2))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = ttk.Label(
            metric_frame, 
            text=value, 
            font=('Arial', 12, 'bold')
        )
        value_label.pack(pady=(0, 5))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        setattr(self, f"stat_{title.lower().replace(' ', '_')}", value_label)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def _on_signal_threshold_change(self, value):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        self.signal_threshold_label.config(text=f"{float(value):.2f}")
    
    def _on_position_size_change(self, value):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        self.position_size_label.config(text=f"{float(value):.1f}%")
    
    def _start_trading(self):
        """
        –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        try:
            if self.main_window.is_system_running():
                self.start_trading_btn.config(state='disabled')
                self.stop_trading_btn.config(state='normal')
                self.trading_status_label.config(text="–ê–∫—Ç–∏–≤–Ω–∞", style='Running.TLabel')
                logger.info("–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: {e}")
    
    def _stop_trading(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        try:
            self.start_trading_btn.config(state='normal')
            self.stop_trading_btn.config(state='disabled')
            self.trading_status_label.config(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", style='Stopped.TLabel')
            logger.info("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: {e}")
    
    def _emergency_stop(self):
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        result = messagebox.askyesno(
            "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é?\n"
            "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã."
        )
        
        if result:
            try:
                # –õ–æ–≥–∏–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                self._stop_trading()
                logger.warning("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏")
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–æ—Ä–≥–æ–≤–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def _close_all_positions(self):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        """
        result = messagebox.askyesno(
            "–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏?"
        )
        
        if result:
            try:
                # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
                logger.info("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def _manual_buy(self):
        """
        –†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
        """
        try:
            symbol = self.manual_symbol_var.get()
            quantity = self.manual_quantity_var.get()
            order_type = self.order_type_var.get()
            price = self.manual_price_var.get()
            
            if not symbol:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª")
                return
            
            if quantity <= 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
            logger.info(f"–†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: {quantity} {symbol} –ø–æ —Ü–µ–Ω–µ {price}")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {quantity} {symbol} —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä: {e}")
    
    def _manual_sell(self):
        """
        –†—É—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
        """
        try:
            symbol = self.manual_symbol_var.get()
            quantity = self.manual_quantity_var.get()
            order_type = self.order_type_var.get()
            price = self.manual_price_var.get()
            
            if not symbol:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª")
                return
            
            if quantity <= 0:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            
            # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            logger.info(f"–†—É—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞: {quantity} {symbol} –ø–æ —Ü–µ–Ω–µ {price}")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {quantity} {symbol} —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä: {e}")
    
    def _refresh_signals(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.signals_tree.get_children():
                self.signals_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_signals = [
                (datetime.now().strftime("%H:%M:%S"), "SBER", "BUY", "0.75", "LSTM", "–í—ã–ø–æ–ª–Ω–∏—Ç—å"),
                (datetime.now().strftime("%H:%M:%S"), "GAZP", "SELL", "0.68", "XGBoost", "–í—ã–ø–æ–ª–Ω–∏—Ç—å"),
                (datetime.now().strftime("%H:%M:%S"), "LKOH", "HOLD", "0.45", "DeepSeek", "–û–∂–∏–¥–∞–Ω–∏–µ")
            ]
            
            for signal in test_signals:
                self.signals_tree.insert('', 'end', values=signal)
                
            logger.debug("–°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def _refresh_orders(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤
        """
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.orders_tree.get_children():
                self.orders_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_orders = [
                ("ORD001", "10:30:15", "SBER", "–†—ã–Ω–æ—á–Ω—ã–π", "BUY", "10", "255.00", "–û–∂–∏–¥–∞–Ω–∏–µ"),
                ("ORD002", "10:25:30", "GAZP", "–õ–∏–º–∏—Ç–Ω—ã–π", "SELL", "20", "175.00", "–ß–∞—Å—Ç–∏—á–Ω–æ")
            ]
            
            for order in test_orders:
                self.orders_tree.insert('', 'end', values=order)
                
            logger.debug("–°–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    
    def _refresh_history(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
        """
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.history_tree.get_children():
                self.history_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_history = [
                ("10:15:30", "SBER", "BUY", "10", "250.00", "2500", "1.25", "+50"),
                ("09:45:15", "GAZP", "SELL", "15", "180.00", "2700", "1.35", "-30"),
                ("09:30:00", "LKOH", "BUY", "5", "6500.00", "32500", "16.25", "+150")
            ]
            
            for trade in test_history:
                self.history_tree.insert('', 'end', values=trade)
                
            logger.debug("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _show_signals_context_menu(self, event):
        """
        –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
        """
        try:
            self.signals_context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def _show_orders_context_menu(self, event):
        """
        –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –æ—Ä–¥–µ—Ä–æ–≤
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
        """
        try:
            self.orders_context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    
    def _execute_signal(self):
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        """
        selection = self.signals_tree.selection()
        if selection:
            item = self.signals_tree.item(selection[0])
            values = item['values']
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ {values[2]} –¥–ª—è {values[1]}")
    
    def _ignore_signal(self):
        """
        –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        """
        selection = self.signals_tree.selection()
        if selection:
            self.signals_tree.delete(selection[0])
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∏–≥–Ω–∞–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    def _show_signal_details(self):
        """
        –ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —Å–∏–≥–Ω–∞–ª–∞
        """
        selection = self.signals_tree.selection()
        if selection:
            item = self.signals_tree.item(selection[0])
            values = item['values']
            messagebox.showinfo("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞", f"–°–∏–≥–Ω–∞–ª: {values[2]}\n–°–∏–º–≤–æ–ª: {values[1]}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {values[3]}")
    
    def _cancel_order(self):
        """
        –û—Ç–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        """
        selection = self.orders_tree.selection()
        if selection:
            item = self.orders_tree.item(selection[0])
            values = item['values']
            result = messagebox.askyesno("–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞", f"–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä {values[0]}?")
            if result:
                self.orders_tree.delete(selection[0])
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
    
    def _modify_order(self):
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        """
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_order_details(self):
        """
        –ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—Ä–¥–µ—Ä–∞
        """
        selection = self.orders_tree.selection()
        if selection:
            item = self.orders_tree.item(selection[0])
            values = item['values']
            messagebox.showinfo("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞", f"ID: {values[0]}\n–°–∏–º–≤–æ–ª: {values[2]}\n–¢–∏–ø: {values[3]}")
    
    def add_signal(self, signal_data: Dict[str, Any]):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            signal_data: –î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        """
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
            self.active_signals.append(signal_data)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤
            self._refresh_signals()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def refresh_data(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏
        """
        try:
            logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            self._refresh_signals()
            self._refresh_orders()
            self._refresh_history()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
