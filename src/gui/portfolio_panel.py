"""
–ü–∞–Ω–µ–ª—å –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–æ–≤
"""

import tkinter as tk
from tkinter import ttk, messagebox
from typing import Dict, Any, Optional, List
from datetime import datetime
import threading
import time

import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import numpy as np
from loguru import logger


class PortfolioPanel:
    """
    –ü–∞–Ω–µ–ª—å –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–æ–≤
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self.portfolio_data = {}
        self.positions_data = []
        self.performance_data = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._start_auto_update()
        
        logger.info("–ü–∞–Ω–µ–ª—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–∞–Ω–µ–ª–∏
        """
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –æ–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self._create_overview_panel(main_frame)
        
        # –°—Ä–µ–¥–Ω—è—è –ø–∞–Ω–µ–ª—å - –ø–æ–∑–∏—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
        self._create_content_panel(main_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self._create_details_panel(main_frame)
    
    def _create_overview_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ–±–∑–æ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ –æ–±–∑–æ—Ä–∞
        overview_frame = ttk.LabelFrame(parent, text="–û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è", padding=10)
        overview_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_frame = ttk.Frame(overview_frame)
        metrics_frame.pack(fill=tk.X)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏
        for i in range(5):
            metrics_frame.columnconfigure(i, weight=1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –º–µ—Ç—Ä–∏–∫
        self._create_portfolio_metric(metrics_frame, "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", "1,000,000 ‚ÇΩ", 0, 0, "blue")
        self._create_portfolio_metric(metrics_frame, "–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", "100,000 ‚ÇΩ", 0, 1, "green")
        self._create_portfolio_metric(metrics_frame, "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ", "900,000 ‚ÇΩ", 0, 2, "orange")
        self._create_portfolio_metric(metrics_frame, "–û–±—â–∏–π P&L", "+50,000 ‚ÇΩ", 0, 3, "green")
        self._create_portfolio_metric(metrics_frame, "P&L %", "+5.26%", 0, 4, "green")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        additional_frame = ttk.Frame(overview_frame)
        additional_frame.pack(fill=tk.X, pady=(10, 0))
        
        for i in range(5):
            additional_frame.columnconfigure(i, weight=1)
        
        self._create_portfolio_metric(additional_frame, "–î–Ω–µ–≤–Ω–æ–π P&L", "+2,500 ‚ÇΩ", 0, 0, "green")
        self._create_portfolio_metric(additional_frame, "–ü–æ–∑–∏—Ü–∏–π", "8", 0, 1, "blue")
        self._create_portfolio_metric(additional_frame, "–ö–æ—ç—Ñ. –®–∞—Ä–ø–∞", "1.25", 0, 2, "green")
        self._create_portfolio_metric(additional_frame, "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", "-3.2%", 0, 3, "red")
        self._create_portfolio_metric(additional_frame, "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "15.8%", 0, 4, "orange")
    
    def _create_portfolio_metric(self, parent, title: str, value: str, row: int, col: int, color: str):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Ç—Ä–∏–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            row: –°—Ç—Ä–æ–∫–∞ –≤ —Å–µ—Ç–∫–µ
            col: –ö–æ–ª–æ–Ω–∫–∞ –≤ —Å–µ—Ç–∫–µ
            color: –¶–≤–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        """
        # –†–∞–º–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        card_frame = ttk.Frame(parent, relief='raised', borderwidth=1)
        card_frame.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            card_frame, 
            text=title, 
            font=('Arial', 9, 'bold'),
            foreground='gray'
        )
        title_label.pack(pady=(8, 2))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = ttk.Label(
            card_frame, 
            text=value, 
            font=('Arial', 12, 'bold'),
            foreground=color
        )
        value_label.pack(pady=(0, 8))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        setattr(self, f"portfolio_metric_{title.lower().replace(' ', '_').replace('.', '_')}", value_label)
    
    def _create_content_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_frame = ttk.Frame(parent)
        content_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–æ–∑–∏—Ü–∏–∏
        self._create_positions_panel(content_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞—Ñ–∏–∫–∏
        self._create_charts_panel(content_frame)
    
    def _create_positions_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–∑–∏—Ü–∏–π
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        positions_frame = ttk.LabelFrame(parent, text="–ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è", padding=10)
        positions_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(positions_frame)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(
            control_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self._refresh_positions
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            control_frame,
            text="üìä –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞",
            command=self._show_rebalancing
        ).pack(side=tk.LEFT, padx=(10, 0))
        
        ttk.Button(
            control_frame,
            text="üìà –ê–Ω–∞–ª–∏–∑",
            command=self._show_analysis
        ).pack(side=tk.RIGHT)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        columns = ("–°–∏–º–≤–æ–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ä. —Ü–µ–Ω–∞", "–¢–µ–∫. —Ü–µ–Ω–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "P&L", "P&L %", "–í–µ—Å %")
        self.positions_tree = ttk.Treeview(positions_frame, columns=columns, show='headings', height=12)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {"–°–∏–º–≤–æ–ª": 60, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 80, "–°—Ä. —Ü–µ–Ω–∞": 80, "–¢–µ–∫. —Ü–µ–Ω–∞": 80, 
                        "–°—Ç–æ–∏–º–æ—Å—Ç—å": 100, "P&L": 80, "P&L %": 70, "–í–µ—Å %": 60}
        
        for col in columns:
            self.positions_tree.heading(col, text=col)
            self.positions_tree.column(col, width=column_widths.get(col, 80), anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        positions_v_scrollbar = ttk.Scrollbar(positions_frame, orient='vertical', command=self.positions_tree.yview)
        positions_h_scrollbar = ttk.Scrollbar(positions_frame, orient='horizontal', command=self.positions_tree.xview)
        self.positions_tree.configure(yscrollcommand=positions_v_scrollbar.set, xscrollcommand=positions_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.positions_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        positions_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        positions_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 0))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        self.positions_context_menu = tk.Menu(self.positions_tree, tearoff=0)
        self.positions_context_menu.add_command(label="–£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", command=self._increase_position)
        self.positions_context_menu.add_command(label="–£–º–µ–Ω—å—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", command=self._decrease_position)
        self.positions_context_menu.add_command(label="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", command=self._close_position)
        self.positions_context_menu.add_separator()
        self.positions_context_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏", command=self._analyze_position)
        self.positions_context_menu.add_command(label="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∑–∏—Ü–∏–∏", command=self._show_position_history)
        
        self.positions_tree.bind("<Button-3>", self._show_positions_context_menu)
        self.positions_tree.bind("<Double-1>", self._on_position_double_click)
    
    def _create_charts_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        charts_frame = ttk.LabelFrame(parent, text="–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è", padding=10)
        charts_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Notebook –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.charts_notebook = ttk.Notebook(charts_frame)
        self.charts_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
        self._create_allocation_chart()
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._create_performance_chart()
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∏—Å–∫–æ–≤
        self._create_risk_chart()
    
    def _create_allocation_chart(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
        """
        # –§—Ä–µ–π–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        allocation_frame = ttk.Frame(self.charts_notebook)
        self.charts_notebook.add(allocation_frame, text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ matplotlib —Ñ–∏–≥—É—Ä—ã
        self.allocation_figure = Figure(figsize=(8, 6), dpi=100)
        self.allocation_ax = self.allocation_figure.add_subplot(111)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.allocation_canvas = FigureCanvasTkAgg(self.allocation_figure, allocation_frame)
        self.allocation_canvas.draw()
        self.allocation_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        allocation_controls = ttk.Frame(allocation_frame)
        allocation_controls.pack(fill=tk.X, pady=5)
        
        ttk.Button(
            allocation_controls,
            text="–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
            command=lambda: self._update_allocation_chart("pie")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            allocation_controls,
            text="–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
            command=lambda: self._update_allocation_chart("bar")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            allocation_controls,
            text="Treemap",
            command=lambda: self._update_allocation_chart("treemap")
        ).pack(side=tk.LEFT, padx=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._update_allocation_chart("pie")
    
    def _create_performance_chart(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        # –§—Ä–µ–π–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_frame = ttk.Frame(self.charts_notebook)
        self.charts_notebook.add(performance_frame, text="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ matplotlib —Ñ–∏–≥—É—Ä—ã
        self.performance_figure = Figure(figsize=(8, 6), dpi=100)
        self.performance_ax = self.performance_figure.add_subplot(111)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.performance_canvas = FigureCanvasTkAgg(self.performance_figure, performance_frame)
        self.performance_canvas.draw()
        self.performance_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        performance_controls = ttk.Frame(performance_frame)
        performance_controls.pack(fill=tk.X, pady=5)
        
        ttk.Button(
            performance_controls,
            text="1–î",
            command=lambda: self._update_performance_chart("1D")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            performance_controls,
            text="1–ù",
            command=lambda: self._update_performance_chart("1W")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            performance_controls,
            text="1–ú",
            command=lambda: self._update_performance_chart("1M")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            performance_controls,
            text="–í—Å–µ",
            command=lambda: self._update_performance_chart("ALL")
        ).pack(side=tk.LEFT, padx=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._update_performance_chart("1W")
    
    def _create_risk_chart(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫–æ–≤
        """
        # –§—Ä–µ–π–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫–æ–≤
        risk_frame = ttk.Frame(self.charts_notebook)
        self.charts_notebook.add(risk_frame, text="–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ matplotlib —Ñ–∏–≥—É—Ä—ã
        self.risk_figure = Figure(figsize=(8, 6), dpi=100)
        self.risk_ax = self.risk_figure.add_subplot(111)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.risk_canvas = FigureCanvasTkAgg(self.risk_figure, risk_frame)
        self.risk_canvas.draw()
        self.risk_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        risk_controls = ttk.Frame(risk_frame)
        risk_controls.pack(fill=tk.X, pady=5)
        
        ttk.Button(
            risk_controls,
            text="VaR",
            command=lambda: self._update_risk_chart("var")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            risk_controls,
            text="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è",
            command=lambda: self._update_risk_chart("correlation")
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            risk_controls,
            text="–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
            command=lambda: self._update_risk_chart("volatility")
        ).pack(side=tk.LEFT, padx=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self._update_risk_chart("var")
    
    def _create_details_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ –¥–µ—Ç–∞–ª–µ–π
        details_frame = ttk.LabelFrame(parent, text="–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        details_frame.pack(fill=tk.X)
        
        # Notebook –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        self.details_notebook = ttk.Notebook(details_frame)
        self.details_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self._create_transactions_table()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤
        self._create_dividends_table()
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
        self._create_metrics_table()
    
    def _create_transactions_table(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        # –§—Ä–µ–π–º –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions_frame = ttk.Frame(self.details_notebook)
        self.details_notebook.add(transactions_frame, text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_frame = ttk.Frame(transactions_frame)
        filter_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(filter_frame, text="–ü–µ—Ä–∏–æ–¥:").pack(side=tk.LEFT, padx=(0, 5))
        
        self.transactions_period_var = tk.StringVar()
        period_combo = ttk.Combobox(
            filter_frame,
            textvariable=self.transactions_period_var,
            values=["–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–í—Å–µ"],
            state="readonly",
            width=10
        )
        period_combo.pack(side=tk.LEFT, padx=(0, 10))
        period_combo.set("–ú–µ—Å—è—Ü")
        
        ttk.Label(filter_frame, text="–¢–∏–ø:").pack(side=tk.LEFT, padx=(0, 5))
        
        self.transactions_type_var = tk.StringVar()
        type_combo = ttk.Combobox(
            filter_frame,
            textvariable=self.transactions_type_var,
            values=["–í—Å–µ", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞", "–î–∏–≤–∏–¥–µ–Ω–¥—ã"],
            state="readonly",
            width=10
        )
        type_combo.pack(side=tk.LEFT, padx=(0, 10))
        type_combo.set("–í—Å–µ")
        
        ttk.Button(
            filter_frame,
            text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
            command=self._apply_transaction_filter
        ).pack(side=tk.LEFT)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        columns = ("–î–∞—Ç–∞", "–°–∏–º–≤–æ–ª", "–¢–∏–ø", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–°—É–º–º–∞", "–ö–æ–º–∏—Å—Å–∏—è", "–ë–∞–ª–∞–Ω—Å")
        self.transactions_tree = ttk.Treeview(transactions_frame, columns=columns, show='headings', height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.transactions_tree.heading(col, text=col)
            self.transactions_tree.column(col, width=90, anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        trans_v_scrollbar = ttk.Scrollbar(transactions_frame, orient='vertical', command=self.transactions_tree.yview)
        trans_h_scrollbar = ttk.Scrollbar(transactions_frame, orient='horizontal', command=self.transactions_tree.xview)
        self.transactions_tree.configure(yscrollcommand=trans_v_scrollbar.set, xscrollcommand=trans_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.transactions_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        trans_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        trans_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 0))
    
    def _create_dividends_table(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤
        """
        # –§—Ä–µ–π–º –¥–ª—è –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤
        dividends_frame = ttk.Frame(self.details_notebook)
        self.details_notebook.add(dividends_frame, text="–î–∏–≤–∏–¥–µ–Ω–¥—ã")
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∏–≤–∏–¥–µ–Ω–¥–æ–≤
        columns = ("–î–∞—Ç–∞", "–°–∏–º–≤–æ–ª", "–¢–∏–ø", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π", "–î–∏–≤–∏–¥–µ–Ω–¥ –Ω–∞ –∞–∫—Ü–∏—é", "–û–±—â–∞—è —Å—É–º–º–∞", "–ù–∞–ª–æ–≥")
        self.dividends_tree = ttk.Treeview(dividends_frame, columns=columns, show='headings', height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.dividends_tree.heading(col, text=col)
            self.dividends_tree.column(col, width=100, anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        div_v_scrollbar = ttk.Scrollbar(dividends_frame, orient='vertical', command=self.dividends_tree.yview)
        div_h_scrollbar = ttk.Scrollbar(dividends_frame, orient='horizontal', command=self.dividends_tree.xview)
        self.dividends_tree.configure(yscrollcommand=div_v_scrollbar.set, xscrollcommand=div_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.dividends_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0))
        div_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        div_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, padx=(10, 10), pady=(5, 0))
    
    def _create_metrics_table(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
        """
        # –§—Ä–µ–π–º –¥–ª—è –º–µ—Ç—Ä–∏–∫
        metrics_frame = ttk.Frame(self.details_notebook)
        self.details_notebook.add(metrics_frame, text="–ú–µ—Ç—Ä–∏–∫–∏")
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
        columns = ("–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–ë–µ–Ω—á–º–∞—Ä–∫", "–°—Ç–∞—Ç—É—Å", "–û–ø–∏—Å–∞–Ω–∏–µ")
        self.metrics_tree = ttk.Treeview(metrics_frame, columns=columns, show='headings', height=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {"–ú–µ—Ç—Ä–∏–∫–∞": 150, "–ó–Ω–∞—á–µ–Ω–∏–µ": 100, "–ë–µ–Ω—á–º–∞—Ä–∫": 100, "–°—Ç–∞—Ç—É—Å": 80, "–û–ø–∏—Å–∞–Ω–∏–µ": 200}
        
        for col in columns:
            self.metrics_tree.heading(col, text=col)
            self.metrics_tree.column(col, width=column_widths.get(col, 100), anchor='center')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        metrics_v_scrollbar = ttk.Scrollbar(metrics_frame, orient='vertical', command=self.metrics_tree.yview)
        metrics_h_scrollbar = ttk.Scrollbar(metrics_frame, orient='horizontal', command=self.metrics_tree.xview)
        self.metrics_tree.configure(yscrollcommand=metrics_v_scrollbar.set, xscrollcommand=metrics_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.metrics_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0))
        metrics_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        metrics_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, padx=(10, 10), pady=(5, 0))
    
    def _start_auto_update(self):
        """
        –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        def update_loop():
            while True:
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                    time.sleep(60)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    self.parent.after(0, self._auto_update)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        update_thread = threading.Thread(target=update_loop, daemon=True)
        update_thread.start()
    
    def _auto_update(self):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            if self.main_window.is_system_running():
                self.refresh_data()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    def _update_allocation_chart(self, chart_type: str):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
        
        Args:
            chart_type: –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ (pie, bar, treemap)
        """
        try:
            self.allocation_ax.clear()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            symbols = ['SBER', 'GAZP', 'LKOH', 'YNDX', 'MGNT', '–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞']
            values = [250000, 180000, 200000, 150000, 120000, 100000]
            colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD']
            
            if chart_type == "pie":
                wedges, texts, autotexts = self.allocation_ax.pie(
                    values, 
                    labels=symbols, 
                    colors=colors,
                    autopct='%1.1f%%',
                    startangle=90
                )
                
                # –£–ª—É—á—à–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
                for autotext in autotexts:
                    autotext.set_color('white')
                    autotext.set_fontweight('bold')
                
                self.allocation_ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ", fontsize=14, fontweight='bold')
                
            elif chart_type == "bar":
                bars = self.allocation_ax.bar(symbols, values, color=colors)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                for bar, value in zip(bars, values):
                    height = bar.get_height()
                    self.allocation_ax.text(bar.get_x() + bar.get_width()/2., height,
                                          f'{value:,.0f}‚ÇΩ',
                                          ha='center', va='bottom', fontweight='bold')
                
                self.allocation_ax.set_title("–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ", fontsize=14, fontweight='bold')
                self.allocation_ax.set_ylabel("–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)")
                plt.setp(self.allocation_ax.xaxis.get_majorticklabels(), rotation=45)
            
            self.allocation_figure.tight_layout()
            self.allocation_canvas.draw()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
    
    def _update_performance_chart(self, period: str):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            period: –ü–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            self.allocation_ax.clear()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if not self.performance_data:
                self._generate_performance_data()
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–µ—Ä–∏–æ–¥—É
            filtered_data = self._filter_performance_data(period)
            
            if filtered_data:
                dates = [item['date'] for item in filtered_data]
                portfolio_values = [item['portfolio_value'] for item in filtered_data]
                benchmark_values = [item['benchmark_value'] for item in filtered_data]
                
                self.performance_ax.plot(dates, portfolio_values, linewidth=2, color='blue', label='–ü–æ—Ä—Ç—Ñ–µ–ª—å')
                self.performance_ax.plot(dates, benchmark_values, linewidth=2, color='red', label='–ë–µ–Ω—á–º–∞—Ä–∫', linestyle='--')
                
                # –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É –∫—Ä–∏–≤—ã–º–∏
                self.performance_ax.fill_between(dates, portfolio_values, benchmark_values, 
                                               where=np.array(portfolio_values) >= np.array(benchmark_values),
                                               color='green', alpha=0.3, interpolate=True, label='–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ')
                self.performance_ax.fill_between(dates, portfolio_values, benchmark_values, 
                                               where=np.array(portfolio_values) < np.array(benchmark_values),
                                               color='red', alpha=0.3, interpolate=True, label='–û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ')
                
                self.performance_ax.set_title("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è", fontsize=14, fontweight='bold')
                self.performance_ax.set_xlabel("–î–∞—Ç–∞")
                self.performance_ax.set_ylabel("–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)")
                self.performance_ax.legend()
                self.performance_ax.grid(True, alpha=0.3)
                
                plt.setp(self.performance_ax.xaxis.get_majorticklabels(), rotation=45)
            
            self.performance_figure.tight_layout()
            self.performance_canvas.draw()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def _update_risk_chart(self, risk_type: str):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫–æ–≤
        
        Args:
            risk_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤
        """
        try:
            self.risk_ax.clear()
            
            if risk_type == "var":
                # –ì—Ä–∞—Ñ–∏–∫ Value at Risk
                symbols = ['SBER', 'GAZP', 'LKOH', 'YNDX', 'MGNT']
                var_95 = [12000, 8500, 15000, 18000, 9500]
                var_99 = [18000, 12500, 22000, 26000, 14000]
                
                x = np.arange(len(symbols))
                width = 0.35
                
                bars1 = self.risk_ax.bar(x - width/2, var_95, width, label='VaR 95%', color='orange', alpha=0.8)
                bars2 = self.risk_ax.bar(x + width/2, var_99, width, label='VaR 99%', color='red', alpha=0.8)
                
                self.risk_ax.set_title("Value at Risk –ø–æ –ø–æ–∑–∏—Ü–∏—è–º", fontsize=14, fontweight='bold')
                self.risk_ax.set_ylabel("VaR (‚ÇΩ)")
                self.risk_ax.set_xticks(x)
                self.risk_ax.set_xticklabels(symbols)
                self.risk_ax.legend()
                self.risk_ax.grid(True, alpha=0.3)
                
            elif risk_type == "correlation":
                # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
                symbols = ['SBER', 'GAZP', 'LKOH', 'YNDX', 'MGNT']
                correlation_matrix = np.random.rand(5, 5)
                correlation_matrix = (correlation_matrix + correlation_matrix.T) / 2
                np.fill_diagonal(correlation_matrix, 1)
                
                im = self.risk_ax.imshow(correlation_matrix, cmap='RdYlBu', aspect='auto')
                self.risk_ax.set_xticks(range(len(symbols)))
                self.risk_ax.set_yticks(range(len(symbols)))
                self.risk_ax.set_xticklabels(symbols)
                self.risk_ax.set_yticklabels(symbols)
                self.risk_ax.set_title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –∞–∫—Ç–∏–≤–æ–≤", fontsize=14, fontweight='bold')
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                for i in range(len(symbols)):
                    for j in range(len(symbols)):
                        text = self.risk_ax.text(j, i, f'{correlation_matrix[i, j]:.2f}',
                                               ha="center", va="center", color="black", fontweight='bold')
                
                plt.colorbar(im, ax=self.risk_ax)
                
            elif risk_type == "volatility":
                # –ì—Ä–∞—Ñ–∏–∫ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                symbols = ['SBER', 'GAZP', 'LKOH', 'YNDX', 'MGNT']
                volatility = [15.2, 18.7, 22.1, 28.5, 16.8]
                colors = ['green' if v < 20 else 'orange' if v < 25 else 'red' for v in volatility]
                
                bars = self.risk_ax.bar(symbols, volatility, color=colors, alpha=0.8)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                for bar, vol in zip(bars, volatility):
                    height = bar.get_height()
                    self.risk_ax.text(bar.get_x() + bar.get_width()/2., height,
                                    f'{vol:.1f}%',
                                    ha='center', va='bottom', fontweight='bold')
                
                self.risk_ax.set_title("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤ (–≥–æ–¥–æ–≤–∞—è)", fontsize=14, fontweight='bold')
                self.risk_ax.set_ylabel("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)")
                self.risk_ax.grid(True, alpha=0.3)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
                self.risk_ax.axhline(y=20, color='orange', linestyle='--', alpha=0.7, label='–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫')
                self.risk_ax.axhline(y=25, color='red', linestyle='--', alpha=0.7, label='–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫')
                self.risk_ax.legend()
            
            self.risk_figure.tight_layout()
            self.risk_canvas.draw()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∏—Å–∫–æ–≤: {e}")
    
    def _generate_performance_data(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            from datetime import timedelta
            
            base_date = datetime.now() - timedelta(days=30)
            base_portfolio_value = 1000000
            base_benchmark_value = 1000000
            
            self.performance_data = []
            
            for i in range(30):
                date = base_date + timedelta(days=i)
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                portfolio_change = np.random.normal(0.001, 0.02)  # –°—Ä–µ–¥–Ω–µ–µ 0.1% –≤ –¥–µ–Ω—å, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 2%
                benchmark_change = np.random.normal(0.0005, 0.015)  # –ë–µ–Ω—á–º–∞—Ä–∫ —á—É—Ç—å —Ö—É–∂–µ
                
                portfolio_value = base_portfolio_value * (1 + portfolio_change * (i + 1))
                benchmark_value = base_benchmark_value * (1 + benchmark_change * (i + 1))
                
                self.performance_data.append({
                    'date': date,
                    'portfolio_value': portfolio_value,
                    'benchmark_value': benchmark_value
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def _filter_performance_data(self, period: str) -> List[Dict]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–∏–æ–¥—É
        
        Args:
            period: –ü–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            if not self.performance_data or period == "ALL":
                return self.performance_data
            
            from datetime import timedelta
            now = datetime.now()
            
            if period == "1D":
                cutoff = now - timedelta(days=1)
            elif period == "1W":
                cutoff = now - timedelta(weeks=1)
            elif period == "1M":
                cutoff = now - timedelta(days=30)
            else:
                return self.performance_data
            
            return [item for item in self.performance_data if item['date'] >= cutoff]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return self.performance_data
    
    def _refresh_positions(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π
        """
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.positions_tree.get_children():
                self.positions_tree.delete(item)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            investment_system = self.main_window.get_investment_system()
            if investment_system and investment_system.portfolio_manager:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                pass
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_positions = [
                ("SBER", "100", "250.00", "255.00", "25,500", "+500", "+2.0%", "25.5%"),
                ("GAZP", "150", "180.00", "175.00", "26,250", "-750", "-2.8%", "26.3%"),
                ("LKOH", "10", "6500.00", "6600.00", "66,000", "+1,000", "+1.5%", "66.0%"),
                ("YNDX", "25", "3000.00", "3100.00", "77,500", "+2,500", "+3.3%", "77.5%"),
                ("MGNT", "50", "2400.00", "2350.00", "117,500", "-2,500", "-2.1%", "11.8%")
            ]
            
            for pos in test_positions:
                # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ P&L
                pnl_percent = float(pos[6].replace('%', '').replace('+', ''))
                if pnl_percent > 0:
                    tags = ('positive',)
                elif pnl_percent < 0:
                    tags = ('negative',)
                else:
                    tags = ('neutral',)
                
                item_id = self.positions_tree.insert('', 'end', values=pos, tags=tags)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
            self.positions_tree.tag_configure('positive', foreground='green')
            self.positions_tree.tag_configure('negative', foreground='red')
            self.positions_tree.tag_configure('neutral', foreground='gray')
            
            logger.debug("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    def _apply_transaction_filter(self):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
        """
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.transactions_tree.get_children():
                self.transactions_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_transactions = [
                ("2024-01-15", "SBER", "–ü–æ–∫—É–ø–∫–∞", "50", "250.00", "12,500", "6.25", "987,493.75"),
                ("2024-01-14", "GAZP", "–ü—Ä–æ–¥–∞–∂–∞", "25", "180.00", "4,500", "2.25", "999,997.75"),
                ("2024-01-13", "LKOH", "–ü–æ–∫—É–ø–∫–∞", "5", "6500.00", "32,500", "16.25", "995,499.75"),
                ("2024-01-12", "YNDX", "–ü–æ–∫—É–ø–∫–∞", "10", "3000.00", "30,000", "15.00", "1,028,015.00"),
                ("2024-01-11", "MGNT", "–ü–æ–∫—É–ø–∫–∞", "20", "2400.00", "48,000", "24.00", "1,058,039.00")
            ]
            
            for trans in test_transactions:
                self.transactions_tree.insert('', 'end', values=trans)
                
            logger.debug("–§–∏–ª—å—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
    
    def _show_positions_context_menu(self, event):
        """
        –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
        """
        try:
            self.positions_context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    def _on_position_double_click(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
        """
        try:
            selection = self.positions_tree.selection()
            if selection:
                item = self.positions_tree.item(selection[0])
                values = item['values']
                self._show_position_details(values[0])  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∏–º–≤–æ–ª
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")
    
    def _show_position_details(self, symbol: str):
        """
        –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            details = f"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏ {symbol}:

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 100 –∞–∫—Ü–∏–π
–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: 250.00 ‚ÇΩ
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 255.00 ‚ÇΩ
–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 25,500 ‚ÇΩ
–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: +500 ‚ÇΩ (+2.0%)

–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–∏: 2024-01-10
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: 3
–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: 15.75 ‚ÇΩ

–î–∏–≤–∏–¥–µ–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–æ: 150 ‚ÇΩ
–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å –¥–∏–≤–∏–¥–µ–Ω–¥–∞–º–∏: +2.6%
            """
            messagebox.showinfo(f"–ü–æ–∑–∏—Ü–∏—è {symbol}", details)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    def _increase_position(self):
        """
        –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        """
        selection = self.positions_tree.selection()
        if selection:
            item = self.positions_tree.item(selection[0])
            symbol = item['values'][0]
            messagebox.showinfo("–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏", f"–§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _decrease_position(self):
        """
        –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        """
        selection = self.positions_tree.selection()
        if selection:
            item = self.positions_tree.item(selection[0])
            symbol = item['values'][0]
            messagebox.showinfo("–£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏", f"–§—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {symbol} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _close_position(self):
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        """
        selection = self.positions_tree.selection()
        if selection:
            item = self.positions_tree.item(selection[0])
            symbol = item['values'][0]
            result = messagebox.askyesno("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏", f"–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ {symbol}?")
            if result:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} –∑–∞–∫—Ä—ã—Ç–∞")
    
    def _analyze_position(self):
        """
        –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏
        """
        selection = self.positions_tree.selection()
        if selection:
            item = self.positions_tree.item(selection[0])
            symbol = item['values'][0]
            messagebox.showinfo("–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏", f"–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–∏ {symbol} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_position_history(self):
        """
        –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        """
        selection = self.positions_tree.selection()
        if selection:
            item = self.positions_tree.item(selection[0])
            symbol = item['values'][0]
            messagebox.showinfo("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∑–∏—Ü–∏–∏", f"–§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_rebalancing(self):
        """
        –ü–æ–∫–∞–∑ –æ–∫–Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        """
        messagebox.showinfo("–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞", "–§—É–Ω–∫—Ü–∏—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_analysis(self):
        """
        –ü–æ–∫–∞–∑ –æ–∫–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        """
        messagebox.showinfo("–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è", "–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def update_data(self, portfolio_data: Dict[str, Any]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
        Args:
            portfolio_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        """
        try:
            self.portfolio_data = portfolio_data
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            if 'total_value' in portfolio_data:
                if hasattr(self, 'portfolio_metric_–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å'):
                    self.portfolio_metric_–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å.config(text=f"{portfolio_data['total_value']:,.0f} ‚ÇΩ")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            self._refresh_positions()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    def refresh_data(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏
        """
        try:
            logger.debug("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            self._refresh_positions()
            self._apply_transaction_filter()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            self._update_allocation_chart("pie")
            self._update_performance_chart("1W")
            self._update_risk_chart("var")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
