#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ GUI –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
–û—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import queue
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import pandas as pd
import numpy as np
from loguru import logger
import yaml
import requests
import time

class InvestmentGUI:
    """
    –ì–ª–∞–≤–Ω–æ–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    """
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–°–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - GUI")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f0f0f0')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.setup_styles()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.system_status = "–û—Ç–∫–ª—é—á–µ–Ω–∞"
        self.portfolio_value = 1000000
        self.current_positions = {}
        self.trading_signals = []
        self.system_logs = []
        
        # –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.data_queue = queue.Queue()
        self.log_queue = queue.Queue()
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π
        self.investment_system = None
        self.system_process = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        self.check_system_status()
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_data()
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'), background='#f0f0f0')
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'), background='#f0f0f0')
        style.configure('Status.TLabel', font=('Arial', 10), background='#f0f0f0')
        
        # –ö–Ω–æ–ø–∫–∏
        style.configure('Start.TButton', background='#4CAF50', foreground='white')
        style.configure('Stop.TButton', background='#f44336', foreground='white')
        style.configure('Config.TButton', background='#2196F3', foreground='white')
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.create_menu()
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        self.create_status_panel()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        self.create_notebook()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_panel()
        
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.load_config)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.save_config)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ú–µ–Ω—é "–°–∏—Å—Ç–µ–º–∞"
        system_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–∏—Å—Ç–µ–º–∞", menu=system_menu)
        system_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", command=self.start_system)
        system_menu.add_command(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", command=self.stop_system)
        system_menu.add_command(label="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", command=self.restart_system)
        
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        help_menu.add_command(label="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", command=self.show_docs)
        
    def create_status_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        status_frame = ttk.Frame(self.root)
        status_frame.pack(fill='x', padx=10, pady=5)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:", style='Header.TLabel').pack(side='left')
        self.status_label = ttk.Label(status_frame, text="–û—Ç–∫–ª—é—á–µ–Ω–∞", style='Status.TLabel')
        self.status_label.pack(side='left', padx=(10, 20))
        
        # –ö–∞–ø–∏—Ç–∞–ª
        ttk.Label(status_frame, text="–ö–∞–ø–∏—Ç–∞–ª:", style='Header.TLabel').pack(side='left')
        self.capital_label = ttk.Label(status_frame, text="1,000,000 ‚ÇΩ", style='Status.TLabel')
        self.capital_label.pack(side='left', padx=(10, 20))
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        ttk.Label(status_frame, text="–û–±–Ω–æ–≤–ª–µ–Ω–æ:", style='Header.TLabel').pack(side='left')
        self.update_label = ttk.Label(status_frame, text="--:--:--", style='Status.TLabel')
        self.update_label.pack(side='left', padx=(10, 0))
        
    def create_notebook(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫"""
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ "–î–∞—à–±–æ—Ä–¥"
        self.create_dashboard_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ—Ä—Ç—Ñ–µ–ª—å"
        self.create_portfolio_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–æ—Ä–≥–æ–≤–ª—è"
        self.create_trading_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        self.create_analytics_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–õ–æ–≥–∏"
        self.create_logs_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        self.create_settings_tab()
        
    def create_dashboard_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
        dashboard_frame = ttk.Frame(self.notebook)
        self.notebook.add(dashboard_frame, text="üìä –î–∞—à–±–æ—Ä–¥")
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞—Ñ–∏–∫–∏
        left_frame = ttk.Frame(dashboard_frame)
        left_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_frame = ttk.LabelFrame(left_frame, text="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        portfolio_frame.pack(fill='both', expand=True, pady=(0, 5))
        
        self.portfolio_fig = Figure(figsize=(8, 4), dpi=100)
        self.portfolio_ax = self.portfolio_fig.add_subplot(111)
        self.portfolio_canvas = FigureCanvasTkAgg(self.portfolio_fig, portfolio_frame)
        self.portfolio_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_frame = ttk.LabelFrame(left_frame, text="–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        signals_frame.pack(fill='both', expand=True)
        
        self.signals_fig = Figure(figsize=(8, 3), dpi=100)
        self.signals_ax = self.signals_fig.add_subplot(111)
        self.signals_canvas = FigureCanvasTkAgg(self.signals_fig, signals_frame)
        self.signals_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –º–µ—Ç—Ä–∏–∫–∏
        right_frame = ttk.Frame(dashboard_frame)
        right_frame.pack(side='right', fill='y', padx=(5, 0))
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_frame = ttk.LabelFrame(right_frame, text="–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        metrics_frame.pack(fill='x', pady=(0, 10))
        
        self.create_metrics_widgets(metrics_frame)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        positions_frame = ttk.LabelFrame(right_frame, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        positions_frame.pack(fill='both', expand=True)
        
        self.positions_tree = ttk.Treeview(positions_frame, columns=('Symbol', 'Quantity', 'Price', 'Value'), show='headings')
        self.positions_tree.heading('Symbol', text='–°–∏–º–≤–æ–ª')
        self.positions_tree.heading('Quantity', text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        self.positions_tree.heading('Price', text='–¶–µ–Ω–∞')
        self.positions_tree.heading('Value', text='–°—Ç–æ–∏–º–æ—Å—Ç—å')
        self.positions_tree.pack(fill='both', expand=True)
        
    def create_portfolio_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_frame = ttk.Frame(self.notebook)
        self.notebook.add(portfolio_frame, text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
        allocation_frame = ttk.LabelFrame(portfolio_frame, text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤")
        allocation_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.allocation_fig = Figure(figsize=(10, 6), dpi=100)
        self.allocation_ax = self.allocation_fig.add_subplot(111)
        self.allocation_canvas = FigureCanvasTkAgg(self.allocation_fig, allocation_frame)
        self.allocation_canvas.get_tk_widget().pack(fill='both', expand=True)
        
    def create_trading_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        trading_frame = ttk.Frame(self.notebook)
        self.notebook.add(trading_frame, text="üìà –¢–æ—Ä–≥–æ–≤–ª—è")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        control_frame = ttk.LabelFrame(trading_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π")
        control_frame.pack(fill='x', padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", 
                  command=self.start_trading, style='Start.TButton').pack(side='left', padx=5)
        ttk.Button(control_frame, text="üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", 
                  command=self.stop_trading, style='Stop.TButton').pack(side='left', padx=5)
        ttk.Button(control_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.open_trading_settings, style='Config.TButton').pack(side='left', padx=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_frame = ttk.LabelFrame(trading_frame, text="–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        signals_frame.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        self.signals_tree = ttk.Treeview(signals_frame, columns=('Time', 'Symbol', 'Signal', 'Confidence', 'Action'), show='headings')
        self.signals_tree.heading('Time', text='–í—Ä–µ–º—è')
        self.signals_tree.heading('Symbol', text='–°–∏–º–≤–æ–ª')
        self.signals_tree.heading('Signal', text='–°–∏–≥–Ω–∞–ª')
        self.signals_tree.heading('Confidence', text='–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        self.signals_tree.heading('Action', text='–î–µ–π—Å—Ç–≤–∏–µ')
        self.signals_tree.pack(fill='both', expand=True)
        
    def create_analytics_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_frame = ttk.Frame(self.notebook)
        self.notebook.add(analytics_frame, text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_frame = ttk.LabelFrame(analytics_frame, text="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        performance_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.performance_fig = Figure(figsize=(12, 8), dpi=100)
        self.performance_ax = self.performance_fig.add_subplot(111)
        self.performance_canvas = FigureCanvasTkAgg(self.performance_fig, performance_frame)
        self.performance_canvas.get_tk_widget().pack(fill='both', expand=True)
        
    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="üìù –õ–æ–≥–∏")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        log_control_frame = ttk.Frame(logs_frame)
        log_control_frame.pack(fill='x', padx=10, pady=5)
        
        ttk.Button(log_control_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_logs).pack(side='left', padx=5)
        ttk.Button(log_control_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_logs).pack(side='left', padx=5)
        ttk.Button(log_control_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_logs).pack(side='left', padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        log_frame = ttk.LabelFrame(logs_frame, text="–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
        log_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.log_text = tk.Text(log_frame, height=20, wrap='word')
        log_scrollbar = ttk.Scrollbar(log_frame, orient='vertical', command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=log_scrollbar.set)
        
        self.log_text.pack(side='left', fill='both', expand=True)
        log_scrollbar.pack(side='right', fill='y')
        
    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        system_frame = ttk.LabelFrame(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        system_frame.pack(fill='x', padx=10, pady=10)
        
        # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ttk.Label(system_frame, text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.config_var = tk.StringVar(value="config/main.yaml")
        config_combo = ttk.Combobox(system_frame, textvariable=self.config_var, width=30)
        config_combo['values'] = [
            "config/main.yaml",
            "config/aggressive_trading.yaml", 
            "config/conservative_investing.yaml",
            "config/test_config.yaml"
        ]
        config_combo.grid(row=0, column=1, sticky='ew', padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        api_frame = ttk.LabelFrame(settings_frame, text="API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        api_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Label(api_frame, text="DeepSeek API:").grid(row=0, column=0, sticky='w', padx=5, pady=5)
        self.deepseek_var = tk.StringVar()
        ttk.Entry(api_frame, textvariable=self.deepseek_var, show="*", width=40).grid(row=0, column=1, sticky='ew', padx=5, pady=5)
        
        ttk.Label(api_frame, text="Tinkoff API:").grid(row=1, column=0, sticky='w', padx=5, pady=5)
        self.tinkoff_var = tk.StringVar()
        ttk.Entry(api_frame, textvariable=self.tinkoff_var, show="*", width=40).grid(row=1, column=1, sticky='ew', padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(settings_frame)
        button_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.save_settings).pack(side='left', padx=5)
        ttk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.load_settings).pack(side='left', padx=5)
        ttk.Button(button_frame, text="–°–±—Ä–æ—Å–∏—Ç—å", command=self.reset_settings).pack(side='left', padx=5)
        
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
        ttk.Button(control_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", 
                  command=self.start_system, style='Start.TButton').pack(side='left', padx=5)
        ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", 
                  command=self.stop_system, style='Stop.TButton').pack(side='left', padx=5)
        ttk.Button(control_frame, text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", 
                  command=self.restart_system).pack(side='left', padx=5)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.status_indicator = tk.Canvas(control_frame, width=20, height=20, bg='red')
        self.status_indicator.pack(side='right', padx=10)
        
    def create_metrics_widgets(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –º–µ—Ç—Ä–∏–∫"""
        # –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        ttk.Label(parent, text="–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:").grid(row=0, column=0, sticky='w', padx=5, pady=2)
        self.return_label = ttk.Label(parent, text="+0.00%", style='Status.TLabel')
        self.return_label.grid(row=0, column=1, sticky='e', padx=5, pady=2)
        
        # –î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        ttk.Label(parent, text="–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:").grid(row=1, column=0, sticky='w', padx=5, pady=2)
        self.daily_return_label = ttk.Label(parent, text="+0.00%", style='Status.TLabel')
        self.daily_return_label.grid(row=1, column=1, sticky='e', padx=5, pady=2)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
        ttk.Label(parent, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:").grid(row=2, column=0, sticky='w', padx=5, pady=2)
        self.positions_count_label = ttk.Label(parent, text="0", style='Status.TLabel')
        self.positions_count_label.grid(row=2, column=1, sticky='e', padx=5, pady=2)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        ttk.Label(parent, text="–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª:").grid(row=3, column=0, sticky='w', padx=5, pady=2)
        self.last_signal_label = ttk.Label(parent, text="–ù–µ—Ç", style='Status.TLabel')
        self.last_signal_label.grid(row=3, column=1, sticky='e', padx=5, pady=2)
        
    def update_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–∞–Ω–Ω—ã—Ö
            while not self.data_queue.empty():
                data = self.data_queue.get_nowait()
                self.process_data_update(data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ª–æ–≥–æ–≤
            while not self.log_queue.empty():
                log_entry = self.log_queue.get_nowait()
                self.add_log_entry(log_entry)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            current_time = datetime.now().strftime("%H:%M:%S")
            self.update_label.config(text=current_time)
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
            if hasattr(self, '_last_status_check'):
                if time.time() - self._last_status_check > 10:
                    self.check_system_status()
                    self.load_system_data()
                    self._last_status_check = time.time()
            else:
                self._last_status_check = time.time()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if self.system_status == "–ó–∞–ø—É—â–µ–Ω–∞":
                self.update_real_data()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            self.update_charts()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.root.after(1000, self.update_data)
        
    def process_data_update(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if 'portfolio_value' in data:
            self.portfolio_value = data['portfolio_value']
            self.capital_label.config(text=f"{self.portfolio_value:,.0f} ‚ÇΩ")
            
        if 'positions' in data:
            self.current_positions = data['positions']
            self.update_positions_table()
            
        if 'signals' in data:
            self.trading_signals = data['signals']
            self.update_signals_table()
            
    def update_positions_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.positions_tree.get_children():
            self.positions_tree.delete(item)
            
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
        for symbol, position in self.current_positions.items():
            self.positions_tree.insert('', 'end', values=(
                symbol,
                position.get('quantity', 0),
                f"{position.get('price', 0):.2f}",
                f"{position.get('value', 0):,.0f}"
            ))
            
    def update_signals_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.signals_tree.get_children():
            self.signals_tree.delete(item)
            
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        for signal in self.trading_signals[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
            self.signals_tree.insert('', 'end', values=(
                signal.get('time', ''),
                signal.get('symbol', ''),
                signal.get('signal', ''),
                f"{signal.get('confidence', 0):.1%}",
                signal.get('action', '')
            ))
            
    def update_charts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self.update_portfolio_chart()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.update_signals_chart()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        self.update_allocation_chart()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.update_performance_chart()
        
    def update_portfolio_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        self.portfolio_ax.clear()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if not hasattr(self, 'portfolio_history'):
                self.portfolio_history = []
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            current_time = datetime.now()
            self.portfolio_history.append({
                'time': current_time,
                'value': self.portfolio_value
            })
            
            # –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cutoff_time = current_time - timedelta(hours=24)
            self.portfolio_history = [
                item for item in self.portfolio_history 
                if item['time'] > cutoff_time
            ]
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            if len(self.portfolio_history) > 1:
                times = [item['time'] for item in self.portfolio_history]
                values = [item['value'] for item in self.portfolio_history]
                
                self.portfolio_ax.plot(times, values, linewidth=2, color='blue')
            else:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self.portfolio_ax.axhline(y=self.portfolio_value, color='blue', linewidth=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        
        self.portfolio_ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (24 —á–∞—Å–∞)')
        self.portfolio_ax.set_ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)')
        self.portfolio_ax.grid(True, alpha=0.3)
        
        self.portfolio_canvas.draw()
        
    def update_signals_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.signals_ax.clear()
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        try:
            if self.trading_signals and len(self.trading_signals) > 0:
                colors = {'BUY': 'green', 'SELL': 'red', 'HOLD': 'gray'}
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for i, signal in enumerate(self.trading_signals[-20:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal_type = signal.get('signal', 'HOLD')
                    if signal_type != 'HOLD':
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                        self.signals_ax.scatter(i, i, c=colors.get(signal_type, 'gray'), 
                                              s=100, alpha=0.7, label=signal_type)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
                if len(self.trading_signals) > 0:
                    self.signals_ax.legend()
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.signals_ax.text(0.5, 0.5, '–ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤', 
                                   ha='center', va='center', transform=self.signals_ax.transAxes)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        self.signals_ax.set_title('–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)')
        self.signals_ax.set_ylabel('–ò–Ω–¥–µ–∫—Å —Å–∏–≥–Ω–∞–ª–∞')
        self.signals_ax.grid(True, alpha=0.3)
        
        self.signals_canvas.draw()
        
    def update_allocation_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        self.allocation_ax.clear()
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        try:
            if self.current_positions and len(self.current_positions) > 0:
                # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–π
                labels = []
                sizes = []
                
                total_invested = sum(pos.get('value', 0) for pos in self.current_positions.values())
                
                for symbol, position in self.current_positions.items():
                    value = position.get('value', 0)
                    if value > 0:
                        labels.append(symbol)
                        sizes.append(value)
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö
                cash = self.portfolio_value - total_invested
                if cash > 0:
                    labels.append('–ù–∞–ª–∏—á–Ω—ã–µ')
                    sizes.append(cash)
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
                colors = plt.cm.Set3(np.linspace(0, 1, len(labels)))
                
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
                if sizes:
                    self.allocation_ax.pie(sizes, labels=labels, colors=colors, 
                                          autopct='%1.1f%%', startangle=90)
                else:
                    self.allocation_ax.text(0.5, 0.5, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π', 
                                          ha='center', va='center', 
                                          transform=self.allocation_ax.transAxes)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100% –Ω–∞–ª–∏—á–Ω—ã—Ö
                self.allocation_ax.pie([100], labels=['–ù–∞–ª–∏—á–Ω—ã–µ'], colors=['#ffcc99'], 
                                      autopct='%1.1f%%', startangle=90)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        
        self.allocation_ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤')
        self.allocation_canvas.draw()
    
    def update_performance_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            self.performance_ax.clear()
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            if hasattr(self, 'portfolio_history') and len(self.portfolio_history) > 1:
                times = [item['time'] for item in self.portfolio_history]
                values = [item['value'] for item in self.portfolio_history]
                
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                self.performance_ax.plot(times, values, linewidth=2, color='blue', label='–ü–æ—Ä—Ç—Ñ–µ–ª—å')
                
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–µ–Ω—á–º–∞—Ä–∫–∞ (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
                initial_value = self.portfolio_history[0]['value'] if self.portfolio_history else 1000000
                benchmark = [initial_value] * len(times)
                self.performance_ax.plot(times, benchmark, linewidth=2, color='gray', 
                                       linestyle='--', label='–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
                
                # –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏
                values_array = np.array(values)
                benchmark_array = np.array(benchmark)
                
                self.performance_ax.fill_between(times, values_array, benchmark_array,
                                                where=values_array >= benchmark_array,
                                                color='green', alpha=0.3, label='–ü—Ä–∏–±—ã–ª—å')
                self.performance_ax.fill_between(times, values_array, benchmark_array,
                                                where=values_array < benchmark_array,
                                                color='red', alpha=0.3, label='–£–±—ã—Ç–æ–∫')
                
                self.performance_ax.legend(loc='best')
                self.performance_ax.set_title('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è')
                self.performance_ax.set_ylabel('–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)')
                self.performance_ax.set_xlabel('–í—Ä–µ–º—è')
                self.performance_ax.grid(True, alpha=0.3)
            else:
                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                self.performance_ax.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n–°–∏—Å—Ç–µ–º–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ...', 
                                       ha='center', va='center', transform=self.performance_ax.transAxes,
                                       fontsize=14)
                self.performance_ax.set_title('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è')
            
            self.performance_canvas.draw()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        
    def add_log_entry(self, log_entry):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥"""
        self.log_text.insert(tk.END, f"{log_entry}\n")
        self.log_text.see(tk.END)
        
    def start_system(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        self.system_status = "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
        self.status_label.config(text="–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
        self.status_indicator.config(bg='yellow')
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        messagebox.showinfo("–°–∏—Å—Ç–µ–º–∞", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        
    def stop_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.system_status = "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        self.status_label.config(text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.status_indicator.config(bg='red')
        
        messagebox.showinfo("–°–∏—Å—Ç–µ–º–∞", "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        
    def restart_system(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        self.stop_system()
        self.root.after(2000, self.start_system)
        
    def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è", "–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞!")
        
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è", "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        
    def open_trading_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            filetypes=[("YAML files", "*.yaml"), ("All files", "*.*")]
        )
        if file_path:
            self.config_var.set(file_path)
            messagebox.showinfo("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {file_path}")
            
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        messagebox.showinfo("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        
    def refresh_logs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        log_file = Path("logs/neural_networks.log")
        if log_file.exists():
            with open(log_file, 'r', encoding='utf-8') as f:
                logs = f.readlines()[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                self.log_text.delete(1.0, tk.END)
                for log in logs:
                    self.log_text.insert(tk.END, log)
                    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_text.delete(1.0, tk.END)
        
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(self.log_text.get(1.0, tk.END))
            messagebox.showinfo("–õ–æ–≥–∏", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_path}")
            
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.config_var.set("config/main.yaml")
        self.deepseek_var.set("")
        self.tinkoff_var.set("")
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        
    def show_about(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
–°–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π v2.0

GUI –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
—Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
        
    def show_docs(self):
        """–ü–æ–∫–∞–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        messagebox.showinfo("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–∞–ø–∫–µ docs/")
    
    def check_system_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å—ã
            import psutil
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] == 'python.exe' or proc.info['name'] == 'python':
                        cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                        if 'run.py' in cmdline or 'investment_system' in cmdline:
                            python_processes.append(proc)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if python_processes:
                self.system_status = "–ó–∞–ø—É—â–µ–Ω–∞"
                self.status_label.config(text="–ó–∞–ø—É—â–µ–Ω–∞")
                self.status_indicator.config(bg='green')
                logger.info("–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞")
            else:
                self.system_status = "–û—Ç–∫–ª—é—á–µ–Ω–∞"
                self.status_label.config(text="–û—Ç–∫–ª—é—á–µ–Ω–∞")
                self.status_indicator.config(bg='red')
                logger.info("–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
                
        except ImportError:
            # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            self.check_system_status_alternative()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.system_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            self.status_label.config(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            self.status_indicator.config(bg='yellow')
    
    def check_system_status_alternative(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
            log_file = Path("logs/neural_networks.log")
            if log_file.exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
                last_modified = log_file.stat().st_mtime
                current_time = time.time()
                
                # –ï—Å–ª–∏ –ª–æ–≥ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
                if current_time - last_modified < 300:  # 5 –º–∏–Ω—É—Ç
                    self.system_status = "–ó–∞–ø—É—â–µ–Ω–∞"
                    self.status_label.config(text="–ó–∞–ø—É—â–µ–Ω–∞")
                    self.status_indicator.config(bg='green')
                else:
                    self.system_status = "–û—Ç–∫–ª—é—á–µ–Ω–∞"
                    self.status_label.config(text="–û—Ç–∫–ª—é—á–µ–Ω–∞")
                    self.status_indicator.config(bg='red')
            else:
                self.system_status = "–û—Ç–∫–ª—é—á–µ–Ω–∞"
                self.status_label.config(text="–û—Ç–∫–ª—é—á–µ–Ω–∞")
                self.status_indicator.config(bg='red')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.system_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            self.status_label.config(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            self.status_indicator.config(bg='yellow')
    
    def load_system_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
            self.load_data_from_logs()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–∑ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            portfolio_file = Path("data/portfolio.json")
            if portfolio_file.exists():
                with open(portfolio_file, 'r', encoding='utf-8') as f:
                    portfolio_data = json.load(f)
                    self.portfolio_value = portfolio_data.get('total_value', 1000000)
                    self.current_positions = portfolio_data.get('positions', {})
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            signals_file = Path("data/signals.json")
            if signals_file.exists():
                with open(signals_file, 'r', encoding='utf-8') as f:
                    self.trading_signals = json.load(f)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.capital_label.config(text=f"{self.portfolio_value:,.0f} ‚ÇΩ")
            self.update_positions_table()
            self.update_signals_table()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def load_data_from_logs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            log_file = Path("logs/neural_networks.log")
            if log_file.exists():
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    
                # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
                recent_lines = lines[-50:] if len(lines) > 50 else lines
                
                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏ —Å–∏–≥–Ω–∞–ª–∞—Ö
                for line in recent_lines:
                    if "–ø–æ—Ä—Ç—Ñ–µ–ª—å" in line.lower() or "portfolio" in line.lower():
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–∑ –ª–æ–≥–æ–≤
                        self.extract_portfolio_from_log(line)
                    elif "—Å–∏–≥–Ω–∞–ª" in line.lower() or "signal" in line.lower():
                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –ª–æ–≥–æ–≤
                        self.extract_signal_from_log(line)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤: {e}")
    
    def extract_portfolio_from_log(self, log_line: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–∑ –ª–æ–≥–∞"""
        try:
            # –ü–æ–∏—Å–∫ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö
            import re
            numbers = re.findall(r'\d+\.?\d*', log_line)
            if numbers:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
                value = float(numbers[0]) if numbers else 1000000
                if value > 100000:  # –†–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
                    self.portfolio_value = value
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
    
    def extract_signal_from_log(self, log_line: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ –ª–æ–≥–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∞
            current_time = datetime.now().strftime("%H:%M:%S")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ª–æ–≥–∞
            if "buy" in log_line.lower() or "–ø–æ–∫—É–ø–∫–∞" in log_line.lower():
                signal_type = "BUY"
            elif "sell" in log_line.lower() or "–ø—Ä–æ–¥–∞–∂–∞" in log_line.lower():
                signal_type = "SELL"
            else:
                signal_type = "HOLD"
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            signal = {
                'time': current_time,
                'symbol': 'SBER',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'signal': signal_type,
                'confidence': 0.75,
                'action': f'–ê–Ω–∞–ª–∏–∑: {signal_type}'
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20)
            self.trading_signals.append(signal)
            if len(self.trading_signals) > 20:
                self.trading_signals = self.trading_signals[-20:]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
    
    def update_real_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            if not hasattr(self, '_update_counter'):
                self._update_counter = 0
            
            self._update_counter += 1
            
            # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            if self._update_counter % 5 == 0:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–≥–æ–≤
                self.load_system_data()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                self.update_metrics()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def update_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if self.portfolio_value > 0:
                total_return = ((self.portfolio_value - 1000000) / 1000000) * 100
                self.return_label.config(text=f"{total_return:+.2f}%")
                
                # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                if total_return > 0:
                    self.return_label.config(foreground='green')
                elif total_return < 0:
                    self.return_label.config(foreground='red')
                else:
                    self.return_label.config(foreground='black')
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
            positions_count = len(self.current_positions)
            self.positions_count_label.config(text=str(positions_count))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            if self.trading_signals:
                last_signal = self.trading_signals[-1]
                signal_text = f"{last_signal['signal']} ({last_signal['symbol']})"
                self.last_signal_label.config(text=signal_text)
                
                # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
                if last_signal['signal'] == 'BUY':
                    self.last_signal_label.config(foreground='green')
                elif last_signal['signal'] == 'SELL':
                    self.last_signal_label.config(foreground='red')
                else:
                    self.last_signal_label.config(foreground='black')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = InvestmentGUI()
        app.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")

if __name__ == "__main__":
    main()
