// Vue.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Neyro-Invest

const { createApp } = Vue;

createApp({
    data() {
        return {
            // –¢–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞
            currentTab: 'dashboard',
            
            // –í–∫–ª–∞–¥–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            tabs: [
                { id: 'dashboard', name: '–î–∞—à–±–æ—Ä–¥', icon: 'üìä' },
                { id: 'trading', name: '–¢–æ—Ä–≥–æ–≤–ª—è', icon: '‚ö°' },
                { id: 'portfolio', name: '–ü–æ—Ä—Ç—Ñ–µ–ª—å', icon: 'üíº' },
                { id: 'config', name: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', icon: '‚öôÔ∏è' },
                { id: 'logs', name: '–õ–æ–≥–∏', icon: 'üìù' }
            ],
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            systemRunning: false,
            lastUpdate: new Date().toISOString(),
            
            // –î–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio: {
                total_value: 1000000,
                cash_balance: 100000,
                invested_value: 900000,
                total_pnl: 0,
                total_pnl_percent: 0,
                positions_count: 0,
                positions: [],
                last_update: new Date().toISOString()
            },
            
            // –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            signals: [],
            
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config: {
                tbank_token: '',
                sandbox: true,
                initial_capital: 1000000,
                signal_threshold: 0.7,
                symbols_text: 'SBER, GAZP, LKOH, YNDX, GMKN'
            },
            
            // –õ–æ–≥–∏
            logs: [],
            autoRefreshLogs: false,
            
            // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connectionStatus: null,
            
            // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            showTokenModal: false,
            
            // WebSocket
            ws: null,
            reconnectInterval: null
        };
    },
    
    mounted() {
        console.log('üöÄ Neyro-Invest Web GUI –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        this.loadSystemStatus();
        this.loadPortfolio();
        this.loadSignals();
        this.loadConfig();
        this.loadTbankToken();
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
        this.connectWebSocket();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        this.$nextTick(() => {
            this.initCharts();
        });
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        setInterval(() => {
            this.lastUpdate = new Date().toISOString();
            this.loadSystemStatus(); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            if (this.autoRefreshLogs) {
                this.loadLogs();
            }
        }, 5000);
    },
    
    beforeUnmount() {
        if (this.ws) {
            this.ws.close();
        }
        if (this.reconnectInterval) {
            clearInterval(this.reconnectInterval);
        }
    },
    
    methods: {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        switchTab(tabId) {
            console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabId);
            this.currentTab = tabId;
        },
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        formatCurrency(value) {
            if (value === null || value === undefined || isNaN(value) || value === '–Ω–µ —á–∏—Å–ª–æ') {
                return '0 ‚ÇΩ';
            }
            return new Intl.NumberFormat('ru-RU', {
                style: 'currency',
                currency: 'RUB',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(Number(value));
        },
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        formatTime(timestamp) {
            if (!timestamp) return '-';
            const date = new Date(timestamp);
            return date.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∂–∏–º–∞ –¥–∞–Ω–Ω—ã—Ö
        getModeText(mode) {
            const modes = {
                'real': 'T-Bank API',
                'system': '–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
                'file': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
                'demo': '–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ'
            };
            return modes[mode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ CSS –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞
        getModeClass(mode) {
            const classes = {
                'real': 'positive',
                'system': 'positive',
                'file': 'warning',
                'demo': 'negative'
            };
            return classes[mode] || '';
        },
        
        // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws`;
            
            try {
                this.ws = new WebSocket(wsUrl);
                
                this.ws.onopen = () => {
                    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                    if (this.reconnectInterval) {
                        clearInterval(this.reconnectInterval);
                        this.reconnectInterval = null;
                    }
                };
                
                this.ws.onmessage = (event) => {
                    const message = JSON.parse(event.data);
                    this.handleWebSocketMessage(message);
                };
                
                this.ws.onerror = (error) => {
                    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                };
                
                this.ws.onclose = () => {
                    console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
                    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                    if (!this.reconnectInterval) {
                        this.reconnectInterval = setInterval(() => {
                            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                            this.connectWebSocket();
                        }, 5000);
                    }
                };
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            }
        },
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
        handleWebSocketMessage(message) {
            console.log('üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            
            switch (message.type) {
                case 'portfolio_update':
                    this.portfolio = { ...this.portfolio, ...message.data };
                    console.log('üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket');
                    this.$nextTick(() => {
                        this.updateCharts();
                    });
                    break;
                    
                case 'system_status':
                    const wasRunning = this.systemRunning;
                    this.systemRunning = message.data.is_running;
                    if (wasRunning !== this.systemRunning) {
                        console.log('üîÑ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω:', this.systemRunning ? '–ó–∞–ø—É—â–µ–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                    }
                    break;
                    
                case 'signals_update':
                    if (message.data && message.data.length > 0) {
                        this.signals = message.data;
                        console.log('üì° –°–∏–≥–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket:', message.data.length);
                    }
                    break;
                    
                case 'new_signal':
                    this.signals.unshift(message.data);
                    if (this.signals.length > 50) {
                        this.signals = this.signals.slice(0, 50);
                    }
                    console.log('üÜï –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:', message.data);
                    break;
                    
                case 'pong':
                    // –û—Ç–≤–µ—Ç –Ω–∞ ping
                    break;
                    
                default:
                    console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
            }
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        async loadSystemStatus() {
            try {
                const response = await fetch('/api/system/status');
                if (response.ok) {
                    const data = await response.json();
                    this.systemRunning = data.is_running;
                    console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:', data.is_running ? '–ó–∞–ø—É—â–µ–Ω–∞' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            }
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        async loadPortfolio() {
            try {
                const response = await fetch('/api/portfolio');
                if (response.ok) {
                    const data = await response.json();
                    
                    // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    const cleanData = {
                        total_value: Number(data.total_value) || 0,
                        cash_balance: Number(data.cash_balance) || 0,
                        invested_value: Number(data.invested_value) || 0,
                        total_pnl: Number(data.total_pnl) || 0,
                        total_pnl_percent: Number(data.total_pnl_percent) || 0,
                        positions_count: Number(data.positions_count) || 0,
                        positions: Array.isArray(data.positions) ? data.positions.map(pos => ({
                            ...pos,
                            quantity: Number(pos.quantity) || 0,
                            avg_price: Number(pos.avg_price) || 0,
                            current_price: Number(pos.current_price) || 0,
                            value: Number(pos.value) || 0,
                            pnl: Number(pos.pnl) || 0,
                            pnl_percent: Number(pos.pnl_percent) || 0,
                            weight_percent: Number(pos.weight_percent) || 0
                        })) : [],
                        last_update: data.last_update || new Date().toISOString()
                    };
                    
                    this.portfolio = { ...this.portfolio, ...cleanData };
                    console.log('‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', cleanData);
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    this.$nextTick(() => {
                        this.updateCharts();
                    });
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:', error);
            }
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        async loadSignals() {
            try {
                const response = await fetch('/api/signals?limit=20');
                if (response.ok) {
                    this.signals = await response.json();
                    console.log('‚úÖ –°–∏–≥–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.signals.length);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:', error);
            }
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        async loadConfig() {
            try {
                const response = await fetch('/api/config');
                if (response.ok) {
                    const data = await response.json();
                    if (data.portfolio) {
                        this.config.initial_capital = data.portfolio.initial_capital || 1000000;
                    }
                    if (data.signals) {
                        this.config.signal_threshold = data.signals.threshold || 0.7;
                    }
                    if (data.tinkoff) {
                        this.config.sandbox = data.tinkoff.sandbox !== false;
                    }
                    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            }
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ T-Bank
        async loadTbankToken() {
            try {
                const response = await fetch('/api/tbank-token');
                if (response.ok) {
                    const data = await response.json();
                    if (data.token) {
                        this.config.tbank_token = data.token;
                        console.log(`‚úÖ T-Bank —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ ${data.source}`);
                    }
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ T-Bank:', error);
            }
        },
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        async saveConfig() {
            try {
                const configData = {
                    portfolio: {
                        initial_capital: this.config.initial_capital
                    },
                    signals: {
                        threshold: this.config.signal_threshold
                    },
                    tinkoff: {
                        sandbox: this.config.sandbox
                    }
                };
                
                const response = await fetch('/api/config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(configData)
                });
                
                if (response.ok) {
                    alert('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                } else {
                    alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
                alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ' + error.message);
            }
        },
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤
        async loadLogs() {
            try {
                const response = await fetch('/api/logs?lines=100');
                if (response.ok) {
                    const data = await response.json();
                    this.logs = data.logs || [];
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
            }
        },
        
        // –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –ª–æ–≥–æ–≤
        clearLogsDisplay() {
            this.logs = [];
        },
        
        // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        async startSystem() {
            try {
                const response = await fetch('/api/system/start', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    this.systemRunning = true;
                    alert('‚úÖ ' + data.message);
                } else {
                    alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
                alert('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: ' + error.message);
            }
        },
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        async stopSystem() {
            try {
                const response = await fetch('/api/system/stop', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    this.systemRunning = false;
                    alert('‚úÖ ' + data.message);
                } else {
                    alert('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã');
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
                alert('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã: ' + error.message);
            }
        },
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è T-Bank
        async checkTbankConnection() {
            if (!this.config.tbank_token) {
                alert('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω T-Bank');
                return;
            }
            
            this.connectionStatus = null;
            
            try {
                const response = await fetch('/api/tbank/check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        token: this.config.tbank_token,
                        sandbox: this.config.sandbox
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    this.connectionStatus = {
                        success: true,
                        ...data
                    };
                } else {
                    const error = await response.json();
                    this.connectionStatus = {
                        success: false,
                        error: error.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                    };
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
                this.connectionStatus = {
                    success: false,
                    error: error.message
                };
            }
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        async getTbankBalance() {
            if (!this.config.tbank_token) {
                alert('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω T-Bank');
                return;
            }
            
            try {
                const response = await fetch('/api/tbank/get-balance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        token: this.config.tbank_token,
                        sandbox: this.config.sandbox
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    this.config.initial_capital = Math.floor(data.balance);
                    alert(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: ${this.formatCurrency(data.balance)}`);
                } else {
                    const error = await response.json();
                    alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ' + error.detail);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
                alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ' + error.message);
            }
        },
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ç–æ–∫–µ–Ω—É
        showTokenHelp() {
            this.showTokenModal = true;
        },
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        initCharts() {
            this.initPortfolioChart();
            this.initAssetsChart();
        },
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        updateCharts() {
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const portfolioCanvas = document.getElementById('portfolioChart');
            const assetsCanvas = document.getElementById('assetsChart');
            
            if (portfolioCanvas && assetsCanvas) {
                // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                Chart.getChart('portfolioChart')?.destroy();
                Chart.getChart('assetsChart')?.destroy();
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
                this.initPortfolioChart();
                this.initAssetsChart();
            }
        },
        
        // –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        initPortfolioChart() {
            const canvas = document.getElementById('portfolioChart');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            
            // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            const labels = [];
            const data = [];
            const now = new Date();
            
            for (let i = 30; i >= 0; i--) {
                const date = new Date(now);
                date.setDate(date.getDate() - i);
                labels.push(date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }));
                
                // –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                const baseValue = 1000000;
                const variation = Math.sin(i / 5) * 50000 + Math.random() * 30000;
                data.push(baseValue + variation);
            }
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è',
                        data: data,
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            callbacks: {
                                label: (context) => {
                                    return this.formatCurrency(context.parsed.y);
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            ticks: {
                                callback: (value) => {
                                    return ((value || 0) / 1000).toFixed(0) + 'K';
                                }
                            }
                        }
                    }
                }
            });
        },
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤
        initAssetsChart() {
            const canvas = document.getElementById('assetsChart');
            if (!canvas) return;
            
            const ctx = canvas.getContext('2d');
            
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', '–ê–∫—Ü–∏–∏', '–û–±–ª–∏–≥–∞—Ü–∏–∏'],
                    datasets: [{
                        data: [
                            this.portfolio.cash_balance,
                            this.portfolio.invested_value * 0.7,
                            this.portfolio.invested_value * 0.3
                        ],
                        backgroundColor: [
                            '#4CAF50',
                            '#667eea',
                            '#764ba2'
                        ],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: true,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: (context) => {
                                    const label = context.label || '';
                                    const value = this.formatCurrency(context.parsed);
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percent = (((context.parsed || 0) / (total || 1)) * 100).toFixed(1);
                                    return `${label}: ${value} (${percent}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }
    }
}).mount('#app');

