"""
–ü–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from typing import Dict, Any, Optional, List
from datetime import datetime
import threading
import time
import os
import re
from pathlib import Path
from loguru import logger


class LogsPanel:
    """
    –ü–∞–Ω–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –ª–æ–≥–æ–≤
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤
        self.log_files = [
            "logs/investment_system.log",
            "logs/neural_networks.log",
            "logs/trading.log"
        ]
        self.current_log_file = self.log_files[0] if self.log_files else None
        self.auto_scroll = True
        self.auto_refresh = True
        self.refresh_interval = 2  # —Å–µ–∫—É–Ω–¥—ã
        self.max_lines = 1000
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.level_filter = "ALL"
        self.text_filter = ""
        self.date_filter = None
        
        # –î–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤
        self.log_entries = []
        self.filtered_entries = []
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
        self._start_log_monitoring()
        
        logger.info("–ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–∞–Ω–µ–ª–∏
        """
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
        self._create_control_panel(main_frame)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
        self._create_logs_panel(main_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._create_stats_panel(main_frame)
    
    def _create_control_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.LabelFrame(parent, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏", padding=10)
        control_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        row1 = ttk.Frame(control_frame)
        row1.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(row1, text="–§–∞–π–ª –ª–æ–≥–æ–≤:").pack(side=tk.LEFT)
        
        self.log_file_var = tk.StringVar(value=self.current_log_file or "")
        log_file_combo = ttk.Combobox(
            row1,
            textvariable=self.log_file_var,
            values=self.log_files,
            width=40
        )
        log_file_combo.pack(side=tk.LEFT, padx=(10, 10))
        log_file_combo.bind('<<ComboboxSelected>>', self._on_log_file_changed)
        
        ttk.Button(
            row1,
            text="üìÅ –û–±–∑–æ—Ä...",
            command=self._browse_log_file
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            row1,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self._refresh_logs
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            row1,
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å",
            command=self._clear_logs
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            row1,
            text="üíæ –≠–∫—Å–ø–æ—Ä—Ç",
            command=self._export_logs
        ).pack(side=tk.LEFT)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ñ–∏–ª—å—Ç—Ä—ã
        row2 = ttk.Frame(control_frame)
        row2.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(row2, text="–£—Ä–æ–≤–µ–Ω—å:").pack(side=tk.LEFT)
        
        self.level_filter_var = tk.StringVar(value="ALL")
        level_combo = ttk.Combobox(
            row2,
            textvariable=self.level_filter_var,
            values=["ALL", "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
            state="readonly",
            width=10
        )
        level_combo.pack(side=tk.LEFT, padx=(5, 15))
        level_combo.bind('<<ComboboxSelected>>', self._on_filter_changed)
        
        ttk.Label(row2, text="–ü–æ–∏—Å–∫:").pack(side=tk.LEFT)
        
        self.text_filter_var = tk.StringVar()
        search_entry = ttk.Entry(
            row2,
            textvariable=self.text_filter_var,
            width=30
        )
        search_entry.pack(side=tk.LEFT, padx=(5, 10))
        search_entry.bind('<KeyRelease>', self._on_search_changed)
        
        ttk.Button(
            row2,
            text="üîç –ù–∞–π—Ç–∏",
            command=self._apply_filters
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            row2,
            text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å",
            command=self._reset_filters
        ).pack(side=tk.LEFT)
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        row3 = ttk.Frame(control_frame)
        row3.pack(fill=tk.X)
        
        self.auto_scroll_var = tk.BooleanVar(value=self.auto_scroll)
        ttk.Checkbutton(
            row3,
            text="–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞",
            variable=self.auto_scroll_var,
            command=self._on_auto_scroll_changed
        ).pack(side=tk.LEFT, padx=(0, 15))
        
        self.auto_refresh_var = tk.BooleanVar(value=self.auto_refresh)
        ttk.Checkbutton(
            row3,
            text="–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            variable=self.auto_refresh_var,
            command=self._on_auto_refresh_changed
        ).pack(side=tk.LEFT, padx=(0, 15))
        
        ttk.Label(row3, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫):").pack(side=tk.LEFT)
        
        self.refresh_interval_var = tk.IntVar(value=self.refresh_interval)
        interval_spinbox = ttk.Spinbox(
            row3,
            from_=1,
            to=60,
            textvariable=self.refresh_interval_var,
            width=5,
            command=self._on_interval_changed
        )
        interval_spinbox.pack(side=tk.LEFT, padx=(5, 15))
        
        ttk.Label(row3, text="–ú–∞–∫—Å. —Å—Ç—Ä–æ–∫:").pack(side=tk.LEFT)
        
        self.max_lines_var = tk.IntVar(value=self.max_lines)
        max_lines_spinbox = ttk.Spinbox(
            row3,
            from_=100,
            to=10000,
            textvariable=self.max_lines_var,
            width=6,
            increment=100,
            command=self._on_max_lines_changed
        )
        max_lines_spinbox.pack(side=tk.LEFT, padx=(5, 0))
    
    def _create_logs_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ –ª–æ–≥–æ–≤
        logs_frame = ttk.LabelFrame(parent, text="–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", padding=10)
        logs_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Treeview –¥–ª—è –ª–æ–≥–æ–≤
        columns = ("–í—Ä–µ–º—è", "–£—Ä–æ–≤–µ–Ω—å", "–ú–æ–¥—É–ª—å", "–°–æ–æ–±—â–µ–Ω–∏–µ")
        self.logs_tree = ttk.Treeview(logs_frame, columns=columns, show='headings', height=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {"–í—Ä–µ–º—è": 150, "–£—Ä–æ–≤–µ–Ω—å": 80, "–ú–æ–¥—É–ª—å": 200, "–°–æ–æ–±—â–µ–Ω–∏–µ": 600}
        
        for col in columns:
            self.logs_tree.heading(col, text=col, command=lambda c=col: self._sort_logs(c))
            self.logs_tree.column(col, width=column_widths.get(col, 100), anchor='w')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤
        self.logs_tree.tag_configure('DEBUG', foreground='gray')
        self.logs_tree.tag_configure('INFO', foreground='black')
        self.logs_tree.tag_configure('WARNING', foreground='orange')
        self.logs_tree.tag_configure('ERROR', foreground='red')
        self.logs_tree.tag_configure('CRITICAL', foreground='red', background='yellow')
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        logs_v_scrollbar = ttk.Scrollbar(logs_frame, orient='vertical', command=self.logs_tree.yview)
        logs_h_scrollbar = ttk.Scrollbar(logs_frame, orient='horizontal', command=self.logs_tree.xview)
        self.logs_tree.configure(yscrollcommand=logs_v_scrollbar.set, xscrollcommand=logs_h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.logs_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        logs_v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        logs_h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 0))
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.logs_context_menu = tk.Menu(self.logs_tree, tearoff=0)
        self.logs_context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É", command=self._copy_log_line)
        self.logs_context_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", command=self._copy_log_message)
        self.logs_context_menu.add_separator()
        self.logs_context_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", command=self._show_log_details)
        self.logs_context_menu.add_command(label="–§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é", command=self._filter_by_module)
        self.logs_context_menu.add_command(label="–§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é", command=self._filter_by_level)
        
        self.logs_tree.bind("<Button-3>", self._show_logs_context_menu)
        self.logs_tree.bind("<Double-1>", self._on_log_double_click)
    
    def _create_stats_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.LabelFrame(parent, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤", padding=10)
        stats_frame.pack(fill=tk.X)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_grid = ttk.Frame(stats_frame)
        stats_grid.pack(fill=tk.X)
        
        for i in range(6):
            stats_grid.columnconfigure(i, weight=1)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
        self._create_stat_counter(stats_grid, "–í—Å–µ–≥–æ", "0", 0, 0, "blue")
        self._create_stat_counter(stats_grid, "DEBUG", "0", 0, 1, "gray")
        self._create_stat_counter(stats_grid, "INFO", "0", 0, 2, "black")
        self._create_stat_counter(stats_grid, "WARNING", "0", 0, 3, "orange")
        self._create_stat_counter(stats_grid, "ERROR", "0", 0, 4, "red")
        self._create_stat_counter(stats_grid, "CRITICAL", "0", 0, 5, "red")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.Frame(stats_frame)
        info_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.file_info_label = ttk.Label(
            info_frame,
            text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω",
            font=('Arial', 9)
        )
        self.file_info_label.pack(side=tk.LEFT)
        
        self.last_update_label = ttk.Label(
            info_frame,
            text="",
            font=('Arial', 9)
        )
        self.last_update_label.pack(side=tk.RIGHT)
    
    def _create_stat_counter(self, parent, title: str, value: str, row: int, col: int, color: str):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—á–µ—Ç—á–∏–∫–∞
            value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
            row: –°—Ç—Ä–æ–∫–∞ –≤ —Å–µ—Ç–∫–µ
            col: –ö–æ–ª–æ–Ω–∫–∞ –≤ —Å–µ—Ç–∫–µ
            color: –¶–≤–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        """
        # –†–∞–º–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞
        counter_frame = ttk.Frame(parent, relief='raised', borderwidth=1)
        counter_frame.grid(row=row, column=col, padx=2, pady=2, sticky='ew')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            counter_frame,
            text=title,
            font=('Arial', 9, 'bold'),
            foreground='gray'
        )
        title_label.pack(pady=(5, 2))
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = ttk.Label(
            counter_frame,
            text=value,
            font=('Arial', 12, 'bold'),
            foreground=color
        )
        value_label.pack(pady=(0, 5))
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        setattr(self, f"stat_{title.lower()}", value_label)
    
    def _start_log_monitoring(self):
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
        """
        def monitoring_loop():
            while True:
                try:
                    if self.auto_refresh and self.current_log_file:
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        self.parent.after(0, self._refresh_logs)
                    
                    time.sleep(self.refresh_interval)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤: {e}")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitoring_thread = threading.Thread(target=monitoring_loop, daemon=True)
        monitoring_thread.start()
    
    def _browse_log_file(self):
        """
        –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        """
        try:
            filename = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–æ–≤",
                filetypes=[("Log files", "*.log"), ("Text files", "*.txt"), ("All files", "*.*")],
                initialdir="logs"
            )
            
            if filename:
                self.current_log_file = filename
                self.log_file_var.set(filename)
                self._refresh_logs()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª: {e}")
    
    def _on_log_file_changed(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        try:
            self.current_log_file = self.log_file_var.get()
            self._refresh_logs()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
    
    def _refresh_logs(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        """
        try:
            if not self.current_log_file or not os.path.exists(self.current_log_file):
                self.file_info_label.config(text="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
            self._read_log_file()
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            self._apply_filters()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_statistics()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            file_size = os.path.getsize(self.current_log_file)
            file_size_str = self._format_file_size(file_size)
            self.file_info_label.config(text=f"–§–∞–π–ª: {os.path.basename(self.current_log_file)} ({file_size_str})")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            self.last_update_label.config(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            self.file_info_label.config(text=f"–û—à–∏–±–∫–∞: {e}")
    
    def _read_log_file(self):
        """
        –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        """
        try:
            self.log_entries = []
            
            with open(self.current_log_file, 'r', encoding='utf-8', errors='ignore') as file:
                lines = file.readlines()
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
                if len(lines) > self.max_lines:
                    lines = lines[-self.max_lines:]
                
                for line in lines:
                    entry = self._parse_log_line(line.strip())
                    if entry:
                        self.log_entries.append(entry)
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            raise
    
    def _parse_log_line(self, line: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
        
        Args:
            line: –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–≥–∞ –∏–ª–∏ None
        """
        try:
            if not line.strip():
                return None
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ loguru
            # –§–æ—Ä–º–∞—Ç: "2024-01-15 10:30:45.123 | INFO | module:function:line - message"
            pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}(?:\.\d{3})?)\s*\|\s*(\w+)\s*\|\s*([^-]+?)\s*-\s*(.+)'
            match = re.match(pattern, line)
            
            if match:
                timestamp_str, level, module, message = match.groups()
                
                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
                try:
                    if '.' in timestamp_str:
                        timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S.%f')
                    else:
                        timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                except ValueError:
                    timestamp = datetime.now()
                
                return {
                    'timestamp': timestamp,
                    'level': level.upper(),
                    'module': module.strip(),
                    'message': message.strip(),
                    'raw_line': line
                }
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–ø–∏—Å—å
            return {
                'timestamp': datetime.now(),
                'level': 'INFO',
                'module': 'unknown',
                'message': line,
                'raw_line': line
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞: {e}")
            return None
    
    def _apply_filters(self):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –ª–æ–≥–∞–º
        """
        try:
            self.filtered_entries = []
            
            for entry in self.log_entries:
                # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é
                if self.level_filter != "ALL" and entry['level'] != self.level_filter:
                    continue
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—Å—Ç—É
                if self.text_filter:
                    search_text = self.text_filter.lower()
                    if (search_text not in entry['message'].lower() and 
                        search_text not in entry['module'].lower()):
                        continue
                
                self.filtered_entries.append(entry)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            self._update_logs_table()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _update_logs_table(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤
        """
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            for item in self.logs_tree.get_children():
                self.logs_tree.delete(item)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for entry in self.filtered_entries:
                timestamp_str = entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
                values = (timestamp_str, entry['level'], entry['module'], entry['message'])
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                tag = entry['level']
                
                self.logs_tree.insert('', 'end', values=values, tags=(tag,))
            
            # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É
            if self.auto_scroll and self.filtered_entries:
                self.logs_tree.see(self.logs_tree.get_children()[-1])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤: {e}")
    
    def _update_statistics(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
        """
        try:
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º
            level_counts = {'DEBUG': 0, 'INFO': 0, 'WARNING': 0, 'ERROR': 0, 'CRITICAL': 0}
            
            for entry in self.log_entries:
                level = entry['level']
                if level in level_counts:
                    level_counts[level] += 1
            
            total = sum(level_counts.values())
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
            if hasattr(self, 'stat_–≤—Å–µ–≥–æ'):
                self.stat_–≤—Å–µ–≥–æ.config(text=str(total))
            
            for level, count in level_counts.items():
                stat_attr = f"stat_{level.lower()}"
                if hasattr(self, stat_attr):
                    getattr(self, stat_attr).config(text=str(count))
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def _format_file_size(self, size_bytes: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        
        Args:
            size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        """
        try:
            if size_bytes < 1024:
                return f"{size_bytes} B"
            elif size_bytes < 1024 * 1024:
                return f"{size_bytes / 1024:.1f} KB"
            elif size_bytes < 1024 * 1024 * 1024:
                return f"{size_bytes / (1024 * 1024):.1f} MB"
            else:
                return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"
        except:
            return "Unknown"
    
    def _clear_logs(self):
        """
        –û—á–∏—Å—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤
        """
        try:
            result = messagebox.askyesno(
                "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤",
                "–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –ª–æ–≥–∏?\n(–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω)"
            )
            
            if result:
                # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                for item in self.logs_tree.get_children():
                    self.logs_tree.delete(item)
                
                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                self.log_entries = []
                self.filtered_entries = []
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self._update_statistics()
                
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏: {e}")
    
    def _export_logs(self):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
        """
        try:
            if not self.filtered_entries:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            
            filename = filedialog.asksaveasfilename(
                title="–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤",
                filetypes=[("Text files", "*.txt"), ("CSV files", "*.csv"), ("All files", "*.*")],
                defaultextension=".txt"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as file:
                    if filename.endswith('.csv'):
                        # CSV —Ñ–æ—Ä–º–∞—Ç
                        file.write("–í—Ä–µ–º—è,–£—Ä–æ–≤–µ–Ω—å,–ú–æ–¥—É–ª—å,–°–æ–æ–±—â–µ–Ω–∏–µ\n")
                        for entry in self.filtered_entries:
                            timestamp_str = entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
                            file.write(f'"{timestamp_str}","{entry["level"]}","{entry["module"]}","{entry["message"]}"\n')
                    else:
                        # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                        for entry in self.filtered_entries:
                            file.write(entry['raw_line'] + '\n')
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: {e}")
    
    def _on_filter_changed(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —É—Ä–æ–≤–Ω—è
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        try:
            self.level_filter = self.level_filter_var.get()
            self._apply_filters()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —É—Ä–æ–≤–Ω—è: {e}")
    
    def _on_search_changed(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        try:
            self.text_filter = self.text_filter_var.get()
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            self.parent.after(500, self._apply_filters)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
    
    def _reset_filters(self):
        """
        –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        """
        try:
            self.level_filter_var.set("ALL")
            self.text_filter_var.set("")
            self.level_filter = "ALL"
            self.text_filter = ""
            self._apply_filters()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    def _on_auto_scroll_changed(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        """
        self.auto_scroll = self.auto_scroll_var.get()
    
    def _on_auto_refresh_changed(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        self.auto_refresh = self.auto_refresh_var.get()
    
    def _on_interval_changed(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        self.refresh_interval = self.refresh_interval_var.get()
    
    def _on_max_lines_changed(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
        """
        self.max_lines = self.max_lines_var.get()
    
    def _sort_logs(self, column: str):
        """
        –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–æ–≤ –ø–æ –∫–æ–ª–æ–Ω–∫–µ
        
        Args:
            column: –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if column == "–í—Ä–µ–º—è":
                key_func = lambda entry: entry['timestamp']
            elif column == "–£—Ä–æ–≤–µ–Ω—å":
                level_order = {'DEBUG': 0, 'INFO': 1, 'WARNING': 2, 'ERROR': 3, 'CRITICAL': 4}
                key_func = lambda entry: level_order.get(entry['level'], 5)
            elif column == "–ú–æ–¥—É–ª—å":
                key_func = lambda entry: entry['module']
            else:  # –°–æ–æ–±—â–µ–Ω–∏–µ
                key_func = lambda entry: entry['message']
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            self.filtered_entries.sort(key=key_func)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            self._update_logs_table()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    def _show_logs_context_menu(self, event):
        """
        –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–æ–≤
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
        """
        try:
            self.logs_context_menu.post(event.x_root, event.y_root)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –ª–æ–≥–æ–≤: {e}")
    
    def _on_log_double_click(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –ª–æ–≥—É
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
        """
        try:
            selection = self.logs_tree.selection()
            if selection:
                self._show_log_details()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞: {e}")
    
    def _copy_log_line(self):
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
        """
        try:
            selection = self.logs_tree.selection()
            if selection:
                item = self.logs_tree.item(selection[0])
                values = item['values']
                line = f"{values[0]} | {values[1]} | {values[2]} - {values[3]}"
                
                self.parent.clipboard_clear()
                self.parent.clipboard_append(line)
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°—Ç—Ä–æ–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞: {e}")
    
    def _copy_log_message(self):
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞
        """
        try:
            selection = self.logs_tree.selection()
            if selection:
                item = self.logs_tree.item(selection[0])
                message = item['values'][3]
                
                self.parent.clipboard_clear()
                self.parent.clipboard_append(message)
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    
    def _show_log_details(self):
        """
        –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–µ
        """
        try:
            selection = self.logs_tree.selection()
            if selection:
                item = self.logs_tree.item(selection[0])
                values = item['values']
                
                details = f"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:

–í—Ä–µ–º—è: {values[0]}
–£—Ä–æ–≤–µ–Ω—å: {values[1]}
–ú–æ–¥—É–ª—å: {values[2]}
–°–æ–æ–±—â–µ–Ω–∏–µ: {values[3]}

–ü–æ–ª–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
{values[0]} | {values[1]} | {values[2]} - {values[3]}
                """
                
                messagebox.showinfo("–î–µ—Ç–∞–ª–∏ –ª–æ–≥–∞", details)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ª–æ–≥–∞: {e}")
    
    def _filter_by_module(self):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–æ–¥—É–ª—é
        """
        try:
            selection = self.logs_tree.selection()
            if selection:
                item = self.logs_tree.item(selection[0])
                module = item['values'][2]
                
                self.text_filter_var.set(module)
                self.text_filter = module
                self._apply_filters()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–æ–¥—É–ª—é: {e}")
    
    def _filter_by_level(self):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
        """
        try:
            selection = self.logs_tree.selection()
            if selection:
                item = self.logs_tree.item(selection[0])
                level = item['values'][1]
                
                self.level_filter_var.set(level)
                self.level_filter = level
                self._apply_filters()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é: {e}")
    
    def add_log_message(self, log_data: Dict[str, Any]):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞
        
        Args:
            log_data: –î–∞–Ω–Ω—ã–µ –ª–æ–≥–∞
        """
        try:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            entry = {
                'timestamp': log_data.get('timestamp', datetime.now()),
                'level': log_data.get('level', 'INFO'),
                'module': log_data.get('module', 'unknown'),
                'message': log_data.get('message', ''),
                'raw_line': log_data.get('raw_line', '')
            }
            
            self.log_entries.append(entry)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            if len(self.log_entries) > self.max_lines:
                self.log_entries = self.log_entries[-self.max_lines:]
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            self._apply_filters()
            self._update_statistics()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
