"""
–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from typing import Dict, Any, Optional
import yaml
import os
from pathlib import Path
from loguru import logger


class ConfigPanel:
    """
    –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self, parent, main_window):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
            main_window: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.main_window = main_window
        
        # –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.current_config = {}
        self.current_config_path = "config/main.yaml"
        self.config_modified = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_widgets()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self._load_config()
        
        logger.info("–ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_widgets(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–∞–Ω–µ–ª–∏
        """
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
        self._create_file_panel(main_frame)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._create_settings_panel(main_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self._create_actions_panel(main_frame)
    
    def _create_file_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
        file_frame = ttk.LabelFrame(parent, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π", padding=10)
        file_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        file_select_frame = ttk.Frame(file_frame)
        file_select_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(file_select_frame, text="–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:").pack(side=tk.LEFT)
        
        self.config_file_var = tk.StringVar(value=self.current_config_path)
        config_file_entry = ttk.Entry(
            file_select_frame,
            textvariable=self.config_file_var,
            state='readonly',
            width=50
        )
        config_file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(10, 10))
        
        ttk.Button(
            file_select_frame,
            text="–û–±–∑–æ—Ä...",
            command=self._browse_config_file
        ).pack(side=tk.RIGHT)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
        buttons_frame = ttk.Frame(file_frame)
        buttons_frame.pack(fill=tk.X)
        
        ttk.Button(
            buttons_frame,
            text="üìÇ –ù–æ–≤—ã–π",
            command=self.new_config
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            buttons_frame,
            text="üìÅ –û—Ç–∫—Ä—ã—Ç—å",
            command=self.open_config
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self.save_config
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫...",
            command=self._save_config_as
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            buttons_frame,
            text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å",
            command=self.reload_config
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        # –®–∞–±–ª–æ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        templates_frame = ttk.Frame(file_frame)
        templates_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Label(templates_frame, text="–®–∞–±–ª–æ–Ω—ã:").pack(side=tk.LEFT)
        
        ttk.Button(
            templates_frame,
            text="–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π",
            command=lambda: self._load_template("conservative_investing.yaml")
        ).pack(side=tk.LEFT, padx=(10, 5))
        
        ttk.Button(
            templates_frame,
            text="–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
            command=lambda: self._load_template("aggressive_trading.yaml")
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            templates_frame,
            text="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            command=lambda: self._load_template("main.yaml")
        ).pack(side=tk.LEFT, padx=(0, 5))
    
    def _create_settings_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # Notebook –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_notebook = ttk.Notebook(parent)
        self.settings_notebook.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self._create_data_settings()
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        self._create_neural_settings()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self._create_trading_settings()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self._create_portfolio_settings()
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._create_logging_settings()
        
        # –í–∫–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self._create_notifications_settings()
    
    def _create_data_settings(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∞–Ω–Ω—ã—Ö
        """
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∞–Ω–Ω—ã—Ö
        data_frame = ttk.Frame(self.settings_notebook)
        self.settings_notebook.add(data_frame, text="–î–∞–Ω–Ω—ã–µ")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º
        canvas = tk.Canvas(data_frame)
        scrollbar = ttk.Scrollbar(data_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        provider_frame = ttk.LabelFrame(scrollable_frame, text="–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–∞–Ω–Ω—ã—Ö", padding=10)
        provider_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(provider_frame, text="–ü—Ä–æ–≤–∞–π–¥–µ—Ä:").grid(row=0, column=0, sticky='w', pady=2)
        self.data_provider_var = tk.StringVar()
        provider_combo = ttk.Combobox(
            provider_frame,
            textvariable=self.data_provider_var,
            values=["yfinance", "tinkoff", "sber", "moex"],
            state="readonly"
        )
        provider_combo.grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        symbols_frame = ttk.LabelFrame(scrollable_frame, text="–¢–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", padding=10)
        symbols_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(symbols_frame, text="–°–∏–º–≤–æ–ª—ã:").grid(row=0, column=0, sticky='nw', pady=2)
        
        self.symbols_text = tk.Text(symbols_frame, height=4, width=40)
        self.symbols_text.grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        symbols_scroll = ttk.Scrollbar(symbols_frame, orient='vertical', command=self.symbols_text.yview)
        symbols_scroll.grid(row=0, column=2, sticky='ns', pady=2)
        self.symbols_text.configure(yscrollcommand=symbols_scroll.set)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        intervals_frame = ttk.LabelFrame(scrollable_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", padding=10)
        intervals_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(intervals_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫):").grid(row=0, column=0, sticky='w', pady=2)
        self.update_interval_var = tk.IntVar()
        ttk.Spinbox(
            intervals_frame,
            from_=60,
            to=3600,
            textvariable=self.update_interval_var,
            width=10
        ).grid(row=0, column=1, sticky='w', padx=(10, 0), pady=2)
        
        ttk.Label(intervals_frame, text="–ò—Å—Ç–æ—Ä–∏—è (–¥–Ω–µ–π):").grid(row=1, column=0, sticky='w', pady=2)
        self.history_days_var = tk.IntVar()
        ttk.Spinbox(
            intervals_frame,
            from_=30,
            to=1095,
            textvariable=self.history_days_var,
            width=10
        ).grid(row=1, column=1, sticky='w', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        provider_frame.columnconfigure(1, weight=1)
        symbols_frame.columnconfigure(1, weight=1)
        intervals_frame.columnconfigure(1, weight=1)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ canvas –∏ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def _create_neural_settings(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        """
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        neural_frame = ttk.Frame(self.settings_notebook)
        self.settings_notebook.add(neural_frame, text="–ù–µ–π—Ä–æ—Å–µ—Ç–∏")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º
        canvas = tk.Canvas(neural_frame)
        scrollbar = ttk.Scrollbar(neural_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        general_frame = ttk.LabelFrame(scrollable_frame, text="–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        general_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(general_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ (—Å–µ–∫):").grid(row=0, column=0, sticky='w', pady=2)
        self.analysis_interval_var = tk.IntVar()
        ttk.Spinbox(
            general_frame,
            from_=300,
            to=7200,
            textvariable=self.analysis_interval_var,
            width=10
        ).grid(row=0, column=1, sticky='w', padx=(10, 0), pady=2)
        
        ttk.Label(general_frame, text="–ú–µ—Ç–æ–¥ –∞–Ω—Å–∞–º–±–ª—è:").grid(row=1, column=0, sticky='w', pady=2)
        self.ensemble_method_var = tk.StringVar()
        ensemble_combo = ttk.Combobox(
            general_frame,
            textvariable=self.ensemble_method_var,
            values=["weighted_average", "majority_vote", "confidence_weighted"],
            state="readonly"
        )
        ensemble_combo.grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LSTM
        lstm_frame = ttk.LabelFrame(scrollable_frame, text="LSTM –º–æ–¥–µ–ª—å", padding=10)
        lstm_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.lstm_enabled_var = tk.BooleanVar()
        ttk.Checkbutton(
            lstm_frame,
            text="–í–∫–ª—é—á–∏—Ç—å LSTM",
            variable=self.lstm_enabled_var
        ).grid(row=0, column=0, columnspan=2, sticky='w', pady=2)
        
        ttk.Label(lstm_frame, text="–í–µ—Å –º–æ–¥–µ–ª–∏:").grid(row=1, column=0, sticky='w', pady=2)
        self.lstm_weight_var = tk.DoubleVar()
        ttk.Scale(
            lstm_frame,
            from_=0.0,
            to=1.0,
            variable=self.lstm_weight_var,
            orient=tk.HORIZONTAL
        ).grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(lstm_frame, text="–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:").grid(row=2, column=0, sticky='w', pady=2)
        self.lstm_sequence_var = tk.IntVar()
        ttk.Spinbox(
            lstm_frame,
            from_=10,
            to=200,
            textvariable=self.lstm_sequence_var,
            width=10
        ).grid(row=2, column=1, sticky='w', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ XGBoost
        xgb_frame = ttk.LabelFrame(scrollable_frame, text="XGBoost –º–æ–¥–µ–ª—å", padding=10)
        xgb_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.xgb_enabled_var = tk.BooleanVar()
        ttk.Checkbutton(
            xgb_frame,
            text="–í–∫–ª—é—á–∏—Ç—å XGBoost",
            variable=self.xgb_enabled_var
        ).grid(row=0, column=0, columnspan=2, sticky='w', pady=2)
        
        ttk.Label(xgb_frame, text="–í–µ—Å –º–æ–¥–µ–ª–∏:").grid(row=1, column=0, sticky='w', pady=2)
        self.xgb_weight_var = tk.DoubleVar()
        ttk.Scale(
            xgb_frame,
            from_=0.0,
            to=1.0,
            variable=self.xgb_weight_var,
            orient=tk.HORIZONTAL
        ).grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(xgb_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤:").grid(row=2, column=0, sticky='w', pady=2)
        self.xgb_estimators_var = tk.IntVar()
        ttk.Spinbox(
            xgb_frame,
            from_=50,
            to=500,
            textvariable=self.xgb_estimators_var,
            width=10
        ).grid(row=2, column=1, sticky='w', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DeepSeek
        deepseek_frame = ttk.LabelFrame(scrollable_frame, text="DeepSeek –º–æ–¥–µ–ª—å", padding=10)
        deepseek_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.deepseek_enabled_var = tk.BooleanVar()
        ttk.Checkbutton(
            deepseek_frame,
            text="–í–∫–ª—é—á–∏—Ç—å DeepSeek",
            variable=self.deepseek_enabled_var
        ).grid(row=0, column=0, columnspan=2, sticky='w', pady=2)
        
        ttk.Label(deepseek_frame, text="–í–µ—Å –º–æ–¥–µ–ª–∏:").grid(row=1, column=0, sticky='w', pady=2)
        self.deepseek_weight_var = tk.DoubleVar()
        ttk.Scale(
            deepseek_frame,
            from_=0.0,
            to=1.0,
            variable=self.deepseek_weight_var,
            orient=tk.HORIZONTAL
        ).grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(deepseek_frame, text="API –∫–ª—é—á:").grid(row=2, column=0, sticky='w', pady=2)
        self.deepseek_api_key_var = tk.StringVar()
        ttk.Entry(
            deepseek_frame,
            textvariable=self.deepseek_api_key_var,
            show="*",
            width=30
        ).grid(row=2, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        general_frame.columnconfigure(1, weight=1)
        lstm_frame.columnconfigure(1, weight=1)
        xgb_frame.columnconfigure(1, weight=1)
        deepseek_frame.columnconfigure(1, weight=1)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ canvas –∏ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def _create_trading_settings(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        """
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        trading_frame = ttk.Frame(self.settings_notebook)
        self.settings_notebook.add(trading_frame, text="–¢–æ—Ä–≥–æ–≤–ª—è")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π —Ñ—Ä–µ–π–º
        canvas = tk.Canvas(trading_frame)
        scrollbar = ttk.Scrollbar(trading_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        basic_frame = ttk.LabelFrame(scrollable_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        basic_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(basic_frame, text="–ë—Ä–æ–∫–µ—Ä:").grid(row=0, column=0, sticky='w', pady=2)
        self.broker_var = tk.StringVar()
        broker_combo = ttk.Combobox(
            basic_frame,
            textvariable=self.broker_var,
            values=["paper", "tinkoff", "sber"],
            state="readonly"
        )
        broker_combo.grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(basic_frame, text="–ü–æ—Ä–æ–≥ —Å–∏–≥–Ω–∞–ª–∞:").grid(row=1, column=0, sticky='w', pady=2)
        self.signal_threshold_var = tk.DoubleVar()
        ttk.Scale(
            basic_frame,
            from_=0.1,
            to=1.0,
            variable=self.signal_threshold_var,
            orient=tk.HORIZONTAL
        ).grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(basic_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–µ–∫):").grid(row=2, column=0, sticky='w', pady=2)
        self.signal_check_interval_var = tk.IntVar()
        ttk.Spinbox(
            basic_frame,
            from_=60,
            to=3600,
            textvariable=self.signal_check_interval_var,
            width=10
        ).grid(row=2, column=1, sticky='w', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∏—Ü–∏–π
        positions_frame = ttk.LabelFrame(scrollable_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏", padding=10)
        positions_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(positions_frame, text="–ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π:").grid(row=0, column=0, sticky='w', pady=2)
        self.max_positions_var = tk.IntVar()
        ttk.Spinbox(
            positions_frame,
            from_=1,
            to=50,
            textvariable=self.max_positions_var,
            width=10
        ).grid(row=0, column=1, sticky='w', padx=(10, 0), pady=2)
        
        ttk.Label(positions_frame, text="–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞):").grid(row=1, column=0, sticky='w', pady=2)
        self.position_size_var = tk.DoubleVar()
        ttk.Scale(
            positions_frame,
            from_=0.01,
            to=0.5,
            variable=self.position_size_var,
            orient=tk.HORIZONTAL
        ).grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(positions_frame, text="–ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ (—Å–µ–∫):").grid(row=2, column=0, sticky='w', pady=2)
        self.min_trade_interval_var = tk.IntVar()
        ttk.Spinbox(
            positions_frame,
            from_=300,
            to=86400,
            textvariable=self.min_trade_interval_var,
            width=10
        ).grid(row=2, column=1, sticky='w', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–æ–∫–µ—Ä–∞
        broker_settings_frame = ttk.LabelFrame(scrollable_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–æ–∫–µ—Ä–∞ T-Bank", padding=10)
        broker_settings_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(broker_settings_frame, text="T-Bank —Ç–æ–∫–µ–Ω:").grid(row=0, column=0, sticky='w', pady=2)
        self.tinkoff_token_var = tk.StringVar()
        ttk.Entry(
            broker_settings_frame,
            textvariable=self.tinkoff_token_var,
            show="*",
            width=30
        ).grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Button(
            broker_settings_frame,
            text="‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å",
            command=self._show_token_help
        ).grid(row=0, column=2, padx=(5, 0), pady=2)
        
        self.sandbox_mode_var = tk.BooleanVar()
        ttk.Checkbutton(
            broker_settings_frame,
            text="–†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã (sandbox)",
            variable=self.sandbox_mode_var
        ).grid(row=1, column=0, columnspan=3, sticky='w', pady=2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
        account_info_frame = ttk.Frame(broker_settings_frame)
        account_info_frame.grid(row=2, column=0, columnspan=3, sticky='ew', pady=(10, 0))
        
        ttk.Button(
            account_info_frame,
            text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            command=self._check_tbank_connection
        ).pack(side=tk.LEFT)
        
        ttk.Label(broker_settings_frame, text="Sber —Ç–æ–∫–µ–Ω:").grid(row=3, column=0, sticky='w', pady=(10, 2))
        self.sber_token_var = tk.StringVar()
        ttk.Entry(
            broker_settings_frame,
            textvariable=self.sber_token_var,
            show="*",
            width=30,
            state='disabled'  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        ).grid(row=3, column=1, sticky='ew', padx=(10, 0), pady=(10, 2))
        
        ttk.Label(
            broker_settings_frame,
            text="(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
            foreground='gray',
            font=('Arial', 8, 'italic')
        ).grid(row=3, column=2, padx=(5, 0), pady=(10, 2))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        basic_frame.columnconfigure(1, weight=1)
        positions_frame.columnconfigure(1, weight=1)
        broker_settings_frame.columnconfigure(1, weight=1)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ canvas –∏ scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def _create_portfolio_settings(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        """
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_frame = ttk.Frame(self.settings_notebook)
        self.settings_notebook.add(portfolio_frame, text="–ü–æ—Ä—Ç—Ñ–µ–ª—å")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        basic_frame = ttk.LabelFrame(portfolio_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        basic_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(basic_frame, text="–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª (‚ÇΩ):").grid(row=0, column=0, sticky='w', pady=5)
        
        capital_container = ttk.Frame(basic_frame)
        capital_container.grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        self.initial_capital_var = tk.IntVar()
        ttk.Spinbox(
            capital_container,
            from_=100000,
            to=100000000,
            textvariable=self.initial_capital_var,
            width=15,
            increment=100000
        ).pack(side=tk.LEFT)
        
        ttk.Button(
            capital_container,
            text="üí∞ –ü–æ–ª—É—á–∏—Ç—å —Å–æ —Å—á–µ—Ç–∞",
            command=self._get_balance_from_account
        ).pack(side=tk.LEFT, padx=(10, 0))
        
        ttk.Label(basic_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫):").grid(row=1, column=0, sticky='w', pady=5)
        self.portfolio_update_interval_var = tk.IntVar()
        ttk.Spinbox(
            basic_frame,
            from_=60,
            to=3600,
            textvariable=self.portfolio_update_interval_var,
            width=15
        ).grid(row=1, column=1, sticky='w', padx=(10, 0), pady=5)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        risk_frame = ttk.LabelFrame(portfolio_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", padding=10)
        risk_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(risk_frame, text="–ú–∞–∫—Å. —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%):").grid(row=0, column=0, sticky='w', pady=5)
        self.max_risk_per_trade_var = tk.DoubleVar()
        ttk.Scale(
            risk_frame,
            from_=0.01,
            to=0.1,
            variable=self.max_risk_per_trade_var,
            orient=tk.HORIZONTAL
        ).grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        ttk.Label(risk_frame, text="–ú–∞–∫—Å. —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è (%):").grid(row=1, column=0, sticky='w', pady=5)
        self.max_portfolio_risk_var = tk.DoubleVar()
        ttk.Scale(
            risk_frame,
            from_=0.05,
            to=0.3,
            variable=self.max_portfolio_risk_var,
            orient=tk.HORIZONTAL
        ).grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        ttk.Label(risk_frame, text="–ü–æ—Ä–æ–≥ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ (%):").grid(row=2, column=0, sticky='w', pady=5)
        self.rebalance_threshold_var = tk.DoubleVar()
        ttk.Scale(
            risk_frame,
            from_=0.01,
            to=0.2,
            variable=self.rebalance_threshold_var,
            orient=tk.HORIZONTAL
        ).grid(row=2, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        basic_frame.columnconfigure(1, weight=1)
        risk_frame.columnconfigure(1, weight=1)
    
    def _create_logging_settings(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging_frame = ttk.Frame(self.settings_notebook)
        self.settings_notebook.add(logging_frame, text="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        basic_frame = ttk.LabelFrame(logging_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        basic_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(basic_frame, text="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:").grid(row=0, column=0, sticky='w', pady=5)
        self.log_level_var = tk.StringVar()
        log_level_combo = ttk.Combobox(
            basic_frame,
            textvariable=self.log_level_var,
            values=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
            state="readonly"
        )
        log_level_combo.grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        ttk.Label(basic_frame, text="–§–∞–π–ª –ª–æ–≥–æ–≤:").grid(row=1, column=0, sticky='w', pady=5)
        self.log_file_var = tk.StringVar()
        log_file_entry = ttk.Entry(
            basic_frame,
            textvariable=self.log_file_var,
            width=40
        )
        log_file_entry.grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=5)
        
        ttk.Label(basic_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:").grid(row=2, column=0, sticky='w', pady=5)
        self.log_max_size_var = tk.StringVar()
        ttk.Entry(
            basic_frame,
            textvariable=self.log_max_size_var,
            width=15
        ).grid(row=2, column=1, sticky='w', padx=(10, 0), pady=5)
        
        ttk.Label(basic_frame, text="–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è:").grid(row=3, column=0, sticky='w', pady=5)
        self.log_retention_var = tk.StringVar()
        ttk.Entry(
            basic_frame,
            textvariable=self.log_retention_var,
            width=15
        ).grid(row=3, column=1, sticky='w', padx=(10, 0), pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        basic_frame.columnconfigure(1, weight=1)
    
    def _create_notifications_settings(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_frame = ttk.Frame(self.settings_notebook)
        self.settings_notebook.add(notifications_frame, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        general_frame = ttk.LabelFrame(notifications_frame, text="–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        general_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.notifications_enabled_var = tk.BooleanVar()
        ttk.Checkbutton(
            general_frame,
            text="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            variable=self.notifications_enabled_var
        ).pack(anchor='w', pady=5)
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        email_frame = ttk.LabelFrame(notifications_frame, text="Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", padding=10)
        email_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(email_frame, text="SMTP —Å–µ—Ä–≤–µ—Ä:").grid(row=0, column=0, sticky='w', pady=2)
        self.smtp_server_var = tk.StringVar()
        ttk.Entry(
            email_frame,
            textvariable=self.smtp_server_var,
            width=30
        ).grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(email_frame, text="SMTP –ø–æ—Ä—Ç:").grid(row=1, column=0, sticky='w', pady=2)
        self.smtp_port_var = tk.IntVar()
        ttk.Spinbox(
            email_frame,
            from_=25,
            to=587,
            textvariable=self.smtp_port_var,
            width=10
        ).grid(row=1, column=1, sticky='w', padx=(10, 0), pady=2)
        
        ttk.Label(email_frame, text="Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:").grid(row=2, column=0, sticky='w', pady=2)
        self.email_username_var = tk.StringVar()
        ttk.Entry(
            email_frame,
            textvariable=self.email_username_var,
            width=30
        ).grid(row=2, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(email_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=3, column=0, sticky='w', pady=2)
        self.email_password_var = tk.StringVar()
        ttk.Entry(
            email_frame,
            textvariable=self.email_password_var,
            show="*",
            width=30
        ).grid(row=3, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(email_frame, text="Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è:").grid(row=4, column=0, sticky='w', pady=2)
        self.email_to_var = tk.StringVar()
        ttk.Entry(
            email_frame,
            textvariable=self.email_to_var,
            width=30
        ).grid(row=4, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        telegram_frame = ttk.LabelFrame(notifications_frame, text="Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", padding=10)
        telegram_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(telegram_frame, text="Bot —Ç–æ–∫–µ–Ω:").grid(row=0, column=0, sticky='w', pady=2)
        self.telegram_bot_token_var = tk.StringVar()
        ttk.Entry(
            telegram_frame,
            textvariable=self.telegram_bot_token_var,
            show="*",
            width=30
        ).grid(row=0, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        ttk.Label(telegram_frame, text="Chat ID:").grid(row=1, column=0, sticky='w', pady=2)
        self.telegram_chat_id_var = tk.StringVar()
        ttk.Entry(
            telegram_frame,
            textvariable=self.telegram_chat_id_var,
            width=30
        ).grid(row=1, column=1, sticky='ew', padx=(10, 0), pady=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        email_frame.columnconfigure(1, weight=1)
        telegram_frame.columnconfigure(1, weight=1)
    
    def _create_actions_panel(self, parent):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        # –†–∞–º–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ttk.Frame(parent)
        actions_frame.pack(fill=tk.X)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        ttk.Button(
            actions_frame,
            text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
            command=self._apply_config,
            style='Success.TButton'
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            actions_frame,
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å",
            command=self._reset_config
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            actions_frame,
            text="‚úî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            command=self._validate_config
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.changes_label = ttk.Label(
            actions_frame,
            text="",
            foreground='orange'
        )
        self.changes_label.pack(side=tk.RIGHT)
    
    def _browse_config_file(self):
        """
        –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            filename = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                filetypes=[("YAML files", "*.yaml"), ("All files", "*.*")],
                initialdir="config"
            )
            
            if filename:
                self.config_file_var.set(filename)
                self.current_config_path = filename
                self._load_config()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª: {e}")
    
    def _load_template(self, template_name: str):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            template_name: –ò–º—è —à–∞–±–ª–æ–Ω–∞
        """
        try:
            template_path = f"config/{template_name}"
            if os.path.exists(template_path):
                self.current_config_path = template_path
                self.config_file_var.set(template_path)
                self._load_config()
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", f"–®–∞–±–ª–æ–Ω {template_name} –∑–∞–≥—Ä—É–∂–µ–Ω")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω: {e}")
    
    def _load_config(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
        """
        try:
            if not os.path.exists(self.current_config_path):
                logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.current_config_path}")
                return
            
            with open(self.current_config_path, 'r', encoding='utf-8') as file:
                self.current_config = yaml.safe_load(file)
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self._populate_fields()
            
            self.config_modified = False
            self._update_changes_indicator()
            
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.current_config_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _populate_fields(self):
        """
        –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            # –î–∞–Ω–Ω—ã–µ
            data_config = self.current_config.get('data', {})
            self.data_provider_var.set(data_config.get('provider', 'yfinance'))
            self.update_interval_var.set(data_config.get('update_interval', 300))
            self.history_days_var.set(data_config.get('history_days', 365))
            
            # –°–∏–º–≤–æ–ª—ã
            symbols = data_config.get('symbols', [])
            self.symbols_text.delete('1.0', tk.END)
            self.symbols_text.insert('1.0', '\n'.join(symbols))
            
            # –ù–µ–π—Ä–æ—Å–µ—Ç–∏
            neural_config = self.current_config.get('neural_networks', {})
            self.analysis_interval_var.set(neural_config.get('analysis_interval', 1800))
            self.ensemble_method_var.set(neural_config.get('ensemble_method', 'weighted_average'))
            
            # –ú–æ–¥–µ–ª–∏
            models = neural_config.get('models', [])
            for model in models:
                if model.get('type') == 'lstm':
                    self.lstm_enabled_var.set(model.get('enabled', True))
                    self.lstm_weight_var.set(model.get('weight', 0.3))
                    self.lstm_sequence_var.set(model.get('sequence_length', 60))
                elif model.get('type') == 'xgboost':
                    self.xgb_enabled_var.set(model.get('enabled', True))
                    self.xgb_weight_var.set(model.get('weight', 0.3))
                    self.xgb_estimators_var.set(model.get('n_estimators', 100))
                elif model.get('type') == 'deepseek':
                    self.deepseek_enabled_var.set(model.get('enabled', True))
                    self.deepseek_weight_var.set(model.get('weight', 0.4))
                    self.deepseek_api_key_var.set(model.get('api_key', ''))
            
            # –¢–æ—Ä–≥–æ–≤–ª—è
            trading_config = self.current_config.get('trading', {})
            self.broker_var.set(trading_config.get('broker', 'paper'))
            self.signal_threshold_var.set(trading_config.get('signal_threshold', 0.6))
            self.signal_check_interval_var.set(trading_config.get('signal_check_interval', 600))
            self.max_positions_var.set(trading_config.get('max_positions', 10))
            self.position_size_var.set(trading_config.get('position_size', 0.1))
            self.min_trade_interval_var.set(trading_config.get('min_trade_interval', 3600))
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–æ–∫–µ—Ä–∞
            broker_settings = trading_config.get('broker_settings', {})
            tinkoff_settings = broker_settings.get('tinkoff', {})
            sber_settings = broker_settings.get('sber', {})
            
            self.tinkoff_token_var.set(tinkoff_settings.get('token', ''))
            self.sber_token_var.set(sber_settings.get('token', ''))
            self.sandbox_mode_var.set(tinkoff_settings.get('sandbox', True))
            
            # –ü–æ—Ä—Ç—Ñ–µ–ª—å
            portfolio_config = self.current_config.get('portfolio', {})
            self.initial_capital_var.set(portfolio_config.get('initial_capital', 1000000))
            self.portfolio_update_interval_var.set(portfolio_config.get('update_interval', 1800))
            self.max_risk_per_trade_var.set(portfolio_config.get('max_risk_per_trade', 0.02))
            self.max_portfolio_risk_var.set(portfolio_config.get('max_portfolio_risk', 0.1))
            self.rebalance_threshold_var.set(portfolio_config.get('rebalance_threshold', 0.05))
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logging_config = self.current_config.get('logging', {})
            self.log_level_var.set(logging_config.get('level', 'INFO'))
            self.log_file_var.set(logging_config.get('file', 'logs/investment_system.log'))
            self.log_max_size_var.set(logging_config.get('max_size', '10 MB'))
            self.log_retention_var.set(logging_config.get('retention', '30 days'))
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications_config = self.current_config.get('notifications', {})
            self.notifications_enabled_var.set(notifications_config.get('enabled', False))
            
            email_config = notifications_config.get('email', {})
            self.smtp_server_var.set(email_config.get('smtp_server', ''))
            self.smtp_port_var.set(email_config.get('smtp_port', 587))
            self.email_username_var.set(email_config.get('username', ''))
            self.email_password_var.set(email_config.get('password', ''))
            self.email_to_var.set(email_config.get('to_email', ''))
            
            telegram_config = notifications_config.get('telegram', {})
            self.telegram_bot_token_var.set(telegram_config.get('bot_token', ''))
            self.telegram_chat_id_var.set(telegram_config.get('chat_id', ''))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
    
    def _collect_config(self) -> Dict[str, Any]:
        """
        –°–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–æ–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            config = {}
            
            # –î–∞–Ω–Ω—ã–µ
            symbols_text = self.symbols_text.get('1.0', tk.END).strip()
            symbols = [s.strip() for s in symbols_text.split('\n') if s.strip()]
            
            config['data'] = {
                'provider': self.data_provider_var.get(),
                'symbols': symbols,
                'update_interval': self.update_interval_var.get(),
                'history_days': self.history_days_var.get()
            }
            
            # –ù–µ–π—Ä–æ—Å–µ—Ç–∏
            models = []
            
            if self.lstm_enabled_var.get():
                models.append({
                    'name': 'lstm_predictor',
                    'type': 'lstm',
                    'weight': self.lstm_weight_var.get(),
                    'enabled': True,
                    'sequence_length': self.lstm_sequence_var.get()
                })
            
            if self.xgb_enabled_var.get():
                models.append({
                    'name': 'xgboost_classifier',
                    'type': 'xgboost',
                    'weight': self.xgb_weight_var.get(),
                    'enabled': True,
                    'n_estimators': self.xgb_estimators_var.get()
                })
            
            if self.deepseek_enabled_var.get():
                models.append({
                    'name': 'deepseek_analyzer',
                    'type': 'deepseek',
                    'weight': self.deepseek_weight_var.get(),
                    'enabled': True,
                    'api_key': self.deepseek_api_key_var.get()
                })
            
            config['neural_networks'] = {
                'models': models,
                'analysis_interval': self.analysis_interval_var.get(),
                'ensemble_method': self.ensemble_method_var.get()
            }
            
            # –¢–æ—Ä–≥–æ–≤–ª—è
            config['trading'] = {
                'broker': self.broker_var.get(),
                'signal_threshold': self.signal_threshold_var.get(),
                'signal_check_interval': self.signal_check_interval_var.get(),
                'max_positions': self.max_positions_var.get(),
                'position_size': self.position_size_var.get(),
                'min_trade_interval': self.min_trade_interval_var.get(),
                'broker_settings': {
                    'tinkoff': {
                        'token': self.tinkoff_token_var.get(),
                        'sandbox': self.sandbox_mode_var.get()
                    },
                    'sber': {
                        'token': self.sber_token_var.get(),
                        'sandbox': self.sandbox_mode_var.get()
                    }
                }
            }
            
            # –ü–æ—Ä—Ç—Ñ–µ–ª—å
            config['portfolio'] = {
                'initial_capital': self.initial_capital_var.get(),
                'max_risk_per_trade': self.max_risk_per_trade_var.get(),
                'max_portfolio_risk': self.max_portfolio_risk_var.get(),
                'update_interval': self.portfolio_update_interval_var.get(),
                'rebalance_threshold': self.rebalance_threshold_var.get()
            }
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            config['logging'] = {
                'level': self.log_level_var.get(),
                'file': self.log_file_var.get(),
                'max_size': self.log_max_size_var.get(),
                'retention': self.log_retention_var.get()
            }
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            config['notifications'] = {
                'enabled': self.notifications_enabled_var.get(),
                'email': {
                    'smtp_server': self.smtp_server_var.get(),
                    'smtp_port': self.smtp_port_var.get(),
                    'username': self.email_username_var.get(),
                    'password': self.email_password_var.get(),
                    'to_email': self.email_to_var.get()
                },
                'telegram': {
                    'bot_token': self.telegram_bot_token_var.get(),
                    'chat_id': self.telegram_chat_id_var.get()
                }
            }
            
            return config
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    def _apply_config(self):
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            # –°–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = self._collect_config()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not self._validate_config_data(config):
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.current_config = config
            self.save_config()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            self.config_modified = False
            self._update_changes_indicator()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _reset_config(self):
        """
        –°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        """
        try:
            result = messagebox.askyesno(
                "–°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?"
            )
            
            if result:
                self._load_config()
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _validate_config(self):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            config = self._collect_config()
            
            if self._validate_config_data(config):
                messagebox.showinfo("–í–∞–ª–∏–¥–∞—Ü–∏—è", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    def _validate_config_data(self, config: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        """
        try:
            errors = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data_config = config.get('data', {})
            if not data_config.get('symbols'):
                errors.append("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã")
            
            if data_config.get('update_interval', 0) < 60:
                errors.append("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
            neural_config = config.get('neural_networks', {})
            models = neural_config.get('models', [])
            
            if not models:
                errors.append("–ù–µ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
            
            total_weight = sum(model.get('weight', 0) for model in models)
            if abs(total_weight - 1.0) > 0.01:
                errors.append(f"–°—É–º–º–∞ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1.0 (—Ç–µ–∫—É—â–∞—è: {total_weight:.2f})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
            trading_config = config.get('trading', {})
            if trading_config.get('signal_threshold', 0) < 0.1:
                errors.append("–ü–æ—Ä–æ–≥ —Å–∏–≥–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.1")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_config = config.get('portfolio', {})
            if portfolio_config.get('initial_capital', 0) < 100000:
                errors.append("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100,000 ‚ÇΩ")
            
            if errors:
                error_message = "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors)
                messagebox.showerror("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", error_message)
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False
    
    def _update_changes_indicator(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        if self.config_modified:
            self.changes_label.config(text="‚óè –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", foreground='orange')
        else:
            self.changes_label.config(text="‚úì –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", foreground='green')
    
    def _save_config_as(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        """
        try:
            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–∫",
                filetypes=[("YAML files", "*.yaml"), ("All files", "*.*")],
                defaultextension=".yaml",
                initialdir="config"
            )
            
            if filename:
                self.current_config_path = filename
                self.config_file_var.set(filename)
                self.save_config()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def new_config(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            if self.config_modified:
                result = messagebox.askyesnocancel(
                    "–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                    "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö?"
                )
                
                if result is None:  # Cancel
                    return
                elif result:  # Yes
                    self.save_config()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.current_config = {}
            self.current_config_path = "config/new_config.yaml"
            self.config_file_var.set(self.current_config_path)
            
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._set_default_values()
            
            self.config_modified = True
            self._update_changes_indicator()
            
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def open_config(self):
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            if self.config_modified:
                result = messagebox.askyesnocancel(
                    "–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                    "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö?"
                )
                
                if result is None:  # Cancel
                    return
                elif result:  # Yes
                    self.save_config()
            
            filename = filedialog.askopenfilename(
                title="–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                filetypes=[("YAML files", "*.yaml"), ("All files", "*.*")],
                initialdir="config"
            )
            
            if filename:
                self.current_config_path = filename
                self.config_file_var.set(filename)
                self._load_config()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def save_config(self):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            # –°–±–æ—Ä —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = self._collect_config()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            config_dir = os.path.dirname(self.current_config_path)
            if config_dir and not os.path.exists(config_dir):
                os.makedirs(config_dir)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            with open(self.current_config_path, 'w', encoding='utf-8') as file:
                yaml.dump(config, file, default_flow_style=False, allow_unicode=True, indent=2)
            
            self.current_config = config
            self.config_modified = False
            self._update_changes_indicator()
            
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.current_config_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def reload_config(self):
        """
        –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        try:
            if self.config_modified:
                result = messagebox.askyesno(
                    "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                    "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –û–Ω–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
                )
                
                if not result:
                    return
            
            self._load_config()
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def _set_default_values(self):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        try:
            # –î–∞–Ω–Ω—ã–µ
            self.data_provider_var.set("yfinance")
            self.update_interval_var.set(300)
            self.history_days_var.set(365)
            self.symbols_text.delete('1.0', tk.END)
            self.symbols_text.insert('1.0', "SBER\nGAZP\nLKOH")
            
            # –ù–µ–π—Ä–æ—Å–µ—Ç–∏
            self.analysis_interval_var.set(1800)
            self.ensemble_method_var.set("weighted_average")
            self.lstm_enabled_var.set(True)
            self.lstm_weight_var.set(0.3)
            self.lstm_sequence_var.set(60)
            self.xgb_enabled_var.set(True)
            self.xgb_weight_var.set(0.3)
            self.xgb_estimators_var.set(100)
            self.deepseek_enabled_var.set(True)
            self.deepseek_weight_var.set(0.4)
            
            # –¢–æ—Ä–≥–æ–≤–ª—è
            self.broker_var.set("paper")
            self.signal_threshold_var.set(0.6)
            self.signal_check_interval_var.set(600)
            self.max_positions_var.set(10)
            self.position_size_var.set(0.1)
            self.min_trade_interval_var.set(3600)
            self.sandbox_mode_var.set(True)
            
            # –ü–æ—Ä—Ç—Ñ–µ–ª—å
            self.initial_capital_var.set(1000000)
            self.portfolio_update_interval_var.set(1800)
            self.max_risk_per_trade_var.set(0.02)
            self.max_portfolio_risk_var.set(0.1)
            self.rebalance_threshold_var.set(0.05)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.log_level_var.set("INFO")
            self.log_file_var.set("logs/investment_system.log")
            self.log_max_size_var.set("10 MB")
            self.log_retention_var.set("30 days")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.notifications_enabled_var.set(False)
            self.smtp_port_var.set(587)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
    
    def get_current_config_path(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        return self.current_config_path
    
    def _get_balance_from_account(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å–æ —Å—á–µ—Ç–∞ T-Bank
        """
        try:
            import asyncio
            import os
            from ..trading.tbank_broker import TBankBroker
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
            token = self.tinkoff_token_var.get()
            if not token:
                token = os.getenv('TINKOFF_TOKEN')
            
            if not token:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω T-Bank.\n\n"
                    "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–æ–∫–µ—Ä–∞ –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_TOKEN."
                )
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ sandbox
            sandbox = self.sandbox_mode_var.get()
            
            # –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            loading_dialog = tk.Toplevel(self.parent)
            loading_dialog.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
            loading_dialog.geometry("300x100")
            loading_dialog.transient(self.parent)
            loading_dialog.grab_set()
            
            ttk.Label(
                loading_dialog,
                text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ T-Bank API...",
                font=('Arial', 10)
            ).pack(pady=20)
            
            progress = ttk.Progressbar(
                loading_dialog,
                mode='indeterminate'
            )
            progress.pack(fill=tk.X, padx=20)
            progress.start()
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def get_balance():
                try:
                    async def fetch_balance():
                        broker = TBankBroker(
                            token=token,
                            sandbox=sandbox
                        )
                        await broker.initialize()
                        balance = await broker.get_total_balance_rub()
                        return balance
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    balance = loop.run_until_complete(fetch_balance())
                    loop.close()
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    self.parent.after(0, lambda: self._update_balance_value(balance, loading_dialog))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
                    self.parent.after(0, lambda: self._show_balance_error(str(e), loading_dialog))
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            balance_thread = threading.Thread(target=get_balance, daemon=True)
            balance_thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å:\n{e}")
    
    def _update_balance_value(self, balance: float, dialog):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            balance: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            dialog: –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            dialog.destroy()
            
            if balance > 0:
                self.initial_capital_var.set(int(balance))
                self.config_modified = True
                self._update_changes_indicator()
                
                messagebox.showinfo(
                    "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω",
                    f"–ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞: {balance:,.2f} ‚ÇΩ\n\n"
                    f"–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω.\n"
                    f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."
                )
            else:
                messagebox.showwarning(
                    "–ë–∞–ª–∞–Ω—Å –Ω—É–ª–µ–≤–æ–π",
                    "–ù–∞ —Å—á–µ—Ç–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
                    "–î–ª—è sandbox —Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    def _show_balance_error(self, error_msg: str, dialog):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            error_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            dialog: –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            dialog.destroy()
            messagebox.showerror(
                "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–æ —Å—á–µ—Ç–∞:\n\n{error_msg}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞\n"
                f"‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ sandbox/production"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    def _show_token_help(self):
        """
        –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ T-Bank
        """
        help_text = """
–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω T-Bank Invest API:

1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
   https://www.tbank.ru/invest/settings/api/

2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç T-Bank –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏

3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ‚Üí "API"

4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω"

5. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞:
   ‚Ä¢ –î–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
   ‚Ä¢ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "–¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"

6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –û–î–ò–ù —Ä–∞–∑!)

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –•—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "–ü–µ—Å–æ—á–Ω–∏—Ü–∞"

üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:
docs/tbank/getting-started.md
        """
        messagebox.showinfo("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ T-Bank", help_text)
    
    def _check_tbank_connection(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ T-Bank API
        """
        try:
            import asyncio
            import os
            from ..trading.tbank_broker import TBankBroker
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
            token = self.tinkoff_token_var.get()
            if not token:
                token = os.getenv('TINKOFF_TOKEN')
            
            if not token:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω T-Bank.\n\n"
                    "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_TOKEN."
                )
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ sandbox
            sandbox = self.sandbox_mode_var.get()
            
            # –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            loading_dialog = tk.Toplevel(self.parent)
            loading_dialog.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            loading_dialog.geometry("350x120")
            loading_dialog.transient(self.parent)
            loading_dialog.grab_set()
            
            ttk.Label(
                loading_dialog,
                text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ T-Bank API...",
                font=('Arial', 10)
            ).pack(pady=20)
            
            progress = ttk.Progressbar(
                loading_dialog,
                mode='indeterminate'
            )
            progress.pack(fill=tk.X, padx=20)
            progress.start()
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def check_connection():
                try:
                    async def test_connection():
                        broker = TBankBroker(
                            token=token,
                            sandbox=sandbox
                        )
                        await broker.initialize()
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–µ
                        balance = await broker.get_total_balance_rub()
                        status = broker.get_status()
                        
                        return {
                            'success': True,
                            'balance': balance,
                            'account_id': status.get('account_id'),
                            'mode': status.get('mode'),
                            'instruments': status.get('instruments_loaded', 0)
                        }
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    result = loop.run_until_complete(test_connection())
                    loop.close()
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    self.parent.after(0, lambda: self._show_connection_result(result, loading_dialog))
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    self.parent.after(0, lambda: self._show_connection_error(str(e), loading_dialog))
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            check_thread = threading.Thread(target=check_connection, daemon=True)
            check_thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n{e}")
    
    def _show_connection_result(self, result: dict, dialog):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            dialog: –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            dialog.destroy()
            
            if result.get('success'):
                mode_text = "–ü–µ—Å–æ—á–Ω–∏—Ü–∞ (Sandbox)" if result.get('mode') == 'sandbox' else "–ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º (Production)"
                
                info_text = (
                    f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"–†–µ–∂–∏–º: {mode_text}\n"
                    f"Account ID: {result.get('account_id', 'N/A')}\n"
                    f"–ë–∞–ª–∞–Ω—Å: {result.get('balance', 0):,.2f} ‚ÇΩ\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {result.get('instruments', 0)}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏."
                )
                
                messagebox.showinfo("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ T-Bank", info_text)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ T-Bank API")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def _show_connection_error(self, error_msg: str, dialog):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Args:
            error_msg: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            dialog: –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        try:
            dialog.destroy()
            messagebox.showerror(
                "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ T-Bank API:\n\n{error_msg}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞\n"
                f"‚Ä¢ –ù–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ sandbox/production\n"
                f"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ tinkoff-investments"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
