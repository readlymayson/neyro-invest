"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import asyncio
from typing import Optional, Dict, Any
from datetime import datetime
from pathlib import Path

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from loguru import logger
import threading
import queue

from ..core.investment_system import InvestmentSystem
from .dashboard_panel import DashboardPanel
from .trading_panel import TradingPanel
from .portfolio_panel import PortfolioPanel
from .config_panel import ConfigPanel
from .logs_panel import LogsPanel


class MainWindow:
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        """
        self.root = tk.Tk()
        self.root.title("–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        
        # –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        self.investment_system: Optional[InvestmentSystem] = None
        self.system_running = False
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        self.update_queue = queue.Queue()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self._setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_menu()
        self._create_toolbar()
        self._create_main_area()
        self._create_status_bar()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self._bind_events()
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self._start_update_handler()
        
        logger.info("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def _setup_styles(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        style = ttk.Style()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        style.theme_use('clam')
        
        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
        style.configure('Title.TLabel', font=('Arial', 14, 'bold'))
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Status.TLabel', font=('Arial', 10))
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('Success.TButton', background='#28a745')
        style.configure('Danger.TButton', background='#dc3545')
        style.configure('Warning.TButton', background='#ffc107')
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        style.configure('Running.TLabel', foreground='#28a745', font=('Arial', 10, 'bold'))
        style.configure('Stopped.TLabel', foreground='#dc3545', font=('Arial', 10, 'bold'))
        style.configure('Warning.TLabel', foreground='#ffc107', font=('Arial', 10, 'bold'))
    
    def _create_menu(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", command=self._new_config)
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self._open_config)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self._save_config)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", command=self._export_data)
        file_menu.add_command(label="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", command=self._import_data)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self._on_closing)
        
        # –ú–µ–Ω—é "–°–∏—Å—Ç–µ–º–∞"
        system_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–∏—Å—Ç–µ–º–∞", menu=system_menu)
        system_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", command=self._start_system)
        system_menu.add_command(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", command=self._stop_system)
        system_menu.add_separator()
        system_menu.add_command(label="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", command=self._show_system_status)
        system_menu.add_command(label="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self._reload_config)
        
        # –ú–µ–Ω—é "–¢–æ—Ä–≥–æ–≤–ª—è"
        trading_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–¢–æ—Ä–≥–æ–≤–ª—è", menu=trading_menu)
        trading_menu.add_command(label="–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", command=self._emergency_stop)
        trading_menu.add_command(label="–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", command=self._close_all_positions)
        trading_menu.add_separator()
        trading_menu.add_command(label="–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫", command=self._show_trade_history)
        
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", command=self._show_documentation)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self._show_about)
    
    def _create_toolbar(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        self.toolbar = ttk.Frame(self.root)
        self.toolbar.pack(side=tk.TOP, fill=tk.X, padx=5, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
        self.start_button = ttk.Button(
            self.toolbar, 
            text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", 
            command=self._start_system,
            style='Success.TButton'
        )
        self.start_button.pack(side=tk.LEFT, padx=2)
        
        self.stop_button = ttk.Button(
            self.toolbar, 
            text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
            command=self._stop_system,
            style='Danger.TButton',
            state='disabled'
        )
        self.stop_button.pack(side=tk.LEFT, padx=2)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(self.toolbar, orient='vertical').pack(side=tk.LEFT, fill=tk.Y, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        ttk.Button(
            self.toolbar, 
            text="üìä –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
            command=self._refresh_data
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            self.toolbar, 
            text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
            command=self._show_settings
        ).pack(side=tk.LEFT, padx=2)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        self.status_indicator = ttk.Label(
            self.toolbar, 
            text="‚óè –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            style='Stopped.TLabel'
        )
        self.status_indicator.pack(side=tk.RIGHT, padx=10)
    
    def _create_main_area(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
        """
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ "–î–∞—à–±–æ—Ä–¥"
        self.dashboard_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.dashboard_frame, text="üìä –î–∞—à–±–æ—Ä–¥")
        self.dashboard_panel = DashboardPanel(self.dashboard_frame, self)
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–æ—Ä–≥–æ–≤–ª—è"
        self.trading_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.trading_frame, text="üíπ –¢–æ—Ä–≥–æ–≤–ª—è")
        self.trading_panel = TradingPanel(self.trading_frame, self)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–æ—Ä—Ç—Ñ–µ–ª—å"
        self.portfolio_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.portfolio_frame, text="üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å")
        self.portfolio_panel = PortfolioPanel(self.portfolio_frame, self)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
        self.config_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.config_frame, text="‚öô –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        self.config_panel = ConfigPanel(self.config_frame, self)
        
        # –í–∫–ª–∞–¥–∫–∞ "–õ–æ–≥–∏"
        self.logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.logs_frame, text="üìù –õ–æ–≥–∏")
        self.logs_panel = LogsPanel(self.logs_frame, self)
    
    def _create_status_bar(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        self.status_bar = ttk.Frame(self.root)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        self.status_label = ttk.Label(
            self.status_bar, 
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            style='Status.TLabel'
        )
        self.status_label.pack(side=tk.LEFT, padx=5)
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.last_update_label = ttk.Label(
            self.status_bar, 
            text="",
            style='Status.TLabel'
        )
        self.last_update_label.pack(side=tk.RIGHT, padx=5)
    
    def _bind_events(self):
        """
        –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        """
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.root.bind('<Control-s>', lambda e: self._save_config())
        self.root.bind('<Control-o>', lambda e: self._open_config())
        self.root.bind('<F5>', lambda e: self._refresh_data())
        self.root.bind('<F1>', lambda e: self._show_documentation())
    
    def _start_update_handler(self):
        """
        –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        def update_handler():
            try:
                while True:
                    try:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                        update_data = self.update_queue.get(timeout=0.1)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        self.root.after(0, self._process_update, update_data)
                        
                    except queue.Empty:
                        continue
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        update_thread = threading.Thread(target=update_handler, daemon=True)
        update_thread.start()
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._schedule_periodic_updates()
    
    def _schedule_periodic_updates(self):
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        self.root.after(5000, self._periodic_update)
    
    def _periodic_update(self):
        """
        –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            current_time = datetime.now().strftime("%H:%M:%S")
            self.last_update_label.config(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            if self.investment_system and self.system_running:
                status = self.investment_system.get_system_status()
                self._update_system_status(status)
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self._schedule_periodic_updates()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self._schedule_periodic_updates()
    
    def _process_update(self, update_data: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        
        Args:
            update_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            update_type = update_data.get('type')
            
            if update_type == 'system_status':
                self._update_system_status(update_data.get('data'))
            elif update_type == 'portfolio_update':
                self.portfolio_panel.update_data(update_data.get('data'))
            elif update_type == 'trading_signal':
                self.trading_panel.add_signal(update_data.get('data'))
            elif update_type == 'log_message':
                self.logs_panel.add_log_message(update_data.get('data'))
            elif update_type == 'error':
                self._show_error(update_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def _update_system_status(self, status: Dict[str, Any]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            status: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            is_running = status.get('is_running', False)
            
            if is_running:
                self.status_indicator.config(
                    text="‚óè –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    style='Running.TLabel'
                )
                self.start_button.config(state='disabled')
                self.stop_button.config(state='normal')
                self.status_label.config(text="–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
            else:
                self.status_indicator.config(
                    text="‚óè –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                    style='Stopped.TLabel'
                )
                self.start_button.config(state='normal')
                self.stop_button.config(state='disabled')
                self.status_label.config(text="–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–µ–π
            self.dashboard_panel.update_system_status(status)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def _start_system(self):
        """
        –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        """
        try:
            if self.system_running:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
            config_path = self.config_panel.get_current_config_path()
            self.investment_system = InvestmentSystem(config_path)
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_system():
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(self.investment_system.start_trading())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
                    self.update_queue.put({
                        'type': 'error',
                        'message': f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}"
                    })
                finally:
                    self.system_running = False
            
            system_thread = threading.Thread(target=run_system, daemon=True)
            system_thread.start()
            
            self.system_running = True
            logger.info("–°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}")
    
    def _stop_system(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        """
        try:
            if not self.system_running or not self.investment_system:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            def stop_system():
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(self.investment_system.stop_trading())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            
            stop_thread = threading.Thread(target=stop_system, daemon=True)
            stop_thread.start()
            
            self.system_running = False
            logger.info("–°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}")
    
    def _emergency_stop(self):
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        """
        result = messagebox.askyesno(
            "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É?\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        
        if result:
            self.system_running = False
            if self.investment_system:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                try:
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    logger.warning("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    
    def _show_error(self, message: str):
        """
        –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        messagebox.showerror("–û—à–∏–±–∫–∞", message)
    
    def _new_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config_panel.new_config()
    
    def _open_config(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config_panel.open_config()
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config_panel.save_config()
    
    def _export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_system_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if self.investment_system:
            status = self.investment_system.get_system_status()
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–∫–Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            messagebox.showinfo("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {status.get('is_running', False)}")
        else:
            messagebox.showinfo("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _reload_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config_panel.reload_config()
    
    def _close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        result = messagebox.askyesno(
            "–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏?"
        )
        
        if result:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _show_trade_history(self):
        """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def _refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
            self.dashboard_panel.refresh_data()
            self.trading_panel.refresh_data()
            self.portfolio_panel.refresh_data()
            
            self.status_label.config(text="–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            logger.info("–î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def _show_settings(self):
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.notebook.select(self.config_frame)
    
    def _show_documentation(self):
        """–ü–æ–∫–∞–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        messagebox.showinfo("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–∞–ø–∫–µ docs/")
    
    def _show_about(self):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
–í–µ—Ä—Å–∏—è 1.0.0

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
–Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è
—Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.

¬© 2024 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã
        """
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def _on_closing(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        if self.system_running:
            result = messagebox.askyesno(
                "–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "–°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
                "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?"
            )
            
            if result:
                self._stop_system()
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
                self.root.after(2000, self.root.destroy)
            return
        
        self.root.destroy()
    
    def run(self):
        """
        –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
            self.root.mainloop()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        finally:
            logger.info("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–∫—Ä—ã—Ç")
    
    def get_investment_system(self) -> Optional[InvestmentSystem]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        
        Returns:
            –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–ª–∏ None
        """
        return self.investment_system
    
    def is_system_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        return self.system_running
    
    def add_update(self, update_data: Dict[str, Any]):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
        
        Args:
            update_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        try:
            self.update_queue.put(update_data, timeout=1)
        except queue.Full:
            logger.warning("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
